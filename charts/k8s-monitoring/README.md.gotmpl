<!--
(NOTE: Do not edit README.md directly. It is a generated file!)
(      To make changes, please modify README.md.gotmpl and run `helm-docs`)
-->

{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

## Breaking change announcements

### **v1.0.0**

Grafana Agent has been replaced with [Grafana Alloy](https://grafana.com/oss/alloy-opentelemetry-collector/)!

These sections in your values file will need to be renamed:

| Old                      | New              | Purpose                                                          |
|--------------------------|------------------|------------------------------------------------------------------|
| `grafana-agent`          | `alloy`          | Settings for the Alloy instance for metrics and application data |
| `grafana-agent-events`   | `alloy-events`   | Settings for the Alloy instance for Cluster events               |
| `grafana-agent-logs`     | `alloy-logs`     | Settings for the Alloy instance for Pod logs                     |
| `grafana-agent-profiles` | `alloy-profiles` | Settings for the Alloy instance for profiles                     |
| `metrics.agent`          | `metrics.alloy`  | Settings for scraping metrics from Alloy instances               |

For example, if you have something like this:

```yaml
grafana-agent:
  controller:
    replicas: 2
```

you will need to change it to this:

```yaml
alloy:
  controller:
    replicas: 2
`````

### **v0.12.0**

The component `loki.write.grafana_cloud_loki` has been renamed.
When forwarding logs to be sent to your logs service endpoint, please use `loki.process.logs_service` instead.
This component will deliver logs, no matter which protocol is used for your logs service.

### **v0.9.0**

Additional metric tuning rules have been made available for all metric sources. This means the removal of the
`.allowList` fields from each metric source. If you have set custom allow lists for a metric source, you will need to
make those changes in the new `.metricsTuning` section.

The default allow list remains in place, but it's toggled with `.metricsTuning.useDefaultAllowList`.

If you've added more metrics to the default allow list, put those additional metrics in the
`.metricsTuning.includeMetrics` section.

If you've removed metrics from the default allow list, put the *metrics to remove* in the
`.metricsTuning.excludeMetrics` section.

For more information, see [this example](../../examples/custom-metrics-tuning).

### **v0.7.0**

The OTLP, OTLPHTTP, and Zipkin receiver definitions under `traces.receivers` has been moved up a level to `receivers`.
This is because receivers will be able to ingest more than just traces going forward.
Also, receivers are enabled by default, so you will likely not need to make changes to your values file other than
removing `.traces.receivers`.

### **v0.3.0**

The component `prometheus.remote_write.grafana_cloud_prometheus` has been renamed.
When forwarding metrics to be sent to your metrics service endpoint, please use `prometheus.relabel.metrics_service` instead.
This component will "fan-in" all of the metric sources to the correct metrics service.

## Usage

### Setup Grafana chart repository

```shell
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
```

### Install chart

To install the chart with the release name my-release:

```bash
cat >> values.yaml << EOF
cluster:
  name: my-cluster

externalServices:
  prometheus:
    host: https://prometheus.example.com
    basicAuth:
      username: "12345"
      password: "It's a secret to everyone"
  loki:
    host: https://loki.example.com
    basicAuth:
      username: "67890"
      password: "It's a secret to everyone"
EOF
helm install grafana-k8s-monitoring --atomic --timeout 300s  grafana/{{ template "chart.name" . }} --values values.yaml
```

This chart simplifies the deployment of a Kubernetes monitoring infrastructure, including the following:

-   [kube-state-metrics](https://github.com/kubernetes/kube-state-metrics), which gathers metrics about Kubernetes objects
-   [Node exporter](https://github.com/prometheus/node_exporter), which gathers metrics about Kubernetes nodes
-   [OpenCost](https://www.opencost.io/), which interprets the above to create cost metrics for the cluster, and
-   [Grafana Alloy](https://grafana.com/docs/alloy/latest/), which scrapes the above services to forward metrics to
    [Prometheus](https://prometheus.io/), logs and events to [Loki](https://grafana.com/oss/loki/), traces to
    [Tempo](https://grafana.com/oss/tempo/), and profiles to [Pyroscope](https://grafana.com/docs/pyroscope/).

The Prometheus and Loki services may be hosted on the same cluster, or remotely (e.g. on Grafana Cloud).

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

## Customizing the configuration

There are several options for customizing the configuration generated by this chart. This can be used to add extra
scrape targets, for example, to [scrape metrics from an application](./docs/ScrapeApplicationMetrics.md) deployed on the
same Kubernetes cluster.

### Adding custom Flow configuration

Any value supplied to the `.extraConfig` or `.logs.extraConfig` values will be appended to the generated config file
after being templated with Helm, so that you can refer to any values from this chart. This can be used to add more
Grafana Alloy components to provide extra functionality to the Alloy instance.

NOTE: This cannot be used to modify existing configuration values.

Extra flow components can re-use any of the existing components in the generated configuration, which includes several
useful ones like these:

-   `discovery.kubernetes.nodes` - Discovers all nodes in the cluster
-   `discovery.kubernetes.pods` - Discovers all pods in the cluster
-   `discovery.kubernetes.services` - Discovers all services in the cluster
-   `prometheus.relabel.metrics_service` - Sends metrics to the metrics service defined by `.externalService.prometheus`
-   `loki.process.logs_service` - Sends logs to the logs service defined by `.externalService.loki`

Example:

In this example, Alloy will find a service named `my-webapp-metrics` with the label `app.kubernetes.io/name=my-webapp`,
scrape them for Prometheus metrics, and send those metrics to Grafana Cloud.

```yaml
extraConfig: |-
  discovery.relabel "my_webapp" {
    targets = discovery.kubernetes.services.targets
    rule {
      source_labels = ["__meta_kubernetes_service_name"]
      regex = "my-webapp-metrics"
      action = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
      regex = "my-webapp"
      action = "keep"
    }
  }

  prometheus.scrape "my_webapp" {
    job_name   = "my_webapp"
    targets    = discovery.relabel.my_webapp.output
    forward_to = [prometheus.relabel.metrics_service.receiver]
  }
```

For an example values file and generated output, see [this example](../../examples/custom-config).

### Using Prometheus Operator CRDs

The default config can deploy the CRDs for Prometheus Operator, and will add support for `PodMonitor`,
`ServiceMonitor` and `Probe` objects.

Simply deploy a PodMonitor or a ServiceMonitor in the same namespace as Alloy and it will discover it and take the
appropriate action.

Use a selector to limit the discovered objects.

Example:

In this example, Alloy will find `ServiceMonitor` objects labeled with `example.com/environment=production`, scrape them
for Prometheus metrics, and send those metrics to Grafana Cloud.

```yaml
serviceMonitors:
  enabled: true
  selector: |-
    match_expression {
      key = "example.com/environment"
      operator = "In"
      values = ["production"]
    }

```

## Troubleshooting

If you're encountering issues deploying or using this chart, check the [Troubleshooting doc](./docs/Troubleshooting.md).

## Metrics Tuning and Allow Lists

This chart has the ability to easy control the amount of metrics, using pre-defined "allow lists".
[This document](./charts/k8s-monitoring/default_allow_lists) explains the allow lists and shows their contents.
