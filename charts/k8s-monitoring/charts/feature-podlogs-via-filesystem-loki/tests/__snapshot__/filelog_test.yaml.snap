should render using the filelog receiver:
  1: |
    |-
      declare "pod_logs" {
        argument "logs_destinations" {
          comment = "Must be a list of log destinations where collected logs should be forwarded to"
        }

        otelcol.receiver.filelog "pod_logs" {
          include = ["/var/log/pods/*/*/*.log"]
          start_at = "beginning"
          include_file_name = false
          include_file_path = true

          operators = [
            // Container operator will set k8s.pod.name, k8s.pod.uid, k8s.container.name, k8s.container.restart_count, and k8s.namespace.name
            {
              type                       = "container",
              add_metadata_from_filepath = true,
            },
          ]

          output {
            logs = [otelcol.processor.k8sattributes.pod_logs.input]
          }
        }

        otelcol.processor.k8sattributes "pod_logs" {
          pod_association {
            source {
              from = "resource_attribute"
              name = "k8s.pod.uid"
            }
          }

          extract {
            metadata = [
              "k8s.deployment.name",
              "k8s.statefulset.name",
              "k8s.daemonset.name",
              "k8s.cronjob.name",
              "k8s.job.name",
              "k8s.node.name",
            ]
            annotation {
              key_regex = "(.*)"
              tag_name  = "$1"
              from      = "pod"
            }
            annotation {
              key_regex = "resource.opentelemetry.io/(.*)"
              tag_name  = "$1"
              from      = "pod"
            }
            annotation {
              tag_name = "job"
              key      = "k8s.grafana.com/logs.job"
              from     = "pod"
            }
            label {
              key_regex = "(.*)"
              tag_name  = "$1"
              from      = "pod"
            }
            label {
              tag_name = "app_kubernetes_io_name"
              key      = "app.kubernetes.io/name"
              from     = "pod"
            }
          }

          output {
            logs = [otelcol.processor.transform.pod_logs.input]
          }
        }

        otelcol.processor.transform "pod_logs" {
          error_mode = "ignore"
          log_statements {
            context = "resource"
            statements = [
              `delete_key(attributes, "k8s.container.restart_count")`,

              `set(attributes["service.name"], attributes["app.kubernetes.io/name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.deployment.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.replicaset.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.statefulset.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.daemonset.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.cronjob.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.job.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.pod.name"]) where attributes["service.name"] == nil`,
              `set(attributes["service.name"], attributes["k8s.container.name"]) where attributes["service.name"] == nil`,

              `set(attributes["service.namespace"], attributes["k8s.namespace.name"]) where attributes["service.namespace"] == nil`,

              `set(attributes["service.version"], attributes["app.kubernetes.io/version"]) where attributes["service.version"] == nil`,

              `set(attributes["service.instance.id"], Concat([attributes["k8s.namespace.name"], attributes["k8s.pod.name"], attributes["k8s.container.name"]], ".")) where attributes["service.instance.id"] == nil`,

              `set(attributes["loki.resource.labels"], "app.kubernetes.io/name,container,instance,job,level,namespace,service.name,service.namespace,deployment.environment,deployment.environment.name,k8s.namespace.name,k8s.deployment.name,k8s.statefulset.name,k8s.daemonset.name,k8s.cronjob.name,k8s.job.name,k8s.node.name")`,   // Used to preserve the labels when converting to Loki
              `keep_matching_keys(attributes, "loki.resource.labels|app.kubernetes.io/name|container|instance|job|level|namespace|service.name|service.namespace|deployment.environment|deployment.environment.name|k8s.namespace.name|k8s.deployment.name|k8s.statefulset.name|k8s.daemonset.name|k8s.cronjob.name|k8s.job.name|k8s.node.name")`,
            ]
          }

          log_statements {
            context = "log"
            statements = [
              `delete_key(attributes, "log.file.path")`,
            ]
          }

          output {
            logs = [otelcol.exporter.loki.pod_logs.input]
          }
        }

        otelcol.exporter.loki "pod_logs" {
          forward_to = [loki.process.pod_logs.receiver]
        }

        loki.process "pod_logs" {
          stage.match {
            selector = "{tmp_container_runtime=~\"containerd|cri-o\"}"
            // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
            stage.cri {}

            // Set the extract flags and stream values as labels
            stage.labels {
              values = {
                flags  = "",
                stream  = "",
              }
            }
          }

          stage.match {
            selector = "{tmp_container_runtime=\"docker\"}"
            // the docker processing stage extracts the following k/v pairs: log, stream, time
            stage.docker {}

            // Set the extract stream value as a label
            stage.labels {
              values = {
                stream  = "",
              }
            }
          }

          // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,
          // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary
          // container runtime label as it is no longer needed.
          stage.label_drop {
            values = [
              "filename",
              "tmp_container_runtime",
            ]
          }
          stage.structured_metadata {
            values = {
              "k8s_pod_name" = "k8s_pod_name",
              "pod" = "pod",
              "service_instance_id" = "service_instance_id",
            }
          }

          // Only keep the labels that are defined in the `keepLabels` list.
          stage.label_keep {
            values = ["__tenant_id__","app_kubernetes_io_name","container","instance","job","level","namespace","service_name","service_namespace","deployment_environment","deployment_environment_name","k8s_namespace_name","k8s_deployment_name","k8s_statefulset_name","k8s_daemonset_name","k8s_cronjob_name","k8s_job_name","k8s_node_name"]
          }

          forward_to = argument.logs_destinations.value
        }
      }
