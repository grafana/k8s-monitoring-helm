---
# -- Name override
# @section -- General settings
nameOverride: ""

# -- Full name override
# @section -- General settings
fullnameOverride: ""

receivers:
  otlp:
    # The OTLP gRPC receiver configuration.
    grpc:
      # -- Accept application data over OTLP gRPC.
      # @section -- Receivers: OTLP
      enabled: false

      # -- The port to listen on for OTLP gRPC requests.
      # @section -- Receivers: OTLP
      port: 4317

      # -- Propagate incoming connection metadata to downstream consumers.
      # @section -- Receivers: OTLP
      includeMetadata: false

      # -- Maximum size of messages the gRPC server will accept.
      # @section -- Receivers: OTLP
      maxReceivedMessageSize: 4MiB

      # -- Limit the number of concurrent streaming gRPC calls. 0 means no limit.
      # @section -- Receivers: OTLP
      maxConcurrentStreams: 0

      # -- Size of the read buffer the gRPC server will use for reading from clients.
      # @section -- Receivers: OTLP
      readBufferSize: 512KiB

      # -- Size of the write buffer the gRPC server will use for writing to clients.
      # @section -- Receivers: OTLP
      writeBufferSize: 32KiB

    # The OTLP HTTP receiver configuration.
    http:
      # -- Accept application data over OTLP HTTP.
      # @section -- Receivers: OTLP
      enabled: false

      # -- The port to listen on for OTLP HTTP requests.
      # @section -- Receivers: OTLP
      port: 4318

      # -- Propagate incoming connection metadata to downstream consumers.
      # @section -- Receivers: OTLP
      includeMetadata: false

      # -- Maximum request body size the server will allow.
      # @section -- Receivers: OTLP
      maxRequestBodySize: 20MiB

    # -- Whether to include high-cardinality debug metrics.
    # @section -- Receivers: OTLP
    includeDebugMetrics: false

  jaeger:
    # -- Configuration for the Jaeger receiver using the gRPC protocol.
    # @section -- Receivers: Jaeger
    grpc:
      enabled: false
      port: 14250

    # -- Configuration for the Jaeger receiver using the Thrift binary protocol.
    # @section -- Receivers: Jaeger
    thriftBinary:
      enabled: false
      port: 6832

    # -- Configuration for the Jaeger receiver using the Thrift compact protocol.
    # @section -- Receivers: Jaeger
    thriftCompact:
      enabled: false
      port: 6831

    # -- Configuration for the Jaeger receiver using the Thrift HTTP protocol.
    # @section -- Receivers: Jaeger
    thriftHttp:
      enabled: false
      port: 14268

    # -- Whether to include high-cardinality debug metrics.
    # @section -- Receivers: Jaeger
    includeDebugMetrics: false

  # -- The Zipkin receiver configuration.
  # @section -- Receivers: Zipkin
  zipkin:
    enabled: false
    port: 9411

    # -- Whether to include high-cardinality debug metrics.
    # @section -- Receivers: Zipkin
    includeDebugMetrics: false

# Processors are components that modify the telemetry data, such as filtering, batching, and adding metadata.
processors:
  batch:
    # -- Number of spans, metric data points, or log records after which a batch will be sent regardless of the timeout.
    # This setting acts as a trigger and does not affect the size of the batch. If you need to enforce batch size limit,
    # use `maxSize`.
    # @section -- Processors: Batch
    size: 8192
    # -- Maximum number of spans, metric data points, or log records to send in a single batch. This number must be
    # greater than or equal to the `size` setting. If set to 0, the batch processor will not enforce a maximum size.
    # @section -- Processors: Batch
    maxSize: 0
    # -- How long before sending (Processors)
    # @section -- Processors: Batch
    timeout: 2s

  interval:
    # -- Utilize an interval processor to aggregate metrics and periodically forward the latest values to the next
    # component in the pipeline.
    # @section -- Processors: Interval
    enabled: false

    # -- The interval at which to emit aggregated metrics.
    # @section -- Processors: Interval
    interval: 60s

    passthrough:
      # -- Determines whether gauge metrics should be passed through as they are or aggregated.
      # @section -- Processors: Interval
      gauge: false

      # -- Determines whether summary metrics should be passed through as they are or aggregated.
      # @section -- Processors: Interval
      summary: false

  # Capture Resource attributes from various sources. You can add more than is listed here. For example:
  # resourceDetection:
  #   sourceType:
  #     enabled: true
  #     resourceAttributes:
  #       host.name:
  #         enabled: true
  # @section -- Processors: Resource Detection
  resourceDetection:
    # -- Configures whether existing resource attributes should be overridden or preserved.
    # @section -- Processors: Resource Detection
    override: true

    env:
      # -- Enable getting resource attributes from the OTEL_RESOURCE_ATTRIBUTES environment variable.
      # @section -- Processors: Resource Detection
      enabled: true

    system:
      # -- Enable getting resource attributes from the host machine.
      # @section -- Processors: Resource Detection
      enabled: true
      # -- The priority list of sources from which the hostname will be determined. Options: ["dns", "os", "cname", "lookup"].
      # @section -- Processors: Resource Detection
      hostnameSources:
        - os
      # -- The list of resource attributes to add for system resource detection. See the
      # [Alloy documentation](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.resourcedetection/#system--resource_attributes)
      # for a list of available attributes.
      # @section -- Processors: Resource Detection
      resourceAttributes: {}

    kubernetesNode:
      # -- Enable getting resource attributes about the Kubernetes node from the API server.
      # @section -- Processors: Resource Detection
      enabled: false

      # -- The authentication method. This should not be changed.
      # @section -- Processors: Resource Detection
      authType: serviceAccount

      # -- The name of an environment variable from which to retrieve the node name.
      # @section -- Processors: Resource Detection
      nodeFromEnvVar: K8S_NODE_NAME

  k8sattributes:
    # -- Kubernetes metadata to extract and add to the attributes of the received telemetry data.
    # @section -- Processors: K8s Attributes
    metadata:
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.daemonset.name
      - k8s.cronjob.name
      - k8s.job.name
      - k8s.node.name
      - k8s.pod.uid
      - k8s.pod.start_time

    # -- Kubernetes labels to extract and add to the attributes of the received telemetry data.
    # @section -- Processors: K8s Attributes
    labels: []

    # -- Kubernetes annotations to extract and add to the attributes of the received telemetry data.
    # @section -- Processors: K8s Attributes
    annotations: []

  memoryLimiter:
    # -- Use a memory limiter.
    # @section -- Processors: Memory Limiter
    enabled: false
    # -- How often to check memory usage.
    # @section -- Processors: Memory Limiter
    checkInterval: 1s
    # -- Maximum amount of memory targeted to be allocated by the process heap.
    # @section -- Processors: Memory Limiter
    limit: 0MiB

# Connectors are components that create new telemetry data from existing telemetry data.
connectors:
  grafanaCloudMetrics:
    # -- Generate host info metrics from telemetry data. These metrics are required for using Application Observability
    # in Grafana Cloud. Note: Enabling this may incur additional costs.
    # See [Application Observability Pricing](https://grafana.com/docs/grafana-cloud/monitor-applications/application-observability/pricing/)
    # @section -- Connectors: Grafana Cloud Host Info
    enabled: true

  # Span Logs connector settings.
  spanLogs:
    # -- Use a span logs connector which creates logs from spans.
    # @section -- Connectors: Span Logs
    enabled: false

    # -- Create a log line for each span. This can lead to a large number of logs.
    # @section -- Connectors: Span Logs
    spans: false
    # -- Additional span attributes to log.
    # @section -- Connectors: Span Logs
    spanAttributes: []

    # -- Log one line for every root span of a trace.
    # @section -- Connectors: Span Logs
    roots: false

    # -- Log one line for every process.
    # @section -- Connectors: Span Logs
    process: false
    # -- Additional process attributes to log.
    # @section -- Connectors: Span Logs
    processAttributes: []

    # -- A list of keys that will be logged as labels.
    # @section -- Connectors: Span Logs
    labels: []

  # Span Metrics connector settings.
  spanMetrics:
    # -- Use a span metrics connector which creates metrics from spans.
    # @section -- Connectors: Span Metrics
    enabled: false

    # -- Define dimensions to be added.
    # Some are set internally by default: [service.name, span.name, span.kind, status.code]
    # Example:
    # - name: "http.status_code"
    # - name: "http.method"
    #   default: "GET"
    # @section -- Connectors: Span Metrics
    dimensions: []

    # -- How many dimensions to cache
    # @section -- Connectors: Span Metrics
    dimensionsCacheSize: 1000

    # -- The Metric namespace.
    # @section -- Connectors: Span Metrics
    namespace: traces.span.metrics

    events:
      # -- Capture events metrics, which track span events.
      # @section -- Connectors: Span Metrics
      enabled: false

    exemplars:
      # -- Attach exemplars to histograms.
      # @section -- Connectors: Span Metrics
      enabled: false

      # -- (number) Limits the number of exemplars that can be added to a unique dimension set.
      # @section -- Connectors: Span Metrics
      maxPerDataPoint:

    histogram:
      # -- Capture histogram metrics, derived from spans’ durations.
      # @section -- Connectors: Span Metrics
      enabled: true

      # -- Type of histograms to create. Must be either "explicit" or "exponential".
      # @section -- Connectors: Span Metrics
      type: explicit

      # -- The histogram unit.
      # @section -- Connectors: Span Metrics
      unit: ms

      # Settings for explicit histograms.
      explicit:
        # -- The histogram buckets to use.
        # @section -- Connectors: Span Metrics
        buckets: ["2ms", "4ms", "6ms", "8ms", "10ms", "50ms", "100ms", "200ms", "400ms", "800ms", "1s", "1400ms", "2s", "5s", "10s", "15s"]

      # Settings for exponential histograms.
      exponential:
        # -- Maximum number of buckets per positive or negative number range.
        # @section -- Connectors: Span Metrics
        maxSize: 160

metrics:
  enabled: true
  # -- Apply a filter to metrics received via the OTLP or OTLP HTTP receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.filter/))
  filters:
    metric: []
    datapoint: []
  # -- Apply a transformation to metrics received via the OTLP or OTLP HTTP receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.transform/))
  transforms:
    resource: []
    metric: []
    datapoint: []

logs:
  enabled: true
  # -- Apply a filter to logs received via receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.filter/))
  filters:
    log_record: []
  # -- Apply a transformation to logs received via the OTLP or OTLP HTTP receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.transform/))
  transforms:
    # -- Resource transformation rules.
    resource: []
    # -- Log transformation rules.
    log: []
    # -- The list of labels to set in the log stream.
    labels: ["cluster", "namespace", "job", "pod"]

traces:
  enabled: true
  # -- Apply a filter to traces received via the OTLP or OTLP HTTP receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.filter/))
  filters:
    span: []
    spanevent: []
  # -- Apply a transformation to traces received via the OTLP or OTLP HTTP receivers.
  # ([docs](https://grafana.com/docs/alloy/latest/reference/components/otelcol/otelcol.processor.transform/))
  transforms:
    resource: []
    span: []
    spanevent: []

# @ignore
deployAsConfigMap: false
