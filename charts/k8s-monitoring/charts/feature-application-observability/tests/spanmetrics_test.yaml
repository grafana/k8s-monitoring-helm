# yamllint disable rule:document-start rule:line-length rule:trailing-spaces
suite: Test with spanmetrics processor
templates:
  - configmap.yaml
tests:
  - it: creates the pipeline with the spanmetrics connector
    set:
      deployAsConfigMap: true
      processors:
        interval:
          enabled: true
      connectors:
        spanMetrics:
          enabled: true
          dimensions:
            - name: "http.status_code"
            - name: "http.method"
              default: "GET"
      receivers:
        otlp:
          grpc:
            enabled: true
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data["module.alloy"]
          value: |-
            declare "application_observability" {
              argument "metrics_destinations" {
                comment = "Must be a list of metrics destinations where collected metrics should be forwarded to"
              }
          
              argument "logs_destinations" {
                comment = "Must be a list of log destinations where collected logs should be forwarded to"
              }
          
              argument "traces_destinations" {
                comment = "Must be a list of trace destinations where collected trace should be forwarded to"
              }
          
              // OTLP Receiver
              otelcol.receiver.otlp "receiver" {
                grpc {
                  endpoint = "0.0.0.0:4317"
                }
                debug_metrics {
                  disable_high_cardinality_metrics = true
                }
                output {
                  metrics = [otelcol.processor.resourcedetection.default.input]
                  logs = [otelcol.processor.resourcedetection.default.input]
                  traces = [otelcol.processor.resourcedetection.default.input]
                }
              }

              // Resource Detection Processor
              otelcol.processor.resourcedetection "default" {
                detectors = ["env","system"]

                system {
                  hostname_sources = ["os"]
                }
          
                output {
                  metrics = [otelcol.processor.k8sattributes.default.input]
                  logs = [otelcol.processor.k8sattributes.default.input]
                  traces = [otelcol.processor.k8sattributes.default.input]
                }
              }
          
              // K8s Attributes Processor
              otelcol.processor.k8sattributes "default" {
                extract {
                  metadata = ["k8s.namespace.name","k8s.pod.name","k8s.deployment.name","k8s.statefulset.name","k8s.daemonset.name","k8s.cronjob.name","k8s.job.name","k8s.node.name","k8s.pod.uid","k8s.pod.start_time"]
                }
                pod_association {
                  source {
                    from = "resource_attribute"
                    name = "k8s.pod.ip"
                  }
                }
                pod_association {
                  source {
                    from = "resource_attribute"
                    name = "k8s.pod.uid"
                  }
                }
                pod_association {
                  source {
                    from = "connection"
                  }
                }
          
                output {
                  metrics = [otelcol.processor.transform.default.input]
                  logs = [otelcol.processor.transform.default.input]
                  traces = [otelcol.processor.transform.default.input, otelcol.connector.host_info.default.input]
                }
              }

              // Host Info Connector
              otelcol.connector.host_info "default" {
                host_identifiers = [ "k8s.node.name" ]
          
                output {
                  metrics = [otelcol.processor.batch.default.input]
                }
              }
            
              // Transform Processor
              otelcol.processor.transform "default" {
                error_mode = "ignore"
                log_statements {
                  context = "resource"
                  statements = [
                    "set(attributes[\"pod\"], attributes[\"k8s.pod.name\"])",
                    "set(attributes[\"namespace\"], attributes[\"k8s.namespace.name\"])",
                    "set(attributes[\"loki.resource.labels\"], \"cluster, namespace, job, pod\")",
                  ]
                }
          
                output {
                  metrics = [otelcol.processor.batch.default.input]
                  logs = [otelcol.processor.batch.default.input]
                  traces = [otelcol.connector.spanmetrics.default.input, otelcol.processor.batch.default.input]
                }
              }

              // Span Metrics Connector
              otelcol.connector.spanmetrics "default" {
                dimension {
                  name = "http.status_code"
                }
                dimension {
                  name = "http.method"
                  default = "GET"
                }
                dimensions_cache_size = 1000
                namespace = "traces.span.metrics"

                histogram {
                  disable = false
                  unit = "ms"
                  explicit {
                    buckets = ["2ms","4ms","6ms","8ms","10ms","50ms","100ms","200ms","400ms","800ms","1s","1400ms","2s","5s","10s","15s"]
                  }
                }

                output {
                  metrics = [otelcol.processor.batch.default.input]
                }
              }

              // Batch Processor
              otelcol.processor.batch "default" {
                send_batch_size = 8192
                send_batch_max_size = 0
                timeout = "2s"

                output {
                  metrics = [otelcol.processor.interval.default.input]
                  logs = [otelcol.processor.interval.default.input]
                  traces = [otelcol.processor.interval.default.input]
                }
              }

              // Interval Processor
              otelcol.processor.interval "default" {
                interval = "60s"
                passthrough {
                  gauge = false
                  summary = false
                }
          
                output {
                  metrics = argument.metrics_destinations.value
                  logs = argument.logs_destinations.value
                  traces = argument.traces_destinations.value
                }
              }
            }
