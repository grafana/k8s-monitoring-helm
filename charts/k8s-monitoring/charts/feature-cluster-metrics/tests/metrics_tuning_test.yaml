# yamllint disable rule:document-start rule:line-length rule:trailing-spaces
suite: Test custom metrics tuning settings
templates:
  - configmap.yaml
tests:
  - it: should render with modified metrics tuning settings
    set:
      deployAsConfigMap: true
      cadvisor:
        metricsTuning:
          useDefaultAllowList: false
      kube-state-metrics:
        metricsTuning:
          excludeMetrics: ["kube_replicaset.*"]
      node-exporter:
        metricsTuning:
          useIntegrationAllowList: true
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data["module.alloy"]
          value: |-
            declare "cluster_metrics" {
              argument "metrics_destinations" {
                comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
              }

              import.git "kubernetes" {
                repository = "https://github.com/grafana/alloy-modules.git"
                revision = "main"
                path = "modules/kubernetes/core/metrics.alloy"
                pull_frequency = "15m"
              }
            
              kubernetes.kubelet "scrape" {
                clustering = true
                job_label = "integrations/kubernetes/kubelet"
                keep_metrics = "up|scrape_samples_scraped|go_goroutines|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|kubernetes_build_info|namespace_workload_pod|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = argument.metrics_destinations.value
              }
          
              kubernetes.resources "scrape" {
                clustering = true
                job_label = "integrations/kubernetes/resources"
                keep_metrics = "up|scrape_samples_scraped|node_cpu_usage_seconds_total|node_memory_working_set_bytes"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = argument.metrics_destinations.value
              }
          
              kubernetes.cadvisor "scrape" {
                clustering = true
                job_label = "integrations/kubernetes/cadvisor"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = [prometheus.relabel.cadvisor.receiver]
              }
          
              prometheus.relabel "cadvisor" {
                max_cache_size = 100000
                // Drop empty container labels, addressing https://github.com/google/cadvisor/issues/2688
                rule {
                  source_labels = ["__name__","container"]
                  separator = "@"
                  regex = "(container_cpu_.*|container_fs_.*|container_memory_.*)@"
                  action = "drop"
                }
                // Drop empty image labels, addressing https://github.com/google/cadvisor/issues/2688
                rule {
                  source_labels = ["__name__","image"]
                  separator = "@"
                  regex = "(container_cpu_.*|container_fs_.*|container_memory_.*|container_network_.*)@"
                  action = "drop"
                }
                // Normalizing unimportant labels (not deleting to continue satisfying <label>!="" checks)
                rule {
                  source_labels = ["__name__", "boot_id"]
                  separator = "@"
                  regex = "machine_memory_bytes@.*"
                  target_label = "boot_id"
                  replacement = "NA"
                }
                rule {
                  source_labels = ["__name__", "system_uuid"]
                  separator = "@"
                  regex = "machine_memory_bytes@.*"
                  target_label = "system_uuid"
                  replacement = "NA"
                }
                // Filter out non-physical devices/interfaces
                rule {
                  source_labels = ["__name__", "device"]
                  separator = "@"
                  regex = "container_fs_.*@(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dasd.+)"
                  target_label = "__keepme"
                  replacement = "1"
                }
                rule {
                  source_labels = ["__name__", "__keepme"]
                  separator = "@"
                  regex = "container_fs_.*@"
                  action = "drop"
                }
                rule {
                  source_labels = ["__name__"]
                  regex = "container_fs_.*"
                  target_label = "__keepme"
                  replacement = ""
                }
                rule {
                  source_labels = ["__name__", "interface"]
                  separator = "@"
                  regex = "container_network_.*@(en[ospx][0-9].*|wlan[0-9].*|eth[0-9].*)"
                  target_label = "__keepme"
                  replacement = "1"
                }
                rule {
                  source_labels = ["__name__", "__keepme"]
                  separator = "@"
                  regex = "container_network_.*@"
                  action = "drop"
                }
                rule {
                  source_labels = ["__name__"]
                  regex = "container_network_.*"
                  target_label = "__keepme"
                  replacement = ""
                }
                forward_to = argument.metrics_destinations.value
              }
          
              import.git "kube_state_metrics" {
                repository = "https://github.com/grafana/alloy-modules.git"
                revision = "main"
                path = "modules/kubernetes/kube-state-metrics/metrics.alloy"
                pull_frequency = "15m"
              }
          
              kube_state_metrics.kubernetes "targets" {
                namespaces = ["NAMESPACE"]
                port_name = "http"
                label_selectors = [
                  "app.kubernetes.io/name=kube-state-metrics",
                  "release=RELEASE-NAME",
                ]
              }
          
              kube_state_metrics.scrape "metrics" {
                targets = kube_state_metrics.kubernetes.targets.output
                clustering = true
                job_label = "integrations/kubernetes/kube-state-metrics"
                keep_metrics = "up|scrape_samples_scraped|kube_configmap_info|kube_configmap_metadata_resource_version|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*"
                drop_metrics = "kube_replicaset.*"
                scheme = "http"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = argument.metrics_destinations.value
              }
          
              import.git "node_exporter" {
                repository = "https://github.com/grafana/alloy-modules.git"
                revision = "main"
                path = "modules/system/node-exporter/metrics.alloy"
                pull_frequency = "15m"
              }
          
              node_exporter.kubernetes "targets" {
                namespaces = ["NAMESPACE"]
                port_name = "metrics"
                label_selectors = [
                  "app.kubernetes.io/name=node-exporter",
                  "release=RELEASE-NAME",
                ]
              }
          
              discovery.relabel "node_exporter" {
                targets = node_exporter.kubernetes.targets.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_node_name"]
                  action = "replace"
                  target_label = "instance"
                }
              }
          
              node_exporter.scrape "metrics" {
                targets = discovery.relabel.node_exporter.output
                job_label = "integrations/node_exporter"
                clustering = true
                keep_metrics = "up|scrape_samples_scraped|node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|node_network_receive_bytes_total|node_network_receive_drop_total|node_network_transmit_bytes_total|node_network_transmit_drop_total|process_cpu_seconds_total|process_resident_memory_bytes|node_arp_entries|node_boot_time_seconds|node_context_switches_total|node_disk_io_time_seconds_total|node_disk_io_time_weighted_seconds_total|node_disk_read_bytes_total|node_disk_read_time_seconds_total|node_disk_reads_completed_total|node_disk_write_time_seconds_total|node_disk_writes_completed_total|node_disk_written_bytes_total|node_filefd_allocated|node_filefd_maximum|node_intr_total|node_load1|node_load15|node_load5|node_md_disks|node_md_disks_required|node_netstat_Icmp6_InErrors|node_netstat_Icmp6_InMsgs|node_netstat_Icmp6_OutMsgs|node_netstat_Icmp_InErrors|node_netstat_Icmp_InMsgs|node_netstat_Icmp_OutMsgs|node_netstat_IpExt_InOctets|node_netstat_IpExt_OutOctets|node_netstat_TcpExt_ListenDrops|node_netstat_TcpExt_ListenOverflows|node_netstat_TcpExt_TCPSynRetrans|node_netstat_Tcp_InErrs|node_netstat_Tcp_InSegs|node_netstat_Tcp_OutRsts|node_netstat_Tcp_OutSegs|node_netstat_Tcp_RetransSegs|node_netstat_Udp6_InDatagrams|node_netstat_Udp6_InErrors|node_netstat_Udp6_NoPorts|node_netstat_Udp6_OutDatagrams|node_netstat_Udp6_RcvbufErrors|node_netstat_Udp6_SndbufErrors|node_netstat_UdpLite_InErrors|node_netstat_Udp_InDatagrams|node_netstat_Udp_InErrors|node_netstat_Udp_NoPorts|node_netstat_Udp_OutDatagrams|node_netstat_Udp_RcvbufErrors|node_netstat_Udp_SndbufErrors|node_network_carrier|node_network_info|node_network_mtu_bytes|node_network_receive_compressed_total|node_network_receive_errs_total|node_network_receive_fifo_total|node_network_receive_multicast_total|node_network_receive_packets_total|node_network_speed_bytes|node_network_transmit_compressed_total|node_network_transmit_errs_total|node_network_transmit_fifo_total|node_network_transmit_multicast_total|node_network_transmit_packets_total|node_network_transmit_queue_length|node_network_up|node_nf_conntrack_entries|node_nf_conntrack_entries_limit|node_os_info|node_sockstat_FRAG6_inuse|node_sockstat_FRAG_inuse|node_sockstat_RAW6_inuse|node_sockstat_RAW_inuse|node_sockstat_TCP6_inuse|node_sockstat_TCP_alloc|node_sockstat_TCP_inuse|node_sockstat_TCP_mem|node_sockstat_TCP_mem_bytes|node_sockstat_TCP_orphan|node_sockstat_TCP_tw|node_sockstat_UDP6_inuse|node_sockstat_UDPLITE6_inuse|node_sockstat_UDPLITE_inuse|node_sockstat_UDP_inuse|node_sockstat_UDP_mem|node_sockstat_UDP_mem_bytes|node_sockstat_sockets_used|node_softnet_dropped_total|node_softnet_processed_total|node_softnet_times_squeezed_total|node_systemd_unit_state|node_textfile_scrape_error|node_time_zone_offset_seconds|node_timex_estimated_error_seconds|node_timex_maxerror_seconds|node_timex_offset_seconds|node_timex_sync_status|node_uname_info|node_vmstat_oom_kill|node_vmstat_pgfault|node_vmstat_pgmajfault|node_vmstat_pgpgin|node_vmstat_pgpgout|node_vmstat_pswpin|node_vmstat_pswpout|process_max_fds|process_open_fds"
                scheme = "http"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = argument.metrics_destinations.value
              }
          
              discovery.kubernetes "windows_exporter_pods" {
                role = "pod"
                namespaces {
                  names = ["NAMESPACE"]
                }
                selectors {
                  role = "pod"
                  label = "app.kubernetes.io/name=windows-exporter,release=RELEASE-NAME"
                }
              }
          
              discovery.relabel "windows_exporter" {
                targets = discovery.kubernetes.windows_exporter_pods.targets
                rule {
                  source_labels = ["__meta_kubernetes_pod_node_name"]
                  action = "replace"
                  target_label = "instance"
                }
              }
            
              prometheus.scrape "windows_exporter" {
                job_name   = "integrations/windows-exporter"
                targets  = discovery.relabel.windows_exporter.output
                scrape_interval = "60s"
                clustering {
                  enabled = true
                }
                forward_to = [prometheus.relabel.windows_exporter.receiver]
              }
            
              prometheus.relabel "windows_exporter" {
                max_cache_size = 100000
                rule {
                  source_labels = ["__name__"]
                  regex = "up|scrape_samples_scraped|windows_.*|node_cpu_seconds_total|node_filesystem_size_bytes|node_filesystem_avail_bytes|container_cpu_usage_seconds_total"
                  action = "keep"
                }
                forward_to = argument.metrics_destinations.value
              }
            }
