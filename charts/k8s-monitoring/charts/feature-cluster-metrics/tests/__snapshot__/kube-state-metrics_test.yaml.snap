can discover kube-state-metrics via pods:
  1: |
    |-
      declare "cluster_metrics" {
        argument "metrics_destinations" {
          comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
        }
        discovery.kubernetes "kube_state_metrics" {
          role = "pod"

          selectors {
            role = "pod"
            label = "app.kubernetes.io/name=kube-state-metrics,release=RELEASE-NAME"
          }
          namespaces {
            names = ["NAMESPACE"]
          }
        }

        discovery.relabel "kube_state_metrics" {
          targets = discovery.kubernetes.kube_state_metrics.targets

          // only keep targets with a matching port name
          rule {
            source_labels = ["__meta_kubernetes_pod_container_port_name"]
            regex = "http"
            action = "keep"
          }

          rule {
            action = "replace"
            replacement = "kubernetes"
            target_label = "source"
          }

        }

        prometheus.scrape "kube_state_metrics" {
          targets = discovery.relabel.kube_state_metrics.output
          job_name = "integrations/kubernetes/kube-state-metrics"
          scrape_interval = "60s"
          scheme = "http"
          bearer_token_file = ""
          tls_config {
            insecure_skip_verify = true
          }

          clustering {
            enabled = true
          }
          forward_to = [prometheus.relabel.kube_state_metrics.receiver]
        }

        prometheus.relabel "kube_state_metrics" {
          max_cache_size = 100000
          rule {
            source_labels = ["__name__"]
            regex = "up|scrape_samples_scraped|kube_configmap_info|kube_configmap_metadata_resource_version|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*"
            action = "keep"
          }
          forward_to = argument.metrics_destinations.value
        }
      }
can discover kube-state-metrics via service:
  1: |
    |-
      declare "cluster_metrics" {
        argument "metrics_destinations" {
          comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
        }
        discovery.kubernetes "kube_state_metrics" {
          role = "service"

          selectors {
            role = "service"
            label = "app.kubernetes.io/name=kube-state-metrics,release=RELEASE-NAME"
          }
          namespaces {
            names = ["NAMESPACE"]
          }
        }

        discovery.relabel "kube_state_metrics" {
          targets = discovery.kubernetes.kube_state_metrics.targets

          // only keep targets with a matching port name
          rule {
            source_labels = ["__meta_kubernetes_service_port_name"]
            regex = "http"
            action = "keep"
          }

          rule {
            action = "replace"
            replacement = "kubernetes"
            target_label = "source"
          }

        }

        prometheus.scrape "kube_state_metrics" {
          targets = discovery.relabel.kube_state_metrics.output
          job_name = "integrations/kubernetes/kube-state-metrics"
          scrape_interval = "60s"
          scheme = "http"
          bearer_token_file = ""
          tls_config {
            insecure_skip_verify = true
          }

          clustering {
            enabled = true
          }
          forward_to = [prometheus.relabel.kube_state_metrics.receiver]
        }

        prometheus.relabel "kube_state_metrics" {
          max_cache_size = 100000
          rule {
            source_labels = ["__name__"]
            regex = "up|scrape_samples_scraped|kube_configmap_info|kube_configmap_metadata_resource_version|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*"
            action = "keep"
          }
          forward_to = argument.metrics_destinations.value
        }
      }
