HAS_HELM_UNITTEST := $(shell helm plugin list | grep unittest 2> /dev/null)

SCHEMA_MODS_JSON_FILES = $(shell find schema-mods -name "*.json")
SCHEMA_MODS_JQ_FILES = $(shell find schema-mods -name "*.jq")

DATABASES_VALUES_FILES = $(shell find databases -name "*-values.yaml" | sort -u)
DATABASES_DOCS_FILES = $(DATABASES_VALUES_FILES:databases/%-values.yaml=./docs/databases/%.md)
DATABASES_SCHEMA_FILES = $(DATABASES_VALUES_FILES:databases/%-values.yaml=./schema-mods/definitions/%-database.schema.json)

templates/secrets/_helpers.tpl: ../../templates/secrets/_helpers.tpl
	cp $< $@

templates/secrets/_secret.alloy.tpl: ../../templates/secrets/_secret.alloy.tpl
	cp $< $@

Chart.lock: Chart.yaml
	helm dependency update .
	touch Chart.lock # Ensure the timestamp is updated

.SECONDEXPANSION:
docs/databases/%.md: databases/%-values.yaml $$(wildcard docs/databases/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/databases\/\([-a-z]*\)-values.yaml/\1/') database

schema-mods/definitions/%-database.schema.json: databases/%-values.yaml
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/databases\/\([-a-z]*\)-values.yaml/\1/') database

NUMBER_OF_DATABASES_VALUES_FILES := $(words $(DATABASES_VALUES_FILES))
schema-mods/database-instances.json: $(DATABASES_VALUES_FILES)
	@echo '{' > $@
	@echo '  "properties": {' >> $@
	@count=0; \
	for file in $(DATABASES_VALUES_FILES); do \
		count=$$((count + 1)); \
		type=$$(echo $${file} | sed 's/databases\/\([-a-z]*\)-values.yaml/\1/'); \
		echo '    "'$$type'": {' >> $@; \
		echo '      "properties": {' >> $@; \
		echo '        "instances": {' >> $@; \
		echo '          "type": "array",' >> $@; \
		echo '          "items": { "anyOf": [{ "$$ref": "#/definitions/'$$type'-database" }]}' >> $@; \
		echo '        }' >> $@; \
		echo '      }' >> $@; \
		echo '    }' >> $@; \
	done
	@echo '  }' >> $@
	@echo '}' >> $@
#
templates/_databases_types.tpl: $(DATABASES_VALUES_FILES)
	echo '{{/* Do not edit this file. It is generated by the Makefile */}}' > $@
	echo '{{- define "databases.types" -}}' >> $@
	for file in $(DATABASES_VALUES_FILES); do \
		echo - $$(echo $${file} | sed 's/databases\/\([-a-z]*\)-values.yaml/\1/') >> $@; \
	done
	echo '{{- end -}}' >> $@

values.schema.json: values.yaml $(DATABASES_SCHEMA_FILES) $(SCHEMA_MODS_JSON_FILES) $(SCHEMA_MODS_JQ_FILES)
	docker run --rm --platform linux/amd64 --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-schema-generator --chart /chart > $@

README.md: values.yaml Chart.yaml $$(wildcard README.md.gotmpl)
	docker run --rm --platform linux/amd64 --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-doc-generator --chart /chart > $@

.PHONY: clean
clean:
	rm -f README.md values.schema.json schema-mods/database-instances.json templates/_databases_types.tpl templates/secrets/_helpers.tpl templates/secrets/_secret.alloy.tpl
	rm -f $(DATABASES_SCHEMA_FILES)
	rm -f $(DATABASES_DOCS_FILES)

.PHONY: build
build: README.md $(DATABASES_DOCS_FILES) Chart.lock values.schema.json templates/_databases_types.tpl templates/secrets/_helpers.tpl templates/secrets/_secret.alloy.tpl

.PHONY: test
test: build
	helm lint .
	ct lint --lint-conf ../../.lintconf.yaml --helm-dependency-extra-args=--skip-refresh --charts .
ifdef HAS_HELM_UNITTEST
	helm unittest .
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest:3.18.4-1.0.0 .
endif

.PHONY: update-test-snapshots
update-test-snapshots:
ifdef HAS_HELM_UNITTEST
	helm unittest . --update-snapshot
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest:3.18.4-1.0.0 . --update-snapshot
endif
