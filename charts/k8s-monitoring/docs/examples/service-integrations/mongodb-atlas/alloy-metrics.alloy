// Destination: prometheus (prometheus)
otelcol.exporter.prometheus "prometheus" {
  add_metric_suffixes = true
  forward_to = [prometheus.remote_write.prometheus.receiver]
}

prometheus.remote_write "prometheus" {
  endpoint {
    url = "http://prometheus.prometheus.svc:9090/api/v1/write"
    headers = {
    }
    tls_config {
      insecure_skip_verify = false
    }
    send_native_histograms = false

    queue_config {
      capacity = 10000
      min_shards = 1
      max_shards = 50
      max_samples_per_send = 2000
      batch_send_deadline = "5s"
      min_backoff = "30ms"
      max_backoff = "5s"
      retry_on_http_429 = true
      sample_age_limit = "0s"
    }

    write_relabel_config {
      source_labels = ["cluster"]
      regex = ""
      replacement = "mongodb-atlas-integration-cluster"
      target_label = "cluster"
    }
    write_relabel_config {
      source_labels = ["k8s_cluster_name"]
      regex = ""
      replacement = "mongodb-atlas-integration-cluster"
      target_label = "k8s_cluster_name"
    }
  }

  wal {
    truncate_frequency = "2h"
    min_keepalive_time = "5m"
    max_keepalive_time = "8h"
  }
}
// Self Reporting
prometheus.exporter.unix "kubernetes_monitoring_telemetry" {
  set_collectors = ["textfile"]
  textfile {
    directory = "/etc/alloy"
  }
}

discovery.relabel "kubernetes_monitoring_telemetry" {
  targets = prometheus.exporter.unix.kubernetes_monitoring_telemetry.targets
  rule {
    target_label = "instance"
    action = "replace"
    replacement = "k8smon"
  }
  rule {
    target_label = "job"
    action = "replace"
    replacement = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  }
}

prometheus.scrape "kubernetes_monitoring_telemetry" {
  job_name   = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  targets    = discovery.relabel.kubernetes_monitoring_telemetry.output
  scrape_interval = "60s"
  clustering {
    enabled = true
  }
  forward_to = [prometheus.relabel.kubernetes_monitoring_telemetry.receiver]
}

prometheus.relabel "kubernetes_monitoring_telemetry" {
  rule {
    source_labels = ["__name__"]
    regex = "grafana_kubernetes_monitoring_.*"
    action = "keep"
  }
  forward_to = [
    prometheus.remote_write.prometheus.receiver,
  ]
}



remote.kubernetes.secret "mongodb_atlas" {
  name = "mongodb-atlas"
  namespace = "monitoring"
}

discovery.http "mongodb_atlas" {
  url = string.format("https://cloud.mongodb.com/prometheus/v1.0/groups/%s/discovery", remote.kubernetes.secret.mongodb_atlas.data["group_id"])

  basic_auth {
    username = nonsensitive(remote.kubernetes.secret.mongodb_atlas.data["username"])
    password = remote.kubernetes.secret.mongodb_atlas.data["password"]
  }
}

prometheus.scrape "mongodb_atlas" {
  targets         = discovery.http.mongodb_atlas.targets
  job_name        = "integrations/mongodb-atlas"
  scrape_interval = "10s"
  scheme          = "https"

  basic_auth {
    username = nonsensitive(remote.kubernetes.secret.mongodb_atlas.data["username"])
    password = remote.kubernetes.secret.mongodb_atlas.data["password"]
  }

  forward_to = [prometheus.remote_write.prometheus.receiver]
}
