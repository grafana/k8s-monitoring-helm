// Destination: otlp-gateway (otlp)
otelcol.receiver.prometheus "otlp_gateway" {
  output {
    metrics = [otelcol.processor.attributes.otlp_gateway.input]
  }
}
otelcol.receiver.loki "otlp_gateway" {
  output {
    logs = [otelcol.processor.attributes.otlp_gateway.input]
  }
}
otelcol.auth.basic "otlp_gateway" {
  username = nonsensitive(remote.kubernetes.secret.otlp_gateway.data["username"])
  password = remote.kubernetes.secret.otlp_gateway.data["password"]
}

otelcol.processor.attributes "otlp_gateway" {
  action {
    key = "cluster"
    action = "upsert"
    value = "otlp-gateway-test"
  }
  action {
    key = "k8s.cluster.name"
    action = "upsert"
    value = "otlp-gateway-test"
  }
  output {
    metrics = [otelcol.processor.transform.otlp_gateway.input]
    logs = [otelcol.processor.transform.otlp_gateway.input]
    traces = [otelcol.processor.transform.otlp_gateway.input]
  }
}

otelcol.processor.transform "otlp_gateway" {
  error_mode = "ignore"

  output {
    metrics = [otelcol.processor.batch.otlp_gateway.input]
    logs = [otelcol.processor.batch.otlp_gateway.input]
    traces = [otelcol.processor.batch.otlp_gateway.input]
  }
}

otelcol.processor.batch "otlp_gateway" {
  timeout = "2s"
  send_batch_size = 8192
  send_batch_max_size = 0

  output {
    metrics = [otelcol.exporter.otlphttp.otlp_gateway.input]
    logs = [otelcol.exporter.otlphttp.otlp_gateway.input]
    traces = [otelcol.exporter.otlphttp.otlp_gateway.input]
  }
}
otelcol.exporter.otlphttp "otlp_gateway" {
  client {
    endpoint = "https://otlp-gateway-my-region.grafana.net/otlp"
    auth = otelcol.auth.basic.otlp_gateway.handler
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }
}

remote.kubernetes.secret "otlp_gateway" {
  name      = "otlp-gateway-k8smon-k8s-monitoring"
  namespace = "default"
}
// Feature: Pod Logs
declare "pod_logs" {
  argument "logs_destinations" {
    comment = "Must be a list of log destinations where collected logs should be forwarded to"
  }

  discovery.relabel "filtered_pods" {
    targets = discovery.kubernetes.pods.targets
    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      action = "replace"
      target_label = "namespace"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      action = "replace"
      target_label = "pod"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      action = "replace"
      target_label = "container"
    }
    rule {
      source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
      separator = "/"
      action = "replace"
      replacement = "$1"
      target_label = "job"
    }

    // set the container runtime as a label
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_container_id"]
      regex = "^(\\S+):\\/\\/.+$"
      replacement = "$1"
      target_label = "tmp_container_runtime"
    }

    // make all labels on the pod available to the pipeline as labels,
    // they are omitted before write to loki via stage.label_keep unless explicitly set
    rule {
      action = "labelmap"
      regex = "__meta_kubernetes_pod_label_(.+)"
    }

    // make all annotations on the pod available to the pipeline as labels,
    // they are omitted before write to loki via stage.label_keep unless explicitly set
    rule {
      action = "labelmap"
      regex = "__meta_kubernetes_pod_annotation_(.+)"
    }

    // explicitly set service_name. if not set, loki will automatically try to populate a default.
    // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users
    //
    // choose the first value found from the following ordered list:
    // - pod.annotation[resource.opentelemetry.io/service.name]
    // - pod.label[app.kubernetes.io/name]
    // - k8s.pod.name
    // - k8s.container.name
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name",
        "__meta_kubernetes_pod_label_app_kubernetes_io_name",
        "__meta_kubernetes_pod_name",
        "__meta_kubernetes_pod_container_name",
      ]
      separator = ";"
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "service_name"
    }

    // set service_namespace
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_namespace"]
      target_label = "service_namespace"
    }

    // set deployment_environment and deployment_environment_name
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_annotation_resource_opentelemetry_io_deployment_environment_name"]
      target_label = "deployment_environment_name"
    }
    rule {
      action = "replace"
      source_labels = ["__meta_kubernetes_pod_annotation_resource_opentelemetry_io_deployment_environment"]
      target_label = "deployment_environment"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job"]
      target_label = "job"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
      target_label = "app_kubernetes_io_name"
    }
  }

  discovery.kubernetes "pods" {
    role = "pod"
    selectors {
      role = "pod"
      field = "spec.nodeName=" + sys.env("HOSTNAME")
    }
  }

  discovery.relabel "filtered_pods_with_paths" {
    targets = discovery.relabel.filtered_pods.output

    rule {
      source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
      separator = "/"
      action = "replace"
      replacement = "/var/log/pods/*$1/*.log"
      target_label = "__path__"
    }
  }

  local.file_match "pod_logs" {
    path_targets = discovery.relabel.filtered_pods_with_paths.output
  }

  loki.source.file "pod_logs" {
    targets    = local.file_match.pod_logs.targets
    forward_to = [loki.process.pod_logs.receiver]
  }

  loki.process "pod_logs" {
    stage.match {
      selector = "{tmp_container_runtime=~\"containerd|cri-o\"}"
      // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
      stage.cri {}

      // Set the extract flags and stream values as labels
      stage.labels {
        values = {
          flags  = "",
          stream  = "",
        }
      }
    }

    stage.match {
      selector = "{tmp_container_runtime=\"docker\"}"
      // the docker processing stage extracts the following k/v pairs: log, stream, time
      stage.docker {}

      // Set the extract stream value as a label
      stage.labels {
        values = {
          stream  = "",
        }
      }
    }

    // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,
    // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary
    // container runtime label as it is no longer needed.
    stage.label_drop {
      values = [
        "filename",
        "tmp_container_runtime",
      ]
    }

    // Only keep the labels that are defined in the `keepLabels` list.
    stage.label_keep {
      values = ["app_kubernetes_io_name","container","instance","job","level","namespace","pod","service_name","service_namespace","deployment_environment","deployment_environment_name","integration"]
    }

    forward_to = argument.logs_destinations.value
  }
}
pod_logs "feature" {
  logs_destinations = [
    otelcol.receiver.loki.otlp_gateway.receiver,
  ]
}
