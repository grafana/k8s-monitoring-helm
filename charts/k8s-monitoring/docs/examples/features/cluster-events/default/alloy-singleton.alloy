// Destination: loki (loki)
otelcol.exporter.loki "loki" {
  forward_to = [loki.write.loki.receiver]
}

loki.write "loki" {
  endpoint {
    url = "http://loki.loki.svc:3100/api/push"
    tls_config {
      insecure_skip_verify = false
    }
  }
  external_labels = {
    cluster = "cluster-events-cluster",
    "k8s_cluster_name" = "cluster-events-cluster",
  }
}
// Feature: Cluster Events
declare "cluster_events" {
  argument "logs_destinations" {
    comment = "Must be a list of log destinations where collected logs should be forwarded to"
  }

  loki.source.kubernetes_events "cluster_events" {
    job_name   = "integrations/kubernetes/eventhandler"
    log_format = "logfmt"
    forward_to = [loki.process.cluster_events.receiver]
  }

  loki.process "cluster_events" {

    // add a static source label to the logs so they can be differentiated / restricted if necessary
    stage.static_labels {
      values = {
        "source" = "kubernetes-events",
      }
    }

    // extract some of the fields from the log line, these could be used as labels, structured metadata, etc.
    stage.logfmt {
      mapping = {
        "component" = "sourcecomponent", // map the sourcecomponent field to component
        "kind" = "",
        "level" = "type", // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
        "name" = "",
        "node" = "sourcehost", // map the sourcehost field to node
      }
    }
    // set these values as labels, they may or may not be used as index labels in Loki as they can be dropped
    // prior to being written to Loki, but this makes them available
    stage.labels {
      values = {
        "component" = "",
        "kind" = "",
        "level" = "",
        "name" = "",
        "node" = "",
      }
    }

    // if kind=Node, set the node label by copying the instance label
    stage.match {
      selector = "{kind=\"Node\"}"

      stage.labels {
        values = {
          "node" = "name",
        }
      }
    }

    // set the level extracted key value as a normalized log level
    stage.match {
      selector = "{level=\"Normal\"}"

      stage.static_labels {
        values = {
          level = "Info",
        }
      }
    }

    // Only keep the labels that are defined in the `keepLabels` list.
    stage.label_keep {
      values = ["job","level","namespace","node","source"]
    }
    forward_to = argument.logs_destinations.value
  }
}
cluster_events "feature" {
  logs_destinations = [
    loki.write.loki.receiver,
  ]
}
