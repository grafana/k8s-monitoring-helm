// Destination: otlp-gateway (otlp)
otelcol.receiver.prometheus "otlp_gateway" {
  output {
    metrics = [otelcol.processor.transform.otlp_gateway.input]
  }
}
otelcol.receiver.loki "otlp_gateway" {
  output {
    logs = [otelcol.processor.transform.otlp_gateway.input]
  }
}

otelcol.processor.transform "otlp_gateway" {
  error_mode = "ignore"
  metric_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"applications-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }
  log_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"applications-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }
  trace_statements {
    context = "resource"
    statements = ["set(attributes[\"k8s.cluster.name\"], \"applications-cluster\") where attributes[\"k8s.cluster.name\"] == nil"]
  }

  output {
    metrics = [otelcol.exporter.otlp.otlp_gateway.input]
    logs = [otelcol.exporter.otlp.otlp_gateway.input]
    traces = [otelcol.exporter.otlp.otlp_gateway.input]
  }
}
otelcol.exporter.otlp "otlp_gateway" {
  client {
    endpoint = "http://otlp-gateway.example.com"
    headers = {
    }
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }
}


// Feature: Application Observability
declare "application_observability" {
  argument "metrics_destinations" {
    comment = "Must be a list of metrics destinations where collected metrics should be forwarded to"
  }

  argument "logs_destinations" {
    comment = "Must be a list of log destinations where collected logs should be forwarded to"
  }

  argument "traces_destinations" {
    comment = "Must be a list of trace destinations where collected trace should be forwarded to"
  }

  // Receivers --> Resource Detection Processor  
  otelcol.receiver.otlp "receiver" {
    grpc {
      endpoint = "0.0.0.0:4317"
    }
    debug_metrics {
      disable_high_cardinality_metrics = true
    }
    output {
      metrics = [otelcol.processor.resourcedetection.default.input]
      logs = [otelcol.processor.resourcedetection.default.input]
      traces = [otelcol.processor.resourcedetection.default.input]
    }
  }  

  // Resource Detection Processor --> K8s Attribute Processor  
  otelcol.processor.resourcedetection "default" {
    detectors = ["env", "system"]
    system {
      hostname_sources = ["os"]
    }
  
    output {
      metrics = [otelcol.processor.k8sattributes.default.input]
      logs = [otelcol.processor.k8sattributes.default.input]
      traces = [otelcol.processor.k8sattributes.default.input]
    }
  }

  // K8s Attribute Processor --> Transform Processor
  // Resource Detection Processor Traces --> Host Info Connector  
  otelcol.processor.k8sattributes "default" {
    extract {
      metadata = ["k8s.namespace.name","k8s.pod.name","k8s.deployment.name","k8s.statefulset.name","k8s.daemonset.name","k8s.cronjob.name","k8s.job.name","k8s.node.name","k8s.pod.uid","k8s.pod.start_time"]
    }
    pod_association {
      source {
        from = "connection"
      }
    }
  
    output {
      metrics = [otelcol.processor.transform.default.input]
      logs = [otelcol.processor.transform.default.input]
      traces = [otelcol.processor.transform.default.input, otelcol.connector.host_info.default.input]
    }
  }
  // Host Info Connector --> Batch Processor  
  otelcol.connector.host_info "default" {
    host_identifiers = [ "k8s.node.name" ]
  
    output {
      metrics = [otelcol.processor.batch.default.input]
    }
  }


  // Transform Processor --> Batch Processor  
  otelcol.processor.transform "default" {
    error_mode = "ignore"
    log_statements {
      context = "resource"
      statements = [
        "set(attributes[\"pod\"], attributes[\"k8s.pod.name\"])",
        "set(attributes[\"namespace\"], attributes[\"k8s.namespace.name\"])",
        "set(attributes[\"loki.resource.labels\"], \"cluster, namespace, job, pod\")",
      ]
    }
  
    output {
      metrics = [otelcol.processor.batch.default.input]
      logs = [otelcol.processor.batch.default.input]
      traces = [otelcol.processor.batch.default.input]
    }
  }

  // Batch Processor --> Destinations  
  otelcol.processor.batch "default" {
    output {
      metrics = argument.metrics_destinations.value
      logs = argument.logs_destinations.value
      traces = argument.traces_destinations.value
    }
  }
}
application_observability "feature" {
  metrics_destinations = [
    otelcol.processor.transform.otlp_gateway.input,
  ]
  logs_destinations = [
    otelcol.processor.transform.otlp_gateway.input,
  ]
  traces_destinations = [
    otelcol.processor.transform.otlp_gateway.input,
  ]
}
