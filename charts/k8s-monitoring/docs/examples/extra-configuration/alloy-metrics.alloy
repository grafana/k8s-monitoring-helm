discovery.kubernetes "animal_service" {
  role = "service"
  namespaces {
    names = ["zoo"]
  }
  selectors {
    role = "service"
    label = "app.kubernetes.io/name=animal-service"
  }
}
prometheus.scrape "animal_service" {
  job_name   = "animal_service"
  targets    = discovery.kubernetes.animal_service.targets
  forward_to = [prometheus.remote_write.prometheus_kubernetes.receiver]
}
// Destination: prometheus-kubernetes (prometheus)
otelcol.exporter.prometheus "prometheus_kubernetes" {
  add_metric_suffixes = true
  resource_to_telemetry_conversion = false
  forward_to = [prometheus.remote_write.prometheus_kubernetes.receiver]
}

prometheus.remote_write "prometheus_kubernetes" {
  endpoint {
    url = "http://prometheus.prometheus.svc:9090/api/v1/write"
    headers = {
    }
    tls_config {
      insecure_skip_verify = false
    }
    send_native_histograms = false

    queue_config {
      capacity = 10000
      min_shards = 1
      max_shards = 50
      max_samples_per_send = 2000
      batch_send_deadline = "5s"
      min_backoff = "30ms"
      max_backoff = "5s"
      retry_on_http_429 = true
      sample_age_limit = "0s"
    }

    write_relabel_config {
      source_labels = ["cluster"]
      regex = ""
      replacement = "extra-configuration-cluster"
      target_label = "cluster"
    }
    write_relabel_config {
      source_labels = ["k8s_cluster_name"]
      regex = ""
      replacement = "extra-configuration-cluster"
      target_label = "k8s_cluster_name"
    }
  }

  wal {
    truncate_frequency = "2h"
    min_keepalive_time = "5m"
    max_keepalive_time = "8h"
  }
}
