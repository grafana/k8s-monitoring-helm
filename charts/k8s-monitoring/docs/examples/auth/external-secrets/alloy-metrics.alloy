// Feature: Prometheus Operator Objects
declare "prometheus_operator_objects" {
  argument "metrics_destinations" {
    comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
  }

  // Prometheus Operator PodMonitor objects
  prometheus.operator.podmonitors "pod_monitors" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
      default_scrape_timeout = "10s"
    }
    forward_to = argument.metrics_destinations.value
  }

  // Prometheus Operator Probe objects
  prometheus.operator.probes "probes" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
      default_scrape_timeout = "10s"
    }
    forward_to = argument.metrics_destinations.value
  }

  // Prometheus Operator ServiceMonitor objects
  prometheus.operator.servicemonitors "service_monitors" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
      default_scrape_timeout = "10s"
    }
    forward_to = argument.metrics_destinations.value
  }
}
prometheus_operator_objects "feature" {
  metrics_destinations = [
    prometheus.remote_write.metrics_service.receiver,
  ]
}
// Self Reporting
prometheus.exporter.unix "kubernetes_monitoring_telemetry" {
  set_collectors = ["textfile"]
  textfile {
    directory = "/etc/alloy"
  }
}

discovery.relabel "kubernetes_monitoring_telemetry" {
  targets = prometheus.exporter.unix.kubernetes_monitoring_telemetry.targets
  rule {
    target_label = "instance"
    action = "replace"
    replacement = "k8smon"
  }
  rule {
    target_label = "job"
    action = "replace"
    replacement = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  }
}

prometheus.scrape "kubernetes_monitoring_telemetry" {
  job_name   = "integrations/kubernetes/kubernetes_monitoring_telemetry"
  targets    = discovery.relabel.kubernetes_monitoring_telemetry.output
  scrape_interval = "60s"
  clustering {
    enabled = true
  }
  forward_to = [prometheus.relabel.kubernetes_monitoring_telemetry.receiver]
}

prometheus.relabel "kubernetes_monitoring_telemetry" {
  rule {
    source_labels = ["__name__"]
    regex = "grafana_kubernetes_monitoring_.*"
    action = "keep"
  }
  forward_to = [
    prometheus.remote_write.metrics_service.receiver,
  ]
}


remote.kubernetes.secret "alloy_metrics_remote_cfg" {
  name      = "my-monitoring-secret"
  namespace = "default"
}

remotecfg {
  id = sys.env("GCLOUD_FM_COLLECTOR_ID")
  url = convert.nonsensitive(remote.kubernetes.secret.alloy_metrics_remote_cfg.data["fleet-management-host"])
  basic_auth {
    username = convert.nonsensitive(remote.kubernetes.secret.alloy_metrics_remote_cfg.data["fleet-management-user"])
    password = remote.kubernetes.secret.alloy_metrics_remote_cfg.data["access-token"]
  }
  tls_config {
    insecure_skip_verify = false
    ca_pem = convert.nonsensitive(remote.kubernetes.secret.alloy_metrics_remote_cfg.data["ca"])
    cert_pem = convert.nonsensitive(remote.kubernetes.secret.alloy_metrics_remote_cfg.data["cert"])
    key_pem = remote.kubernetes.secret.alloy_metrics_remote_cfg.data["key"]
  }
  poll_frequency = "5m"
  attributes = {
    "cluster" = "external-secrets-example-cluster",
    "namespace" = "default",
    "platform" = "kubernetes",
    "release" = "k8smon",
    "source" = "k8s-monitoring",
    "sourceVersion" = "3.5.4",
    "workloadName" = "alloy-metrics",
    "workloadType" = "statefulset",
  }
}

// Destination: metrics-service (prometheus)
otelcol.exporter.prometheus "metrics_service" {
  add_metric_suffixes = true
  resource_to_telemetry_conversion = false
  forward_to = [prometheus.remote_write.metrics_service.receiver]
}

prometheus.remote_write "metrics_service" {
  endpoint {
    url = convert.nonsensitive(remote.kubernetes.secret.metrics_service.data["prom-host"]) + "/api/v1/write"
    headers = {
      "X-Scope-OrgID" = convert.nonsensitive(remote.kubernetes.secret.metrics_service.data["tenantId"]),
    }
    basic_auth {
      username = convert.nonsensitive(remote.kubernetes.secret.metrics_service.data["prom-username"])
      password = remote.kubernetes.secret.metrics_service.data["access-token"]
    }
    tls_config {
      insecure_skip_verify = false
      ca_pem = convert.nonsensitive(remote.kubernetes.secret.metrics_service.data["ca"])
      cert_pem = convert.nonsensitive(remote.kubernetes.secret.metrics_service.data["cert"])
      key_pem = remote.kubernetes.secret.metrics_service.data["key"]
    }
    send_native_histograms = false

    queue_config {
      capacity = 10000
      min_shards = 1
      max_shards = 50
      max_samples_per_send = 2000
      batch_send_deadline = "5s"
      min_backoff = "30ms"
      max_backoff = "5s"
      retry_on_http_429 = true
      sample_age_limit = "0s"
    }

    write_relabel_config {
      source_labels = ["cluster"]
      regex = ""
      replacement = "external-secrets-example-cluster"
      target_label = "cluster"
    }
    write_relabel_config {
      source_labels = ["k8s_cluster_name"]
      regex = ""
      replacement = "external-secrets-example-cluster"
      target_label = "k8s_cluster_name"
    }
  }

  wal {
    truncate_frequency = "2h"
    min_keepalive_time = "5m"
    max_keepalive_time = "8h"
  }
}

remote.kubernetes.secret "metrics_service" {
  name      = "my-monitoring-secret"
  namespace = "monitoring"
}

