// Destination: otel-endpoint (otlp)
otelcol.receiver.prometheus "otel_endpoint" {
  output {
    metrics = [otelcol.processor.attributes.otel_endpoint.input]
  }
}
otelcol.receiver.loki "otel_endpoint" {
  output {
    logs = [otelcol.processor.attributes.otel_endpoint.input]
  }
}
otelcol.auth.oauth2 "otel_endpoint" {
  client_id = nonsensitive(remote.kubernetes.secret.otel_endpoint.data["clientId"])
  client_secret_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  endpoint_params = {
    client_assertion_type = ["urn:ietf:params:oauth:client-assertion-type:jwt-bearer"],
    grant_type = ["client_credentials"],
  }
  token_url = "https://my.idp/application/o/token/"
}

otelcol.processor.attributes "otel_endpoint" {
  output {
    metrics = [otelcol.processor.transform.otel_endpoint.input]
    logs = [otelcol.processor.transform.otel_endpoint.input]
    traces = [otelcol.processor.transform.otel_endpoint.input]
  }
}

otelcol.processor.transform "otel_endpoint" {
  error_mode = "ignore"
  metric_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "oauth2-auth-example")`,
      `set(attributes["k8s.cluster.name"], "oauth2-auth-example")`,
    ]
  }

  metric_statements {
    context = "datapoint"
    statements = [
      `set(attributes["cluster"], "oauth2-auth-example")`,
      `set(attributes["k8s.cluster.name"], "oauth2-auth-example")`,
    ]
  }
  log_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "oauth2-auth-example")`,
      `set(attributes["k8s.cluster.name"], "oauth2-auth-example")`,
    ]
  }

  log_statements {
    context = "log"
    statements = [
      `delete_key(attributes, "loki.attribute.labels")`,
      `set(resource.attributes["service.name"], attributes["service_name"]) where resource.attributes["service.name"] == nil and attributes["service_name"] != nil`,
      `delete_key(attributes, "service_name") where attributes["service_name"] != nil`,
      `set(resource.attributes["service.namespace"], attributes["service_namespace"] ) where resource.attributes["service.namespace"] == nil and attributes["service_namespace"] != nil`,
      `delete_key(attributes, "service_namespace") where attributes["service_namespace"] != nil`,
      `set(resource.attributes["deployment.environment.name"], attributes["deployment_environment_name"] ) where resource.attributes["deployment.environment.name"] == nil and attributes["deployment_environment_name"] != nil`,
      `delete_key(attributes, "deployment_environment_name") where attributes["deployment_environment_name"] != nil`,
      `set(resource.attributes["deployment.environment"], attributes["deployment_environment"] ) where resource.attributes["deployment.environment"] == nil and attributes["deployment_environment"] != nil`,
      `delete_key(attributes, "deployment_environment") where attributes["deployment_environment"] != nil`,
    ]
  }

  trace_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "oauth2-auth-example")`,
      `set(attributes["k8s.cluster.name"], "oauth2-auth-example")`,
    ]
  }

  output {
    metrics = [otelcol.processor.batch.otel_endpoint.input]
    logs = [otelcol.processor.batch.otel_endpoint.input]
    traces = [otelcol.processor.batch.otel_endpoint.input]
  }
}

otelcol.processor.batch "otel_endpoint" {
  timeout = "2s"
  send_batch_size = 8192
  send_batch_max_size = 0

  output {
    metrics = [otelcol.exporter.otlp.otel_endpoint.input]
    logs = [otelcol.exporter.otlp.otel_endpoint.input]
    traces = [otelcol.exporter.otlp.otel_endpoint.input]
  }
}
otelcol.exporter.otlp "otel_endpoint" {
  client {
    endpoint = "grpc.my.otel.endpoint:443"
    auth = otelcol.auth.oauth2.otel_endpoint.handler
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }
}

remote.kubernetes.secret "otel_endpoint" {
  name      = "otel-endpoint-k8smon-k8s-monitoring"
  namespace = "default"
}
// Feature: Annotation Autodiscovery
declare "annotation_autodiscovery" {
  argument "metrics_destinations" {
    comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
  }

  discovery.kubernetes "pods" {
    role = "pod"
  }

  discovery.relabel "annotation_autodiscovery_pods" {
    targets = discovery.kubernetes.pods.targets
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_scrape"]
      regex = "true"
      action = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_job"]
      action = "replace"
      target_label = "job"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_instance"]
      action = "replace"
      target_label = "instance"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_path"]
      action = "replace"
      target_label = "__metrics_path__"
    }

    // Choose the pod port
    // The discovery generates a target for each declared container port of the pod.
    // If the metricsPortName annotation has value, keep only the target where the port name matches the one of the annotation.
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portName"]
      regex = "(.+)"
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      action = "keepequal"
      target_label = "__tmp_port"
    }
    rule {
      action = "labeldrop"
      regex = "__tmp_port"
    }

    // If the metrics port number annotation has a value, override the target address to use it, regardless whether it is
    // one of the declared ports on that Pod.
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portNumber", "__meta_kubernetes_pod_ip"]
      regex = "(\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})"
      replacement = "[$2]:$1" // IPv6
      target_label = "__address__"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portNumber", "__meta_kubernetes_pod_ip"]
      regex = "(\\d+);((([0-9]+?)(\\.|$)){4})" // IPv4, takes priority over IPv6 when both exists
      replacement = "$2:$1"
      target_label = "__address__"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_scheme"]
      regex = "(.+)"
      target_label = "__scheme__"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_scrapeInterval"]
      regex = "(.+)"
      target_label = "__scrape_interval__"
    }
    rule {
      source_labels = ["__scrape_interval__"]
      regex = ""
      replacement = "60s"
      target_label = "__scrape_interval__"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_scrapeTimeout"]
      regex = "(.+)"
      target_label = "__scrape_timeout__"
    }
    rule {
      source_labels = ["__scrape_timeout__"]
      regex = ""
      replacement = "10s"
      target_label = "__scrape_timeout__"
    }
  }

  discovery.kubernetes "services" {
    role = "service"
  }

  discovery.relabel "annotation_autodiscovery_services" {
    targets = discovery.kubernetes.services.targets
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_scrape"]
      regex = "true"
      action = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_job"]
      action = "replace"
      target_label = "job"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_instance"]
      action = "replace"
      target_label = "instance"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_path"]
      action = "replace"
      target_label = "__metrics_path__"
    }

    // Choose the service port
    rule {
      source_labels = ["__meta_kubernetes_service_port_name"]
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_portName"]
      regex = "(.+)"
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_port_name"]
      action = "keepequal"
      target_label = "__tmp_port"
    }

    rule {
      source_labels = ["__meta_kubernetes_service_port_number"]
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_portNumber"]
      regex = "(.+)"
      target_label = "__tmp_port"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_port_number"]
      action = "keepequal"
      target_label = "__tmp_port"
    }
    rule {
      action = "labeldrop"
      regex = "__tmp_port"
    }

    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_scheme"]
      regex = "(.+)"
      target_label = "__scheme__"
    }

    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_scrapeInterval"]
      regex = "(.+)"
      target_label = "__scrape_interval__"
    }
    rule {
      source_labels = ["__scrape_interval__"]
      regex = ""
      replacement = "60s"
      target_label = "__scrape_interval__"
    }
    rule {
      source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_scrapeTimeout"]
      regex = "(.+)"
      target_label = "__scrape_timeout__"
    }
    rule {
      source_labels = ["__scrape_timeout__"]
      regex = ""
      replacement = "10s"
      target_label = "__scrape_timeout__"
    }
  }

  discovery.relabel "annotation_autodiscovery_http" {
    targets = concat(discovery.relabel.annotation_autodiscovery_pods.output, discovery.relabel.annotation_autodiscovery_services.output)
    rule {
      source_labels = ["__scheme__"]
      regex = "https"
      action = "drop"
    }
  }

  discovery.relabel "annotation_autodiscovery_https" {
    targets = concat(discovery.relabel.annotation_autodiscovery_pods.output, discovery.relabel.annotation_autodiscovery_services.output)
    rule {
      source_labels = ["__scheme__"]
      regex = "https"
      action = "keep"
    }
  }

  prometheus.scrape "annotation_autodiscovery_http" {
    targets = discovery.relabel.annotation_autodiscovery_http.output
    honor_labels = true
    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    clustering {
      enabled = true
    }

    forward_to = argument.metrics_destinations.value
  }

  prometheus.scrape "annotation_autodiscovery_https" {
    targets = discovery.relabel.annotation_autodiscovery_https.output
    honor_labels = true
    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    tls_config {
      insecure_skip_verify = true
    }
    clustering {
      enabled = true
    }

    forward_to = argument.metrics_destinations.value
  }
}
annotation_autodiscovery "feature" {
  metrics_destinations = [
    otelcol.receiver.prometheus.otel_endpoint.receiver,
  ]
}
// Feature: Cluster Metrics
declare "cluster_metrics" {
  argument "metrics_destinations" {
    comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
  }
  discovery.kubernetes "nodes" {
    role = "node"
  }

  // Kubelet
  discovery.relabel "kubelet" {
    targets = discovery.kubernetes.nodes.targets
  }

  prometheus.scrape "kubelet" {
    targets  = discovery.relabel.kubelet.output
    job_name = "integrations/kubernetes/kubelet"
    scheme   = "https"
    scrape_interval = "60s"
    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

    tls_config {
      ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      insecure_skip_verify = true
      server_name = "kubernetes"
    }

    clustering {
      enabled = true
    }

    forward_to = [prometheus.relabel.kubelet.receiver]
  }

  prometheus.relabel "kubelet" {
    max_cache_size = 100000
    rule {
      source_labels = ["__name__"]
      regex = "up|scrape_samples_scraped|go_goroutines|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|kubernetes_build_info|namespace_workload_pod|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes"
      action = "keep"
    }

    forward_to = argument.metrics_destinations.value
  }

  // Kubelet Resources
  discovery.relabel "kubelet_resources" {
    targets = discovery.kubernetes.nodes.targets
    rule {
      replacement   = "/metrics/resource"
      target_label  = "__metrics_path__"
    }
    // set the node label
    rule {
      source_labels = ["__meta_kubernetes_node_name"]
      target_label  = "node"
    }

    // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_node_label_app_kubernetes_io_name",
        "__meta_kubernetes_node_label_k8s_app",
        "__meta_kubernetes_node_label_app",
      ]
      separator = ";"
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "app"
    }

    // set a source label
    rule {
      action = "replace"
      replacement = "kubernetes"
      target_label = "source"
    }
  }

  prometheus.scrape "kubelet_resources" {
    targets  = discovery.relabel.kubelet_resources.output
    job_name = "integrations/kubernetes/resources"
    scheme   = "https"
    scrape_interval = "60s"
    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

    tls_config {
      ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      insecure_skip_verify = true
      server_name = "kubernetes"
    }

    clustering {
      enabled = true
    }

    forward_to = [prometheus.relabel.kubelet_resources.receiver]
  }

  prometheus.relabel "kubelet_resources" {
    max_cache_size = 100000
    rule {
      source_labels = ["__name__"]
      regex = "up|scrape_samples_scraped|node_cpu_usage_seconds_total|node_memory_working_set_bytes"
      action = "keep"
    }

    forward_to = argument.metrics_destinations.value
  }

  // cAdvisor
  discovery.relabel "cadvisor" {
    targets = discovery.kubernetes.nodes.targets
    rule {
      replacement   = "/metrics/cadvisor"
      target_label  = "__metrics_path__"
    }
    rule {
      source_labels = ["__meta_kubernetes_node_name"]
      target_label  = "node"
    }
    // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
    rule {
      action = "replace"
      source_labels = [
        "__meta_kubernetes_node_label_app_kubernetes_io_name",
        "__meta_kubernetes_node_label_k8s_app",
        "__meta_kubernetes_node_label_app",
      ]
      separator = ";"
      regex = "^(?:;*)?([^;]+).*$"
      replacement = "$1"
      target_label = "app"
    }

    // set a source label
    rule {
      action = "replace"
      replacement = "kubernetes"
      target_label = "source"
    }
  }

  prometheus.scrape "cadvisor" {
    targets = discovery.relabel.cadvisor.output
    job_name = "integrations/kubernetes/cadvisor"
    scheme = "https"
    scrape_interval = "60s"
    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

    tls_config {
      ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      insecure_skip_verify = true
      server_name = "kubernetes"
    }

    clustering {
      enabled = true
    }

    forward_to = [prometheus.relabel.cadvisor.receiver]
  }

  prometheus.relabel "cadvisor" {
    max_cache_size = 100000
    rule {
      source_labels = ["__name__"]
      regex = "up|scrape_samples_scraped|container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_cache|container_memory_rss|container_memory_swap|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_dropped_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|container_network_transmit_packets_total|machine_memory_bytes"
      action = "keep"
    }
    // Drop empty container labels, addressing https://github.com/google/cadvisor/issues/2688
    rule {
      source_labels = ["__name__","container"]
      separator = "@"
      regex = "(container_cpu_.*|container_fs_.*|container_memory_.*)@"
      action = "drop"
    }
    // Drop empty image labels, addressing https://github.com/google/cadvisor/issues/2688
    rule {
      source_labels = ["__name__","image"]
      separator = "@"
      regex = "(container_cpu_.*|container_fs_.*|container_memory_.*|container_network_.*)@"
      action = "drop"
    }
    // Normalizing unimportant labels (not deleting to continue satisfying <label>!="" checks)
    rule {
      source_labels = ["__name__", "boot_id"]
      separator = "@"
      regex = "machine_memory_bytes@.*"
      target_label = "boot_id"
      replacement = "NA"
    }
    rule {
      source_labels = ["__name__", "system_uuid"]
      separator = "@"
      regex = "machine_memory_bytes@.*"
      target_label = "system_uuid"
      replacement = "NA"
    }
    // Filter out non-physical devices/interfaces
    rule {
      source_labels = ["__name__", "device"]
      separator = "@"
      regex = "container_fs_.*@(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dasd.+)"
      target_label = "__keepme"
      replacement = "1"
    }
    rule {
      source_labels = ["__name__", "__keepme"]
      separator = "@"
      regex = "container_fs_.*@"
      action = "drop"
    }
    rule {
      source_labels = ["__name__"]
      regex = "container_fs_.*"
      target_label = "__keepme"
      replacement = ""
    }
    rule {
      source_labels = ["__name__", "interface"]
      separator = "@"
      regex = "container_network_.*@(en[ospx][0-9].*|wlan[0-9].*|eth[0-9].*)"
      target_label = "__keepme"
      replacement = "1"
    }
    rule {
      source_labels = ["__name__", "__keepme"]
      separator = "@"
      regex = "container_network_.*@"
      action = "drop"
    }
    rule {
      source_labels = ["__name__"]
      regex = "container_network_.*"
      target_label = "__keepme"
      replacement = ""
    }
    forward_to = argument.metrics_destinations.value
  }
  discovery.kubernetes "kube_state_metrics" {
    role = "endpoints"

    selectors {
      role = "endpoints"
      label = "app.kubernetes.io/name=kube-state-metrics,release=k8smon"
    }
  }

  discovery.relabel "kube_state_metrics" {
    targets = discovery.kubernetes.kube_state_metrics.targets

    // only keep targets with a matching port name
    rule {
      source_labels = ["__meta_kubernetes_endpoint_port_name"]
      regex = "http"
      action = "keep"
    }

    rule {
      action = "replace"
      replacement = "kubernetes"
      target_label = "source"
    }

  }

  prometheus.scrape "kube_state_metrics" {
    targets = discovery.relabel.kube_state_metrics.output
    job_name = "integrations/kubernetes/kube-state-metrics"
    scrape_interval = "60s"
    scheme = "http"
    bearer_token_file = ""
    tls_config {
      insecure_skip_verify = true
    }

    clustering {
      enabled = true
    }
    forward_to = [prometheus.relabel.kube_state_metrics.receiver]
  }

  prometheus.relabel "kube_state_metrics" {
    max_cache_size = 100000
    rule {
      source_labels = ["__name__"]
      regex = "up|scrape_samples_scraped|kube_configmap_info|kube_configmap_metadata_resource_version|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*"
      action = "keep"
    }
    forward_to = argument.metrics_destinations.value
  }

  remote.kubernetes.configmap "node_exporter" {
    name = "k8smon-alloy-module-system"
    namespace = "default"
  }

  import.string "node_exporter" {
    content = remote.kubernetes.configmap.node_exporter.data["node-exporter_metrics.alloy"]
  }

  node_exporter.kubernetes "targets" {
    namespaces = ["default"]
    port_name = "metrics"
    label_selectors = [
      "app.kubernetes.io/name=node-exporter",
      "release=k8smon",
    ]
  }

  discovery.relabel "node_exporter" {
    targets = node_exporter.kubernetes.targets.output
    rule {
      source_labels = ["__meta_kubernetes_pod_node_name"]
      action = "replace"
      target_label = "instance"
    }
  }

  node_exporter.scrape "metrics" {
    targets = discovery.relabel.node_exporter.output
    job_label = "integrations/node_exporter"
    clustering = true
    keep_metrics = "up|scrape_samples_scraped|node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|node_network_receive_bytes_total|node_network_receive_drop_total|node_network_transmit_bytes_total|node_network_transmit_drop_total|process_cpu_seconds_total|process_resident_memory_bytes"
    scheme = "http"
    scrape_interval = "60s"
    max_cache_size = 100000
    forward_to = argument.metrics_destinations.value
  }

  discovery.kubernetes "windows_exporter_pods" {
    role = "pod"
    namespaces {
      names = ["default"]
    }
    selectors {
      role = "pod"
      label = "app.kubernetes.io/name=windows-exporter,release=k8smon"
    }
  }

  discovery.relabel "windows_exporter" {
    targets = discovery.kubernetes.windows_exporter_pods.targets
    rule {
      source_labels = ["__meta_kubernetes_pod_node_name"]
      action = "replace"
      target_label = "instance"
    }
  }

  prometheus.scrape "windows_exporter" {
    job_name   = "integrations/windows-exporter"
    targets  = discovery.relabel.windows_exporter.output
    scrape_interval = "60s"
    clustering {
      enabled = true
    }
    forward_to = [prometheus.relabel.windows_exporter.receiver]
  }

  prometheus.relabel "windows_exporter" {
    max_cache_size = 100000
    rule {
      source_labels = ["__name__"]
      regex = "up|scrape_samples_scraped|windows_.*|node_cpu_seconds_total|node_filesystem_size_bytes|node_filesystem_avail_bytes|container_cpu_usage_seconds_total"
      action = "keep"
    }
    forward_to = argument.metrics_destinations.value
  }
}
cluster_metrics "feature" {
  metrics_destinations = [
    otelcol.receiver.prometheus.otel_endpoint.receiver,
  ]
}
// Feature: Prometheus Operator Objects
declare "prometheus_operator_objects" {
  argument "metrics_destinations" {
    comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
  }

  // Prometheus Operator PodMonitor objects
  prometheus.operator.podmonitors "pod_monitors" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
    }
    forward_to = argument.metrics_destinations.value
  }

  // Prometheus Operator Probe objects
  prometheus.operator.probes "pod_monitors" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
    }
    forward_to = argument.metrics_destinations.value
  }

  // Prometheus Operator ServiceMonitor objects
  prometheus.operator.servicemonitors "service_monitors" {
    clustering {
      enabled = true
    }
    scrape {
      default_scrape_interval = "60s"
    }
    forward_to = argument.metrics_destinations.value
  }
}
prometheus_operator_objects "feature" {
  metrics_destinations = [
    otelcol.receiver.prometheus.otel_endpoint.receiver,
  ]
}
