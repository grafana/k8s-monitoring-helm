// Feature: Application Observability
declare "application_observability" {
  argument "metrics_destinations" {
    comment = "Must be a list of metrics destinations where collected metrics should be forwarded to"
  }

  argument "logs_destinations" {
    comment = "Must be a list of log destinations where collected logs should be forwarded to"
  }

  argument "traces_destinations" {
    comment = "Must be a list of trace destinations where collected trace should be forwarded to"
  }

  // Zipkin Receiver
  otelcol.receiver.zipkin "receiver" {
    endpoint = "0.0.0.0:9411"
    debug_metrics {
      disable_high_cardinality_metrics = true
    }
    output {
      traces = [otelcol.processor.resourcedetection.default.input]
    }
  }

  // Resource Detection Processor
  otelcol.processor.resourcedetection "default" {
    detectors = ["env","system"]
    override = true

    system {
      hostname_sources = ["os"]
    }

    output {
      metrics = [otelcol.processor.k8sattributes.default.input]
      logs = [otelcol.processor.k8sattributes.default.input]
      traces = [otelcol.processor.k8sattributes.default.input]
    }
  }

  // K8s Attributes Processor
  otelcol.processor.k8sattributes "default" {
    extract {
      metadata = ["k8s.namespace.name","k8s.pod.name","k8s.deployment.name","k8s.statefulset.name","k8s.daemonset.name","k8s.cronjob.name","k8s.job.name","k8s.node.name","k8s.pod.uid","k8s.pod.start_time"]
    }
    pod_association {
      source {
        from = "resource_attribute"
        name = "k8s.pod.ip"
      }
    }
    pod_association {
      source {
        from = "resource_attribute"
        name = "k8s.pod.uid"
      }
    }
    pod_association {
      source {
        from = "connection"
      }
    }

    output {
      metrics = [otelcol.processor.transform.default.input]
      logs = [otelcol.processor.transform.default.input]
      traces = [otelcol.processor.transform.default.input, otelcol.connector.host_info.default.input]
    }
  }

  // Host Info Connector
  otelcol.connector.host_info "default" {
    host_identifiers = [ "k8s.node.name" ]

    output {
      metrics = [otelcol.processor.batch.default.input]
    }
  }

  // Transform Processor
  otelcol.processor.transform "default" {
    error_mode = "ignore"
    log_statements {
      context = "resource"
      statements = [
        "set(attributes[\"pod\"], attributes[\"k8s.pod.name\"])",
        "set(attributes[\"namespace\"], attributes[\"k8s.namespace.name\"])",
        "set(attributes[\"loki.resource.labels\"], \"cluster, namespace, job, pod\")",
      ]
    }

    output {
      metrics = [otelcol.processor.batch.default.input]
      logs = [otelcol.processor.batch.default.input]
      traces = [otelcol.processor.batch.default.input]
    }
  }

  // Batch Processor
  otelcol.processor.batch "default" {
    send_batch_size = 8192
    send_batch_max_size = 0
    timeout = "2s"

    output {
      metrics = argument.metrics_destinations.value
      logs = argument.logs_destinations.value
      traces = argument.traces_destinations.value
    }
  }
}
application_observability "feature" {
  metrics_destinations = [
    otelcol.processor.attributes.otlpgateway.input,
  ]
  logs_destinations = [
    otelcol.processor.attributes.otlpgateway.input,
  ]
  traces_destinations = [
    otelcol.processor.attributes.tempo.input,
    otelcol.processor.attributes.otlpgateway.input,
  ]
}




// Destination: tempo (otlp)

otelcol.processor.attributes "tempo" {
  output {
    traces = [otelcol.processor.transform.tempo.input]
  }
}

otelcol.processor.transform "tempo" {
  error_mode = "ignore"

  trace_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "proxies-example-cluster")`,
      `set(attributes["k8s.cluster.name"], "proxies-example-cluster")`,
    ]
  }

  output {
    traces = [otelcol.processor.batch.tempo.input]
  }
}

otelcol.processor.batch "tempo" {
  timeout = "2s"
  send_batch_size = 8192
  send_batch_max_size = 0

  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}
otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "http://tempo.example.com:4317"
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }

  retry_on_failure {
    enabled = true
    initial_interval = "5s"
    max_interval = "30s"
    max_elapsed_time = "5m"
  }
}
// Destination: otlpgateway (otlp)
otelcol.receiver.prometheus "otlpgateway" {
  output {
    metrics = [otelcol.processor.attributes.otlpgateway.input]
  }
}
otelcol.receiver.loki "otlpgateway" {
  output {
    logs = [otelcol.processor.attributes.otlpgateway.input]
  }
}

otelcol.processor.attributes "otlpgateway" {
  output {
    metrics = [otelcol.processor.transform.otlpgateway.input]
    logs = [otelcol.processor.transform.otlpgateway.input]
    traces = [otelcol.processor.transform.otlpgateway.input]
  }
}

otelcol.processor.transform "otlpgateway" {
  error_mode = "ignore"
  metric_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "proxies-example-cluster")`,
      `set(attributes["k8s.cluster.name"], "proxies-example-cluster")`,
    ]
  }

  metric_statements {
    context = "datapoint"
    statements = [
      `set(attributes["cluster"], "proxies-example-cluster")`,
      `set(attributes["k8s.cluster.name"], "proxies-example-cluster")`,
      `set(resource.attributes["deployment.environment"], attributes["deployment_environment"] ) where resource.attributes["deployment.environment"] == nil and attributes["deployment_environment"] != nil`,
      `delete_key(attributes, "deployment_environment") where attributes["deployment_environment"] == resource.attributes["deployment.environment"]`,
      `set(resource.attributes["deployment.environment.name"], attributes["deployment_environment_name"] ) where resource.attributes["deployment.environment.name"] == nil and attributes["deployment_environment_name"] != nil`,
      `delete_key(attributes, "deployment_environment_name") where attributes["deployment_environment_name"] == resource.attributes["deployment.environment.name"]`,
      `set(resource.attributes["service.name"], attributes["service_name"] ) where resource.attributes["service.name"] == nil and attributes["service_name"] != nil`,
      `delete_key(attributes, "service_name") where attributes["service_name"] == resource.attributes["service.name"]`,
      `set(resource.attributes["service.namespace"], attributes["service_namespace"] ) where resource.attributes["service.namespace"] == nil and attributes["service_namespace"] != nil`,
      `delete_key(attributes, "service_namespace") where attributes["service_namespace"] == resource.attributes["service.namespace"]`,
    ]
  }
  log_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "proxies-example-cluster")`,
      `set(attributes["k8s.cluster.name"], "proxies-example-cluster")`,
    ]
  }

  log_statements {
    context = "log"
    statements = [
      `delete_key(attributes, "loki.attribute.labels")`,
      `delete_key(attributes, "loki.resource.labels")`,
      `set(resource.attributes["k8s.container.name"], attributes["container"] ) where resource.attributes["k8s.container.name"] == nil and attributes["container"] != nil`,
      `delete_key(attributes, "container") where attributes["container"] == resource.attributes["k8s.container.name"]`,
      `set(resource.attributes["k8s.cronjob.name"], attributes["cronjob"] ) where resource.attributes["k8s.cronjob.name"] == nil and attributes["cronjob"] != nil`,
      `delete_key(attributes, "cronjob") where attributes["cronjob"] == resource.attributes["k8s.cronjob.name"]`,
      `set(resource.attributes["k8s.daemonset.name"], attributes["daemonset"] ) where resource.attributes["k8s.daemonset.name"] == nil and attributes["daemonset"] != nil`,
      `delete_key(attributes, "daemonset") where attributes["daemonset"] == resource.attributes["k8s.daemonset.name"]`,
      `set(resource.attributes["k8s.deployment.name"], attributes["deployment"] ) where resource.attributes["k8s.deployment.name"] == nil and attributes["deployment"] != nil`,
      `delete_key(attributes, "deployment") where attributes["deployment"] == resource.attributes["k8s.deployment.name"]`,
      `set(resource.attributes["deployment.environment"], attributes["deployment_environment"] ) where resource.attributes["deployment.environment"] == nil and attributes["deployment_environment"] != nil`,
      `delete_key(attributes, "deployment_environment") where attributes["deployment_environment"] == resource.attributes["deployment.environment"]`,
      `set(resource.attributes["deployment.environment.name"], attributes["deployment_environment_name"] ) where resource.attributes["deployment.environment.name"] == nil and attributes["deployment_environment_name"] != nil`,
      `delete_key(attributes, "deployment_environment_name") where attributes["deployment_environment_name"] == resource.attributes["deployment.environment.name"]`,
      `set(resource.attributes["k8s.job.name"], attributes["job_name"] ) where resource.attributes["k8s.job.name"] == nil and attributes["job_name"] != nil`,
      `delete_key(attributes, "job_name") where attributes["job_name"] == resource.attributes["k8s.job.name"]`,
      `set(resource.attributes["k8s.namespace.name"], attributes["namespace"] ) where resource.attributes["k8s.namespace.name"] == nil and attributes["namespace"] != nil`,
      `delete_key(attributes, "namespace") where attributes["namespace"] == resource.attributes["k8s.namespace.name"]`,
      `set(resource.attributes["k8s.pod.name"], attributes["pod"] ) where resource.attributes["k8s.pod.name"] == nil and attributes["pod"] != nil`,
      `delete_key(attributes, "pod") where attributes["pod"] == resource.attributes["k8s.pod.name"]`,
      `set(resource.attributes["k8s.replicaset.name"], attributes["replicaset"] ) where resource.attributes["k8s.replicaset.name"] == nil and attributes["replicaset"] != nil`,
      `delete_key(attributes, "replicaset") where attributes["replicaset"] == resource.attributes["k8s.replicaset.name"]`,
      `set(resource.attributes["service.name"], attributes["service_name"] ) where resource.attributes["service.name"] == nil and attributes["service_name"] != nil`,
      `delete_key(attributes, "service_name") where attributes["service_name"] == resource.attributes["service.name"]`,
      `set(resource.attributes["service.namespace"], attributes["service_namespace"] ) where resource.attributes["service.namespace"] == nil and attributes["service_namespace"] != nil`,
      `delete_key(attributes, "service_namespace") where attributes["service_namespace"] == resource.attributes["service.namespace"]`,
      `set(resource.attributes["k8s.statefulset.name"], attributes["statefulset"] ) where resource.attributes["k8s.statefulset.name"] == nil and attributes["statefulset"] != nil`,
      `delete_key(attributes, "statefulset") where attributes["statefulset"] == resource.attributes["k8s.statefulset.name"]`,
    ]
  }

  trace_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "proxies-example-cluster")`,
      `set(attributes["k8s.cluster.name"], "proxies-example-cluster")`,
    ]
  }

  output {
    metrics = [otelcol.processor.batch.otlpgateway.input]
    logs = [otelcol.processor.batch.otlpgateway.input]
    traces = [otelcol.processor.batch.otlpgateway.input]
  }
}

otelcol.processor.batch "otlpgateway" {
  timeout = "2s"
  send_batch_size = 8192
  send_batch_max_size = 0

  output {
    metrics = [otelcol.exporter.otlphttp.otlpgateway.input]
    logs = [otelcol.exporter.otlphttp.otlpgateway.input]
    traces = [otelcol.exporter.otlphttp.otlpgateway.input]
  }
}
otelcol.exporter.otlphttp "otlpgateway" {
  client {
    endpoint = "https://otlpgateway.example.com:4317"
    proxy_url = "https://myproxy.default.svc:8080"
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }

  retry_on_failure {
    enabled = true
    initial_interval = "5s"
    max_interval = "30s"
    max_elapsed_time = "5m"
  }
}
