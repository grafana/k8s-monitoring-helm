// Feature: Profiling
declare "profiling" {
  argument "profiles_destinations" {
    comment = "Must be a list of profile destinations where collected profiles should be forwarded to"
  }
  // Profiles: eBPF
  discovery.kubernetes "ebpf_pods" {
    role = "pod"
    selectors {
      role = "pod"
      field = "spec.nodeName=" + sys.env("HOSTNAME")
    }
  }

  discovery.relabel "ebpf_pods" {
    targets = discovery.kubernetes.ebpf_pods.targets
    rule {
      source_labels = ["__meta_kubernetes_pod_phase"]
      regex = "Succeeded|Failed|Completed"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      target_label = "namespace"
    }
    rule {
      source_labels = ["namespace"]
      regex = "kube-system|kube-public|confidential"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      target_label = "pod"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_node_name"]
      target_label = "node"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      target_label = "container"
    }
    // provide arbitrary service_name label, otherwise it will be set to {__meta_kubernetes_namespace}/{__meta_kubernetes_pod_container_name}
    rule {
      source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
      separator = "@"
      regex = "(.*)@(.*)"
      replacement = "ebpf/${1}/${2}"
      target_label = "service_name"
    }
  }

  pyroscope.ebpf "ebpf_pods" {
    targets = discovery.relabel.ebpf_pods.output
    demangle = "none"
    forward_to = argument.profiles_destinations.value
  }
  // Profiles: Java
  discovery.kubernetes "java_pods" {
    role = "pod"
    selectors {
      role = "pod"
      field = "spec.nodeName=" + sys.env("HOSTNAME")
    }
  }

  discovery.process "java_pods" {
    join = discovery.kubernetes.java_pods.targets
  }

  discovery.relabel "java_pods" {
    targets = discovery.process.java_pods.targets
    rule {
      source_labels = ["__meta_kubernetes_pod_phase"]
      regex = "Succeeded|Failed|Completed"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      regex = "^$"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_process_exe"]
      action = "keep"
      regex = ".*/java$"
    }
    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      target_label = "namespace"
    }
    rule {
      source_labels = ["namespace"]
      regex = "kube-system|kube-public|confidential"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      target_label = "pod"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_node_name"]
      target_label = "node"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      target_label = "container"
    }
  }

  pyroscope.java "java_pods" {
    targets = discovery.relabel.java_pods.output
    profiling_config {
      interval = "60s"
      alloc = "512k"
      cpu = true
      sample_rate = 100
      lock = "10ms"
    }
    forward_to = argument.profiles_destinations.value
  }
  // Profiles: pprof
  discovery.kubernetes "pprof_pods" {
    role = "pod"
    selectors {
      role = "pod"
      field = "spec.nodeName=" + sys.env("HOSTNAME")
    }
  }

  discovery.relabel "pprof_pods" {
    targets = discovery.kubernetes.pprof_pods.targets
    rule {
      action        = "drop"
      source_labels = ["__meta_kubernetes_pod_phase"]
      regex         = "Pending|Succeeded|Failed|Completed"
    }

    rule {
      regex  = "__meta_kubernetes_pod_label_(.+)"
      action = "labelmap"
    }
    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      target_label  = "namespace"
    }
    rule {
      source_labels = ["namespace"]
      regex = "kube-system|kube-public|confidential"
      action = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_name"]
      target_label  = "pod"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      target_label  = "container"
    }
  }

  discovery.relabel "pprof_pods_block_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_block_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_block" {
    targets = array.concat(discovery.relabel.pprof_pods_block_default_name.output, discovery.relabel.pprof_pods_block_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = true
      }
      profile.process_cpu {
        enabled = false
      }
      profile.fgprof {
        enabled = false
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = false
      }
      profile.memory {
        enabled = false
      }
      profile.mutex {
        enabled = false
      }
    }

    forward_to = argument.profiles_destinations.value
  }
  discovery.relabel "pprof_pods_cpu_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_cpu_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_cpu" {
    targets = array.concat(discovery.relabel.pprof_pods_cpu_default_name.output, discovery.relabel.pprof_pods_cpu_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = false
      }
      profile.process_cpu {
        enabled = true
      }
      profile.fgprof {
        enabled = false
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = false
      }
      profile.memory {
        enabled = false
      }
      profile.mutex {
        enabled = false
      }
    }

    forward_to = argument.profiles_destinations.value
  }
  discovery.relabel "pprof_pods_fgprof_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_fgprof_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_fgprof" {
    targets = array.concat(discovery.relabel.pprof_pods_fgprof_default_name.output, discovery.relabel.pprof_pods_fgprof_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = false
      }
      profile.process_cpu {
        enabled = false
      }
      profile.fgprof {
        enabled = true
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = false
      }
      profile.memory {
        enabled = false
      }
      profile.mutex {
        enabled = false
      }
    }

    forward_to = argument.profiles_destinations.value
  }
  discovery.relabel "pprof_pods_goroutine_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_goroutine_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_goroutine" {
    targets = array.concat(discovery.relabel.pprof_pods_goroutine_default_name.output, discovery.relabel.pprof_pods_goroutine_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = false
      }
      profile.process_cpu {
        enabled = false
      }
      profile.fgprof {
        enabled = false
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = true
      }
      profile.memory {
        enabled = false
      }
      profile.mutex {
        enabled = false
      }
    }

    forward_to = argument.profiles_destinations.value
  }
  discovery.relabel "pprof_pods_memory_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_memory_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_memory" {
    targets = array.concat(discovery.relabel.pprof_pods_memory_default_name.output, discovery.relabel.pprof_pods_memory_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = false
      }
      profile.process_cpu {
        enabled = false
      }
      profile.fgprof {
        enabled = false
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = false
      }
      profile.memory {
        enabled = true
      }
      profile.mutex {
        enabled = false
      }
    }

    forward_to = argument.profiles_destinations.value
  }
  discovery.relabel "pprof_pods_mutex_default_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
      regex         = ""
      action        = "keep"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  discovery.relabel "pprof_pods_mutex_custom_name" {
    targets = discovery.relabel.pprof_pods.output
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
      regex         = "true"
      action        = "keep"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
      regex         = ""
      action        = "drop"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_container_port_name"]
      target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"
      action        = "keepequal"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
      action        = "replace"
      regex         = "(https?)"
      target_label  = "__scheme__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
      action        = "replace"
      regex         = "(.+)"
      target_label  = "__profile_path__"
      replacement   = "$1"
    }
    rule {
      source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
      action        = "replace"
      regex         = "(.+?)(?::\\d+)?;(\\d+)"
      target_label  = "__address__"
      replacement   = "$1:$2"
    }
  }

  pyroscope.scrape "pyroscope_scrape_mutex" {
    targets = array.concat(discovery.relabel.pprof_pods_mutex_default_name.output, discovery.relabel.pprof_pods_mutex_custom_name.output)

    bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    profiling_config {
      profile.block {
        enabled = false
      }
      profile.process_cpu {
        enabled = false
      }
      profile.fgprof {
        enabled = false
      }
      profile.godeltaprof_block {
        enabled = false
      }
      profile.godeltaprof_memory {
        enabled = false
      }
      profile.godeltaprof_mutex {
        enabled = false
      }
      profile.goroutine {
        enabled = false
      }
      profile.memory {
        enabled = false
      }
      profile.mutex {
        enabled = true
      }
    }

    forward_to = argument.profiles_destinations.value
  }
}
profiling "feature" {
  profiles_destinations = [
    pyroscope.write.pyroscope.receiver,
  ]
}




// Destination: prometheus (prometheus)
otelcol.exporter.prometheus "prometheus" {
  add_metric_suffixes = true
  forward_to = [prometheus.remote_write.prometheus.receiver]
}

prometheus.remote_write "prometheus" {
  endpoint {
    url = "http://prometheus.prometheus.svc:9090/api/v1/write"
    headers = {
    }
    tls_config {
      insecure_skip_verify = false
    }
    send_native_histograms = false

    queue_config {
      capacity = 10000
      min_shards = 1
      max_shards = 50
      max_samples_per_send = 2000
      batch_send_deadline = "5s"
      min_backoff = "30ms"
      max_backoff = "5s"
      retry_on_http_429 = true
      sample_age_limit = "0s"
    }

    write_relabel_config {
      source_labels = ["cluster"]
      regex = ""
      replacement = "exclude-by-namespace-cluster"
      target_label = "cluster"
    }
    write_relabel_config {
      source_labels = ["k8s_cluster_name"]
      regex = ""
      replacement = "exclude-by-namespace-cluster"
      target_label = "k8s_cluster_name"
    }
  }

  wal {
    truncate_frequency = "2h"
    min_keepalive_time = "5m"
    max_keepalive_time = "8h"
  }
}
// Destination: loki (loki)
otelcol.exporter.loki "loki" {
  forward_to = [loki.write.loki.receiver]
}

loki.write "loki" {
  endpoint {
    url = "http://loki.loki.svc:3100/api/push"
    tls_config {
      insecure_skip_verify = false
    }
    min_backoff_period = "500ms"
    max_backoff_period = "5m"
    max_backoff_retries = "10"
  }
  external_labels = {
    "cluster" = "exclude-by-namespace-cluster",
    "k8s_cluster_name" = "exclude-by-namespace-cluster",
  }
}
// Destination: tempo (otlp)

otelcol.processor.attributes "tempo" {
  output {
    metrics = [otelcol.processor.transform.tempo.input]
    logs = [otelcol.processor.transform.tempo.input]
    traces = [otelcol.processor.transform.tempo.input]
  }
}

otelcol.processor.transform "tempo" {
  error_mode = "ignore"
  metric_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "exclude-by-namespace-cluster")`,
      `set(attributes["k8s.cluster.name"], "exclude-by-namespace-cluster")`,
    ]
  }

  metric_statements {
    context = "datapoint"
    statements = [
      `set(attributes["cluster"], "exclude-by-namespace-cluster")`,
      `set(attributes["k8s.cluster.name"], "exclude-by-namespace-cluster")`,
    ]
  }
  log_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "exclude-by-namespace-cluster")`,
      `set(attributes["k8s.cluster.name"], "exclude-by-namespace-cluster")`,
    ]
  }

  log_statements {
    context = "log"
    statements = [
      `delete_key(attributes, "loki.attribute.labels")`,
      `delete_key(attributes, "loki.resource.labels")`,
      `set(resource.attributes["service.name"], attributes["service_name"]) where resource.attributes["service.name"] == nil and attributes["service_name"] != nil`,
      `delete_key(attributes, "service_name") where attributes["service_name"] != nil`,
      `set(resource.attributes["service.namespace"], attributes["service_namespace"] ) where resource.attributes["service.namespace"] == nil and attributes["service_namespace"] != nil`,
      `delete_key(attributes, "service_namespace") where attributes["service_namespace"] != nil`,
      `set(resource.attributes["deployment.environment.name"], attributes["deployment_environment_name"] ) where resource.attributes["deployment.environment.name"] == nil and attributes["deployment_environment_name"] != nil`,
      `delete_key(attributes, "deployment_environment_name") where attributes["deployment_environment_name"] != nil`,
      `set(resource.attributes["deployment.environment"], attributes["deployment_environment"] ) where resource.attributes["deployment.environment"] == nil and attributes["deployment_environment"] != nil`,
      `delete_key(attributes, "deployment_environment") where attributes["deployment_environment"] != nil`,
    ]
  }

  trace_statements {
    context = "resource"
    statements = [
      `set(attributes["cluster"], "exclude-by-namespace-cluster")`,
      `set(attributes["k8s.cluster.name"], "exclude-by-namespace-cluster")`,
    ]
  }

  output {
    metrics = [otelcol.processor.batch.tempo.input]
    logs = [otelcol.processor.batch.tempo.input]
    traces = [otelcol.processor.batch.tempo.input]
  }
}

otelcol.processor.batch "tempo" {
  timeout = "2s"
  send_batch_size = 8192
  send_batch_max_size = 0

  output {
    metrics = [otelcol.exporter.otlphttp.tempo.input]
    logs = [otelcol.exporter.otlphttp.tempo.input]
    traces = [otelcol.exporter.otlphttp.tempo.input]
  }
}
otelcol.exporter.otlphttp "tempo" {
  client {
    endpoint = "http://tempo.tempo.svc:443/otlp"
    tls {
      insecure = false
      insecure_skip_verify = false
    }
  }

  retry_on_failure {
    enabled = true
    initial_interval = "5s"
    max_interval = "30s"
    max_elapsed_time = "5m"
  }
}
// Destination: pyroscope (pyroscope)
pyroscope.write "pyroscope" {
  endpoint {
    url = "http://pyroscope.pyroscope.svc:4040"
    headers = {
    }
    tls_config {
      insecure_skip_verify = false
    }
    min_backoff_period = "500ms"
    max_backoff_period = "5m"
    max_backoff_retries = "10"
  }

  external_labels = {
    "cluster" = "exclude-by-namespace-cluster",
    "k8s_cluster_name" = "exclude-by-namespace-cluster",
  }
}
