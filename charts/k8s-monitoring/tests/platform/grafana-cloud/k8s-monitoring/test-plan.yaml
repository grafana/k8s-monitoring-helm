---
# yamllint disable rule:line-length
apiVersion: helm-chart-toolbox.grafana.com/v1
kind: TestPlan
name: k8s-monitoring

subject:
  releaseName: k8smon
  path: ../../../..
  valuesFile: values.yaml
  set:
    - key: "cluster.name"
      valueFrom: clusterName
    - key: "clusterMetrics.opencost.opencost.exporter.defaultClusterId"
      valueFrom: clusterName

cluster:
  type: kind
  appendRandomNumber: true

dependencies:
  - directory: dependencies
  - preset: test-parameters
    namespace: default
  - preset: test-parameters
    namespace: toolbox
  - file: grafana-cloud-credentials.yaml

tests:
  - type: query-test
    values:
      tests:
        - env:
            PROMETHEUS_URL: https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/api/v1/query
            LOKI_URL: https://logs-prod-006.grafana.net/loki/api/v1/query
          envFrom:
            - secretRef: {name: grafana-cloud-credentials}
            - configMapRef: {name: test-parameters}
          queries:
            # Self reporting metrics
            - query: grafana_kubernetes_monitoring_build_info{cluster="$clusterName"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$clusterName", feature="clusterMetrics"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$clusterName", feature="clusterEvents"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$clusterName", feature="podLogs", method="volumes"}
              type: promql

            # Cluster metrics
            - query: kubernetes_build_info{cluster="$clusterName", job="integrations/kubernetes/kubelet"}
              type: promql
            - query: node_cpu_usage_seconds_total{cluster="$clusterName", job="integrations/kubernetes/resources"}
              type: promql
            - query: machine_memory_bytes{cluster="$clusterName", job="integrations/kubernetes/cadvisor"}
              type: promql
            - query: count(kube_node_info{cluster="$clusterName", job="integrations/kubernetes/kube-state-metrics"})
              type: promql
              expect:
                value: 1
            - query: kube_node_labels{cluster="$clusterName"}
              type: promql
            - query: node_exporter_build_info{cluster="$clusterName", job="integrations/node_exporter"}
              type: promql
            - query: kepler_container_joules_total{cluster="$clusterName", job="integrations/kepler"}
              type: promql
            - query: opencost_build_info{cluster="$clusterName", job="integrations/opencost"}
              type: promql

            # Cluster events
            - query: count_over_time({cluster="$clusterName", job="integrations/kubernetes/eventhandler"}[1h])
              type: logql

            # Pod logs
            - query: count_over_time({cluster="$clusterName", job!="integrations/kubernetes/eventhandler"}[1h])
              type: logql

            # Pod logs service_name label
            - query: count_over_time({cluster="$clusterName", service_name!=""}[1h])
              type: logql

            # Pod logs service_name label from resource.opentelemetry.io/service.name annotation
            - query: count_over_time({cluster="$clusterName", service_name="hello-kubernetes-annotation"}[1h])
              type: logql

            # Pod logs service_name label from app.kubernetes.io/name label
            - query: count_over_time({cluster="$clusterName", service_name="hello-kubernetes-label"}[1h])
              type: logql

            # Pod logs service_namespace label from resource.opentelemetry.io/service.namespace annotation
            - query: count_over_time({cluster="$clusterName", service_namespace="hello-kubernetes"}[1h])
              type: logql

            # Pod logs service_instance_id structured metadata from resource.opentelemetry.io/service.instance annotation
            - query: 'avg(count_over_time({cluster="$clusterName", namespace="default", service_namespace="hello-kubernetes", service_name="hello-kubernetes-annotation"} | service_instance_id = "hello-kubernetes-test-1" [1h]))'
              type: logql

            # Pod logs service_instance_id label from the default method
            - query: 'avg(count_over_time({cluster="$clusterName", namespace="default", namespace="default", service_namespace="default", service_name="hello-kubernetes-label"} | service_instance_id =~ "default.hello-kubernetes-test-0-.*.hello-kubernetes" [1h]))'
              type: logql

            # Pod logs deployment_environment label from resource.opentelemetry.io/deployment.environment annotation
            - query: count_over_time({cluster="$clusterName", deployment_environment="hello-kubernetes"}[1h])
              type: logql

            # Pod logs deployment_environment_name label from resource.opentelemetry.io/deployment.environment.name
            # annotation
            - query: count_over_time({cluster="$clusterName", deployment_environment_name="hello-kubernetes"}[1h])
              type: logql

            # Alloy integration
            - query: alloy_build_info{cluster="$clusterName"}
              type: promql

            # DPM check
            - query: avg(count_over_time(scrape_samples_scraped{cluster="$clusterName"}[1m]))
              type: promql
              expect:
                value: 1
                operator: ==
