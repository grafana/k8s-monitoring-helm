---
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  url: https://github.com/grafana/k8s-monitoring-helm
  ref:
    branch: main
  ignore: |
    /*
    !/charts/k8s-monitoring-test
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  chart:
    spec:
      chart: charts/k8s-monitoring-test
      sourceRef:
        kind: GitRepository
        name: k8s-monitoring-test
      interval: 1m
  values:
    tests:
      - env:
          PROMETHEUS_URL: https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/api/v1/query
          LOKI_URL: https://logs-prod-006.grafana.net/loki/api/v1/query
        envFrom:
          - secretRef: {name: grafana-cloud-credentials}
          - configMapRef: {name: test-variables}
        queries:
          # Self reporting metrics
          - query: grafana_kubernetes_monitoring_build_info{cluster="$CLUSTER"}
            type: promql
          - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="clusterMetrics"}
            type: promql
          - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="clusterEvents"}
            type: promql
          - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="podLogs", method="volumes"}
            type: promql

          # Cluster metrics
          - query: kubernetes_build_info{cluster="$CLUSTER", job="integrations/kubernetes/kubelet"}
            type: promql
          - query: node_cpu_usage_seconds_total{cluster="$CLUSTER", job="integrations/kubernetes/resources"}
            type: promql
          - query: machine_memory_bytes{cluster="$CLUSTER", job="integrations/kubernetes/cadvisor"}
            type: promql
          - query: count(kube_node_info{cluster="$CLUSTER", job="integrations/kubernetes/kube-state-metrics"})
            type: promql
            expect:
              value: 1
          - query: kube_node_labels{cluster="$CLUSTER"}
            type: promql
          - query: node_exporter_build_info{cluster="$CLUSTER", job="integrations/node_exporter"}
            type: promql
          - query: kepler_container_joules_total{cluster="$CLUSTER", job="integrations/kepler"}
            type: promql
          - query: opencost_build_info{cluster="$CLUSTER", job="integrations/opencost"}
            type: promql

          # Cluster events
          - query: count_over_time({cluster="$CLUSTER", job="integrations/kubernetes/eventhandler"}[1h])
            type: logql

          # Pod logs
          - query: count_over_time({cluster="$CLUSTER", job!="integrations/kubernetes/eventhandler"}[1h])
            type: logql

          # Pod logs service_name label
          - query: count_over_time({cluster="$CLUSTER", service_name!=""}[1h])
            type: logql

          # Pod logs service_name label from resource.opentelemetry.io/service.name annotation
          - query: count_over_time({cluster="$CLUSTER", service_name="$ANNOTATION_POD_LOG_SERVICE_NAME"}[1h])
            type: logql

          # Pod logs service_name label from app.kubernetes.io/name label
          - query: count_over_time({cluster="$CLUSTER", service_name="$LABEL_POD_LOG_SERVICE_NAME"}[1h])
            type: logql

          # Pod logs service_namespace label from resource.opentelemetry.io/service.namespace annotation
          - query: count_over_time({cluster="$CLUSTER", service_namespace="hello-kubernetes"}[1h])
            type: logql

          # Pod logs service_instance label from resource.opentelemetry.io/service.instance annotation
          - query: count_over_time({cluster="$CLUSTER", service_instance="hello-kubernetes-1"}[1h])
            type: logql

          # Pod logs service_instance label from the default method
          - query: count_over_time({cluster="$CLUSTER", service_instance=~"default\.hello-kubernetes-test-0-.*\.hello-kubernetes"}[1h])
            type: logql

          # Pod logs deployment_environment label from resource.opentelemetry.io/deployment.environment annotation
          - query: count_over_time({cluster="$CLUSTER", deployment_environment="hello-kubernetes"}[1h])
            type: logql

          # Pod logs deployment_environment_name label from resource.opentelemetry.io/deployment.environment.name
          # annotation
          - query: count_over_time({cluster="$CLUSTER", deployment_environment_name="hello-kubernetes"}[1h])
            type: logql

          # Alloy integration
          - query: alloy_build_info{cluster="$CLUSTER"}
            type: promql

          # DPM check
          - query: avg(count_over_time(scrape_samples_scraped{cluster="$CLUSTER"}[1m]))
            type: promql
            expect:
              value: 1
              operator: ==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-kubernetes-test-0
  labels:
    app.kubernetes.io/name: "hello-kubernetes-label"
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.10"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hello-kubernetes-label"
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "hello-kubernetes-label"
        app.kubernetes.io/instance: test
    spec:
      containers:
        - name: hello-kubernetes
          image: "paulbouwer/hello-kubernetes:1.10"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CONTAINER_IMAGE
              value: "paulbouwer/hello-kubernetes:1.10"
---
# Source: hello-kubernetes/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-kubernetes-test-1
  labels:
    app.kubernetes.io/name: "hello-kubernetes-label"
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.10"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "hello-kubernetes-label"
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "hello-kubernetes-label"
        app.kubernetes.io/instance: test
      annotations:
        resource.opentelemetry.io/service.name: "hello-kubernetes-annotation"
        resource.opentelemetry.io/service.namespace: "hello-kubernetes"
        resource.opentelemetry.io/service.instance: "hello-kubernetes-test-1"
        resource.opentelemetry.io/deployment.environment: "hello-kubernetes"
        resource.opentelemetry.io/deployment.environment.name: "hello-kubernetes"
    spec:
      containers:
        - name: hello-kubernetes
          image: "paulbouwer/hello-kubernetes:1.10"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CONTAINER_IMAGE
              value: "paulbouwer/hello-kubernetes:1.10"
