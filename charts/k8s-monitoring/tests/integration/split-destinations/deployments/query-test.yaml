---
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  url: https://github.com/grafana/k8s-monitoring-helm
  ref:
    branch: main
  ignore: |
    /*
    !/charts/k8s-monitoring-test
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  chart:
    spec:
      chart: charts/k8s-monitoring-test
      sourceRef:
        kind: GitRepository
        name: k8s-monitoring-test
      interval: 1m
  dependsOn:
    - name: all-logs
      namespace: all-dbs
    - name: all-metrics
      namespace: all-dbs
    - name: all-traces
      namespace: all-dbs
    - name: prod-logs
      namespace: prod-dbs
    - name: prod-metrics
      namespace: prod-dbs
    - name: prod-traces
      namespace: prod-dbs
  values:
    tests:
      - env:
          CLUSTER: split-destinations-cluster
          PROMETHEUS_URL: http://all-metrics-prometheus-server.all-dbs.svc:9090/api/v1/query
          PROMETHEUS_USER: promuser
          PROMETHEUS_PASS: prometheuspassword
          LOKI_URL: http://all-logs-loki.all-dbs.svc:3100/loki/api/v1/query
          LOKI_TENANTID: 1
          LOKI_USER: loki
          LOKI_PASS: lokipassword
          TEMPO_URL: http://all-traces-tempo.all-dbs.svc:3100/api/search
        queries:
          - query: kube_pod_info{cluster="$CLUSTER", pod="prod-pod", namespace="production"}
            type: promql
          - query: kube_pod_info{cluster="$CLUSTER", pod="dev-pod", namespace="development"}
            type: promql
          - query: count_over_time({cluster="$CLUSTER", pod="prod-pod", namespace="production"}[1h])
            type: logql
          - query: count_over_time({cluster="$CLUSTER", pod="dev-pod", namespace="development"}[1h])
            type: logql
          - query: "{.k8s.cluster.name=\"$CLUSTER\" && resource.k8s.namespace.name=\"prod-dbs\"}"
            type: traceql
          - query: "{.k8s.cluster.name=\"$CLUSTER\" && resource.k8s.namespace.name=\"all-dbs\"}"
            type: traceql

      - env:
          CLUSTER: split-destinations-cluster
          PROMETHEUS_URL: http://prod-metrics-prometheus-server.prod-dbs.svc:9090/api/v1/query
          PROMETHEUS_USER: promuser
          PROMETHEUS_PASS: prometheuspassword
          LOKI_URL: http://prod-logs-loki.prod-dbs.svc:3100/loki/api/v1/query
          LOKI_TENANTID: 1
          LOKI_USER: loki
          LOKI_PASS: lokipassword
          TEMPO_URL: http://prod-traces-tempo.prod-dbs.svc:3100/api/search
        queries:
          - query: kube_pod_info{cluster="$CLUSTER", pod="prod-pod", namespace="production"}
            type: promql
          - query: count(kube_pod_info{cluster="$CLUSTER", pod="dev-pod", namespace="development"}) or vector(0)
            type: promql
            expect:
              value: 0

          # No way to check if there are zero results for logql queries
          # - query: count_over_time({cluster="$CLUSTER", pod="dev-pod", namespace="development"}[1h])
          #   type: logql
          - query: count_over_time({cluster="$CLUSTER", pod="prod-pod", namespace="production"}[1h])
            type: logql

          # No way to check if there are zero results for traceql queries
          # - query: "{.k8s.cluster.name=\"$CLUSTER\" && resource.k8s.namespace.name=\"all-dbs\"}"
          #   type: traceql
          - query: "{.k8s.cluster.name=\"$CLUSTER\" && resource.k8s.namespace.name=\"prod-dbs\"}"
            type: traceql
