---
tests:
  - env:
      PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
      LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
      LOKI_TENANTID: 1
      LOKI_USER: loki
      LOKI_PASS: lokipassword
    queries:
      # Self reporting metrics
      - query: grafana_kubernetes_monitoring_build_info{cluster="control-plane-monitoring-test"}
        type: promql
      - query: grafana_kubernetes_monitoring_feature_info{cluster="control-plane-monitoring-test", feature="clusterMetrics"}
        type: promql
      - query: grafana_kubernetes_monitoring_feature_info{cluster="control-plane-monitoring-test", feature="clusterEvents"}
        type: promql
      - query: grafana_kubernetes_monitoring_feature_info{cluster="control-plane-monitoring-test", feature="podLogs", method="volumes"}
        type: promql

      # Cluster metrics
      - query: kubernetes_build_info{cluster="control-plane-monitoring-test", job="integrations/kubernetes/kubelet"}
        type: promql
      - query: machine_memory_bytes{cluster="control-plane-monitoring-test", job="integrations/kubernetes/cadvisor"}
        type: promql
      - query: count(kube_node_info{cluster="control-plane-monitoring-test", job="integrations/kubernetes/kube-state-metrics"})
        type: promql
        expect:
          value: 1
      - query: kube_node_labels{cluster="control-plane-monitoring-test"}
        type: promql
      - query: node_exporter_build_info{cluster="control-plane-monitoring-test", job="integrations/node_exporter"}
        type: promql

      # Control plane metrics
      - query: apiserver_request_total{cluster="control-plane-monitoring-test", job="integrations/kubernetes/kube-apiserver"}
        type: promql
      - query: coredns_build_info{cluster="control-plane-monitoring-test", job="integrations/kubernetes/kube-dns"}
        type: promql
      - query: workqueue_adds_total{cluster="control-plane-monitoring-test"}
        type: promql
      - query: kubeproxy_sync_proxy_rules_service_changes_total{cluster="control-plane-monitoring-test"}
        type: promql
      - query: scheduler_unschedulable_pods{cluster="control-plane-monitoring-test"}
        type: promql

      # Cluster events
      - query: count_over_time({cluster="control-plane-monitoring-test", job="integrations/kubernetes/eventhandler"}[1h])
        type: logql

      # Pod logs
      - query: count_over_time({cluster="control-plane-monitoring-test", job!="integrations/kubernetes/eventhandler"}[1h])
        type: logql

#      # DPM check
#      - query: "avg(count_over_time(scrape_samples_scraped{cluster=\"control-plane-monitoring-test\"}[1m]))"
#        type: promql
#        expect:
#          value: 1
#          operator: ==
