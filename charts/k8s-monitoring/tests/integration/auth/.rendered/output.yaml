---
# Source: k8s-monitoring/charts/alloy-logs/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: k8smon-alloy-logs
  namespace: default
  labels:
    helm.sh/chart: alloy-logs-0.12.5
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: k8smon-alloy-metrics
  namespace: default
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prometheus-basicauth-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  username: "YmFzaWN1c2Vy"
  password: "YmFzaWNwYXNzd29yZA=="
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prometheus-bearer-token-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  bearerToken: "bXktYmVhcmVyLXRva2Vu"
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prometheus-otlp-basicauth-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  username: "YmFzaWN1c2Vy"
  password: "YmFzaWNwYXNzd29yZA=="
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prometheus-otlp-bearer-token-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  bearerToken: "bXktYmVhcmVyLXRva2Vu"
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "loki-noauth-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  tenantId: "MQ=="
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "loki-basicauth-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  tenantId: "MQ=="
  username: "YmFzaWN1c2Vy"
  password: "YmFzaWNwYXNzd29yZA=="
---
# Source: k8s-monitoring/templates/destination_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "loki-bearer-token-k8smon-k8s-monitoring"
  namespace: "default"
type: Opaque
data:
  tenantId: "MQ=="
  bearerToken: "bXktYmVhcmVyLXRva2Vu"
---
# Source: k8s-monitoring/templates/alloy-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-alloy-metrics
  namespace: default
data:
  config.alloy: |-
    // Feature: Cluster Metrics
    declare "cluster_metrics" {
      argument "metrics_destinations" {
        comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
      }
      discovery.kubernetes "nodes" {
        role = "node"
      }
    
      // Kubelet
      discovery.relabel "kubelet" {
        targets = discovery.kubernetes.nodes.targets
      }
    
      prometheus.scrape "kubelet" {
        targets  = discovery.relabel.kubelet.output
        job_name = "integrations/kubernetes/kubelet"
        scheme   = "https"
        scrape_interval = "60s"
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    
        tls_config {
          ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          insecure_skip_verify = true
          server_name = "kubernetes"
        }
    
        clustering {
          enabled = true
        }
    
        forward_to = [prometheus.relabel.kubelet.receiver]
      }
    
      prometheus.relabel "kubelet" {
        max_cache_size = 100000
        rule {
          source_labels = ["__name__"]
          regex = "up|scrape_samples_scraped|go_goroutines|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|kubernetes_build_info|namespace_workload_pod|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes"
          action = "keep"
        }
    
        forward_to = argument.metrics_destinations.value
      }
    }
    cluster_metrics "feature" {
      metrics_destinations = [
        prometheus.remote_write.prometheus_noauth.receiver,
        prometheus.remote_write.prometheus_basicauth.receiver,
        prometheus.remote_write.prometheus_bearer_token.receiver,
        otelcol.receiver.prometheus.prometheus_otlp_noauth.receiver,
        otelcol.receiver.prometheus.prometheus_otlp_basicauth.receiver,
        otelcol.receiver.prometheus.prometheus_otlp_bearer_token.receiver,
      ]
    }
    // Self Reporting
    prometheus.exporter.unix "kubernetes_monitoring_telemetry" {
      set_collectors = ["textfile"]
      textfile {
        directory = "/etc/alloy"
      }
    }
    
    discovery.relabel "kubernetes_monitoring_telemetry" {
      targets = prometheus.exporter.unix.kubernetes_monitoring_telemetry.targets
      rule {
        target_label = "instance"
        action = "replace"
        replacement = "k8smon"
      }
      rule {
        target_label = "job"
        action = "replace"
        replacement = "integrations/kubernetes/kubernetes_monitoring_telemetry"
      }
    }
    
    prometheus.scrape "kubernetes_monitoring_telemetry" {
      job_name   = "integrations/kubernetes/kubernetes_monitoring_telemetry"
      targets    = discovery.relabel.kubernetes_monitoring_telemetry.output
      scrape_interval = "60s"
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.kubernetes_monitoring_telemetry.receiver]
    }
    
    prometheus.relabel "kubernetes_monitoring_telemetry" {
      rule {
        source_labels = ["__name__"]
        regex = "grafana_kubernetes_monitoring_.*"
        action = "keep"
      }
      forward_to = [
        prometheus.remote_write.prometheus_noauth.receiver,
        prometheus.remote_write.prometheus_basicauth.receiver,
        prometheus.remote_write.prometheus_bearer_token.receiver,
      ]
    }
    
    
    
    
    // Destination: prometheus-noauth (prometheus)
    otelcol.exporter.prometheus "prometheus_noauth" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_noauth.receiver]
    }
    
    prometheus.remote_write "prometheus_noauth" {
      endpoint {
        url = "http://prometheus-server.prometheus.svc:9090/api/v1/write"
        headers = {
        }
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-noauth",
      }
    }
    // Destination: prometheus-basicauth (prometheus)
    otelcol.exporter.prometheus "prometheus_basicauth" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_basicauth.receiver]
    }
    
    prometheus.remote_write "prometheus_basicauth" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/metrics/basic/api/v1/write"
        headers = {
        }
        basic_auth {
          username = convert.nonsensitive(remote.kubernetes.secret.prometheus_basicauth.data["username"])
          password = remote.kubernetes.secret.prometheus_basicauth.data["password"]
        }
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-basicauth",
      }
    }
    
    remote.kubernetes.secret "prometheus_basicauth" {
      name      = "prometheus-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-bearer-token (prometheus)
    otelcol.exporter.prometheus "prometheus_bearer_token" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_bearer_token.receiver]
    }
    
    prometheus.remote_write "prometheus_bearer_token" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/metrics/bearer/api/v1/write"
        headers = {
        }
        bearer_token = remote.kubernetes.secret.prometheus_bearer_token.data["bearerToken"]
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-bearer-token",
      }
    }
    
    remote.kubernetes.secret "prometheus_bearer_token" {
      name      = "prometheus-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-otlp-noauth (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_noauth" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.attributes "prometheus_otlp_noauth" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-noauth"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_noauth.input]
        logs = [otelcol.processor.transform.prometheus_otlp_noauth.input]
        traces = [otelcol.processor.transform.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_noauth" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_noauth" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_noauth.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_noauth" {
      client {
        endpoint = "http://prometheus-server.prometheus.svc:9090/api/v1/otlp"
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    // Destination: prometheus-otlp-basicauth (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_basicauth" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_basicauth.input]
      }
    }
    otelcol.auth.basic "prometheus_otlp_basicauth" {
      username = convert.nonsensitive(remote.kubernetes.secret.prometheus_otlp_basicauth.data["username"])
      password = remote.kubernetes.secret.prometheus_otlp_basicauth.data["password"]
    }
    
    otelcol.processor.attributes "prometheus_otlp_basicauth" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-basicauth"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
        logs = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
        traces = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_basicauth" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_basicauth.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_basicauth" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_basicauth.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_basicauth" {
      client {
        endpoint = "http://nginx-auth-gateway.default.svc/metrics/basic/api/v1/otlp"
        auth = otelcol.auth.basic.prometheus_otlp_basicauth.handler
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    
    remote.kubernetes.secret "prometheus_otlp_basicauth" {
      name      = "prometheus-otlp-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-otlp-bearer-token (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_bearer_token" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_bearer_token.input]
      }
    }
    otelcol.auth.bearer "prometheus_otlp_bearer_token" {
      token = remote.kubernetes.secret.prometheus_otlp_bearer_token.data["bearerToken"]
    }
    
    otelcol.processor.attributes "prometheus_otlp_bearer_token" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-bearer-token"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
        logs = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
        traces = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_bearer_token" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_bearer_token.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_bearer_token" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_bearer_token.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_bearer_token" {
      client {
        endpoint = "http://nginx-auth-gateway.default.svc/metrics/bearer/api/v1/otlp"
        auth = otelcol.auth.bearer.prometheus_otlp_bearer_token.handler
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    
    remote.kubernetes.secret "prometheus_otlp_bearer_token" {
      name      = "prometheus-otlp-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-noauth (loki)
    otelcol.exporter.loki "loki_noauth" {
      forward_to = [loki.write.loki_noauth.receiver]
    }
    
    loki.write "loki_noauth" {
      endpoint {
        url = "http://loki.loki.svc:3100/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_noauth.data["tenantId"])
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-noauth",
      }
    }
    
    remote.kubernetes.secret "loki_noauth" {
      name      = "loki-noauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-basicauth (loki)
    otelcol.exporter.loki "loki_basicauth" {
      forward_to = [loki.write.loki_basicauth.receiver]
    }
    
    loki.write "loki_basicauth" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/logs/basic/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_basicauth.data["tenantId"])
        basic_auth {
          username = convert.nonsensitive(remote.kubernetes.secret.loki_basicauth.data["username"])
          password = remote.kubernetes.secret.loki_basicauth.data["password"]
        }
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-basicauth",
      }
    }
    
    remote.kubernetes.secret "loki_basicauth" {
      name      = "loki-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-bearer-token (loki)
    otelcol.exporter.loki "loki_bearer_token" {
      forward_to = [loki.write.loki_bearer_token.receiver]
    }
    
    loki.write "loki_bearer_token" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/logs/bearer/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_bearer_token.data["tenantId"])
        bearer_token = remote.kubernetes.secret.loki_bearer_token.data["bearerToken"]
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-bearer-token",
      }
    }
    
    remote.kubernetes.secret "loki_bearer_token" {
      name      = "loki-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }

  self-reporting-metric.prom: |
    
    # HELP grafana_kubernetes_monitoring_build_info A metric to report the version of the Kubernetes Monitoring Helm chart
    # TYPE grafana_kubernetes_monitoring_build_info gauge
    grafana_kubernetes_monitoring_build_info{version="2.0.23", namespace="default"} 1
    # HELP grafana_kubernetes_monitoring_feature_info A metric to report the enabled features of the Kubernetes Monitoring Helm chart
    # TYPE grafana_kubernetes_monitoring_feature_info gauge
    grafana_kubernetes_monitoring_feature_info{deployments="%!s(<nil>)", feature="clusterMetrics", sources="kubelet", version="1.0.0"} 1
    grafana_kubernetes_monitoring_feature_info{feature="podLogs", method="volumes", version="1.0.0"} 1
---
# Source: k8s-monitoring/templates/alloy-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-alloy-logs
  namespace: default
data:
  config.alloy: |-
    // Feature: Pod Logs
    declare "pod_logs" {
      argument "logs_destinations" {
        comment = "Must be a list of log destinations where collected logs should be forwarded to"
      }
    
      discovery.relabel "filtered_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }
        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          separator = "/"
          action = "replace"
          replacement = "$1"
          target_label = "job"
        }
    
        // set the container runtime as a label
        rule {
          action = "replace"
          source_labels = ["__meta_kubernetes_pod_container_id"]
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
          target_label = "tmp_container_runtime"
        }
    
        // make all labels on the pod available to the pipeline as labels,
        // they are omitted before write to loki via stage.label_keep unless explicitly set
        rule {
          action = "labelmap"
          regex = "__meta_kubernetes_pod_label_(.+)"
        }
    
        // make all annotations on the pod available to the pipeline as labels,
        // they are omitted before write to loki via stage.label_keep unless explicitly set
        rule {
          action = "labelmap"
          regex = "__meta_kubernetes_pod_annotation_(.+)"
        }
    
        // explicitly set service_name. if not set, loki will automatically try to populate a default.
        // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users
        //
        // choose the first value found from the following ordered list:
        // - pod.annotation[resource.opentelemetry.io/service.name]
        // - pod.label[app.kubernetes.io/name]
        // - k8s.pod.name
        // - k8s.container.name
        rule {
          action = "replace"
          source_labels = [
            "__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name",
            "__meta_kubernetes_pod_label_app_kubernetes_io_name",
            "__meta_kubernetes_pod_name",
            "__meta_kubernetes_pod_container_name",
          ]
          separator = ";"
          regex = "^(?:;*)?([^;]+).*$"
          replacement = "$1"
          target_label = "service_name"
        }
    
        // set resource attributes
        rule {
          action = "labelmap"
          regex = "__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job"]
          regex = "(.+)"
          target_label = "job"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          regex = "(.+)"
          target_label = "app_kubernetes_io_name"
        }
      }
    
      discovery.kubernetes "pods" {
        role = "pod"
        selectors {
          role = "pod"
          field = "spec.nodeName=" + sys.env("HOSTNAME")
        }
        namespaces {
          names = ["default"]
        }
      }
    
      discovery.relabel "filtered_pods_with_paths" {
        targets = discovery.relabel.filtered_pods.output
    
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          separator = "/"
          action = "replace"
          replacement = "/var/log/pods/*$1/*.log"
          target_label = "__path__"
        }
      }
    
      local.file_match "pod_logs" {
        path_targets = discovery.relabel.filtered_pods_with_paths.output
      }
    
      loki.source.file "pod_logs" {
        targets    = local.file_match.pod_logs.targets
        forward_to = [loki.process.pod_logs.receiver]
      }
    
      loki.process "pod_logs" {
        stage.match {
          selector = "{tmp_container_runtime=~\"containerd|cri-o\"}"
          // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
          stage.cri {}
    
          // Set the extract flags and stream values as labels
          stage.labels {
            values = {
              flags  = "",
              stream  = "",
            }
          }
        }
    
        stage.match {
          selector = "{tmp_container_runtime=\"docker\"}"
          // the docker processing stage extracts the following k/v pairs: log, stream, time
          stage.docker {}
    
          // Set the extract stream value as a label
          stage.labels {
            values = {
              stream  = "",
            }
          }
        }
    
        // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,
        // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary
        // container runtime label as it is no longer needed.
        stage.label_drop {
          values = [
            "filename",
            "tmp_container_runtime",
          ]
        }
    
        // Only keep the labels that are defined in the `keepLabels` list.
        stage.label_keep {
          values = ["app_kubernetes_io_name","container","instance","job","level","namespace","pod","service_name","service_namespace","deployment_environment","deployment_environment_name","k8s_pod_name","k8s_namespace_name","k8s_deployment_name","k8s_statefulset_name","k8s_daemonset_name","k8s_cronjob_name","k8s_job_name","k8s_node_name"]
        }
    
        forward_to = argument.logs_destinations.value
      }
    }
    pod_logs "feature" {
      logs_destinations = [
        loki.write.loki_noauth.receiver,
        loki.write.loki_basicauth.receiver,
        loki.write.loki_bearer_token.receiver,
      ]
    }
    
    
    
    
    // Destination: prometheus-noauth (prometheus)
    otelcol.exporter.prometheus "prometheus_noauth" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_noauth.receiver]
    }
    
    prometheus.remote_write "prometheus_noauth" {
      endpoint {
        url = "http://prometheus-server.prometheus.svc:9090/api/v1/write"
        headers = {
        }
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-noauth",
      }
    }
    // Destination: prometheus-basicauth (prometheus)
    otelcol.exporter.prometheus "prometheus_basicauth" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_basicauth.receiver]
    }
    
    prometheus.remote_write "prometheus_basicauth" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/metrics/basic/api/v1/write"
        headers = {
        }
        basic_auth {
          username = convert.nonsensitive(remote.kubernetes.secret.prometheus_basicauth.data["username"])
          password = remote.kubernetes.secret.prometheus_basicauth.data["password"]
        }
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-basicauth",
      }
    }
    
    remote.kubernetes.secret "prometheus_basicauth" {
      name      = "prometheus-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-bearer-token (prometheus)
    otelcol.exporter.prometheus "prometheus_bearer_token" {
      add_metric_suffixes = true
      forward_to = [prometheus.remote_write.prometheus_bearer_token.receiver]
    }
    
    prometheus.remote_write "prometheus_bearer_token" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/metrics/bearer/api/v1/write"
        headers = {
        }
        bearer_token = remote.kubernetes.secret.prometheus_bearer_token.data["bearerToken"]
        tls_config {
          insecure_skip_verify = false
        }
        send_native_histograms = false
    
        queue_config {
          capacity = 10000
          min_shards = 1
          max_shards = 50
          max_samples_per_send = 2000
          batch_send_deadline = "5s"
          min_backoff = "30ms"
          max_backoff = "5s"
          retry_on_http_429 = true
          sample_age_limit = "0s"
        }
    
        write_relabel_config {
          source_labels = ["cluster"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "cluster"
        }
        write_relabel_config {
          source_labels = ["k8s_cluster_name"]
          regex = ""
          replacement = "auth-integration-test"
          target_label = "k8s_cluster_name"
        }
      }
    
      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }
      external_labels = {
        destination = "prometheus-bearer-token",
      }
    }
    
    remote.kubernetes.secret "prometheus_bearer_token" {
      name      = "prometheus-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-otlp-noauth (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_noauth" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.attributes "prometheus_otlp_noauth" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-noauth"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_noauth.input]
        logs = [otelcol.processor.transform.prometheus_otlp_noauth.input]
        traces = [otelcol.processor.transform.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_noauth" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_noauth.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_noauth" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_noauth.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_noauth" {
      client {
        endpoint = "http://prometheus-server.prometheus.svc:9090/api/v1/otlp"
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    // Destination: prometheus-otlp-basicauth (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_basicauth" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_basicauth.input]
      }
    }
    otelcol.auth.basic "prometheus_otlp_basicauth" {
      username = convert.nonsensitive(remote.kubernetes.secret.prometheus_otlp_basicauth.data["username"])
      password = remote.kubernetes.secret.prometheus_otlp_basicauth.data["password"]
    }
    
    otelcol.processor.attributes "prometheus_otlp_basicauth" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-basicauth"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
        logs = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
        traces = [otelcol.processor.transform.prometheus_otlp_basicauth.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_basicauth" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_basicauth.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_basicauth" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_basicauth.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_basicauth" {
      client {
        endpoint = "http://nginx-auth-gateway.default.svc/metrics/basic/api/v1/otlp"
        auth = otelcol.auth.basic.prometheus_otlp_basicauth.handler
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    
    remote.kubernetes.secret "prometheus_otlp_basicauth" {
      name      = "prometheus-otlp-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: prometheus-otlp-bearer-token (otlp)
    otelcol.receiver.prometheus "prometheus_otlp_bearer_token" {
      output {
        metrics = [otelcol.processor.attributes.prometheus_otlp_bearer_token.input]
      }
    }
    otelcol.auth.bearer "prometheus_otlp_bearer_token" {
      token = remote.kubernetes.secret.prometheus_otlp_bearer_token.data["bearerToken"]
    }
    
    otelcol.processor.attributes "prometheus_otlp_bearer_token" {
      action {
        key = "destination"
        action = "upsert"
        value = "prometheus-otlp-bearer-token"
      }
      output {
        metrics = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
        logs = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
        traces = [otelcol.processor.transform.prometheus_otlp_bearer_token.input]
      }
    }
    
    otelcol.processor.transform "prometheus_otlp_bearer_token" {
      error_mode = "ignore"
      metric_statements {
        context = "resource"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      metric_statements {
        context = "datapoint"
        statements = [
          `set(attributes["cluster"], "auth-integration-test")`,
          `set(attributes["k8s.cluster.name"], "auth-integration-test")`,
        ]
      }
    
      output {
        metrics = [otelcol.processor.batch.prometheus_otlp_bearer_token.input]
      }
    }
    
    otelcol.processor.batch "prometheus_otlp_bearer_token" {
      timeout = "2s"
      send_batch_size = 8192
      send_batch_max_size = 0
    
      output {
        metrics = [otelcol.exporter.otlphttp.prometheus_otlp_bearer_token.input]
      }
    }
    otelcol.exporter.otlphttp "prometheus_otlp_bearer_token" {
      client {
        endpoint = "http://nginx-auth-gateway.default.svc/metrics/bearer/api/v1/otlp"
        auth = otelcol.auth.bearer.prometheus_otlp_bearer_token.handler
        tls {
          insecure = false
          insecure_skip_verify = false
        }
      }
    
      retry_on_failure {
        enabled = true
        initial_interval = "5s"
        max_interval = "30s"
        max_elapsed_time = "5m"
      }
    }
    
    remote.kubernetes.secret "prometheus_otlp_bearer_token" {
      name      = "prometheus-otlp-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-noauth (loki)
    otelcol.exporter.loki "loki_noauth" {
      forward_to = [loki.write.loki_noauth.receiver]
    }
    
    loki.write "loki_noauth" {
      endpoint {
        url = "http://loki.loki.svc:3100/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_noauth.data["tenantId"])
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-noauth",
      }
    }
    
    remote.kubernetes.secret "loki_noauth" {
      name      = "loki-noauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-basicauth (loki)
    otelcol.exporter.loki "loki_basicauth" {
      forward_to = [loki.write.loki_basicauth.receiver]
    }
    
    loki.write "loki_basicauth" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/logs/basic/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_basicauth.data["tenantId"])
        basic_auth {
          username = convert.nonsensitive(remote.kubernetes.secret.loki_basicauth.data["username"])
          password = remote.kubernetes.secret.loki_basicauth.data["password"]
        }
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-basicauth",
      }
    }
    
    remote.kubernetes.secret "loki_basicauth" {
      name      = "loki-basicauth-k8smon-k8s-monitoring"
      namespace = "default"
    }
    
    // Destination: loki-bearer-token (loki)
    otelcol.exporter.loki "loki_bearer_token" {
      forward_to = [loki.write.loki_bearer_token.receiver]
    }
    
    loki.write "loki_bearer_token" {
      endpoint {
        url = "http://nginx-auth-gateway.default.svc/logs/bearer/loki/api/v1/push"
        tenant_id = convert.nonsensitive(remote.kubernetes.secret.loki_bearer_token.data["tenantId"])
        bearer_token = remote.kubernetes.secret.loki_bearer_token.data["bearerToken"]
        tls_config {
          insecure_skip_verify = false
        }
        min_backoff_period = "500ms"
        max_backoff_period = "5m"
        max_backoff_retries = "10"
      }
      external_labels = {
        "cluster" = "auth-integration-test",
        "k8s_cluster_name" = "auth-integration-test",
        destination = "loki-bearer-token",
      }
    }
    
    remote.kubernetes.secret "loki_bearer_token" {
      name      = "loki-bearer-token-k8smon-k8s-monitoring"
      namespace = "default"
    }
---
# Source: k8s-monitoring/charts/alloy-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-alloy-logs
  labels:
    helm.sh/chart: alloy-logs-0.12.5
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
  # needed for otelcol.processor.k8sattributes
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-alloy-metrics
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
  # needed for otelcol.processor.k8sattributes
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
---
# Source: k8s-monitoring/charts/alloy-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-alloy-logs
  labels:
    helm.sh/chart: alloy-logs-0.12.5
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-alloy-logs
subjects:
  - kind: ServiceAccount
    name: k8smon-alloy-logs
    namespace: default
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-alloy-metrics
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-alloy-metrics
subjects:
  - kind: ServiceAccount
    name: k8smon-alloy-metrics
    namespace: default
---
# Source: k8s-monitoring/charts/alloy-logs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-alloy-logs
  namespace: default
  labels:
    helm.sh/chart: alloy-logs-0.12.5
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: networking
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
  internalTrafficPolicy: Cluster
  ports:
    - name: http-metrics
      port: 12345
      targetPort: 12345
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/cluster_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-alloy-metrics-cluster
  namespace: default
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: networking
spec:
  type: ClusterIP
  clusterIP: 'None'
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
  ports:
    # Do not include the -metrics suffix in the port name, otherwise metrics
    # can be double-collected with the non-headless Service if it's also
    # enabled.
    #
    # This service should only be used for clustering, and not metric
    # collection.
    - name: http
      port: 12345
      targetPort: 12345
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-alloy-metrics
  namespace: default
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: networking
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
  internalTrafficPolicy: Cluster
  ports:
    - name: http-metrics
      port: 12345
      targetPort: 12345
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/alloy-logs/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-alloy-logs
  namespace: default
  labels:
    helm.sh/chart: alloy-logs-0.12.5
    app.kubernetes.io/name: alloy-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy-logs
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: alloy
        k8s.grafana.com/logs.job: integrations/alloy
      labels:
        app.kubernetes.io/name: alloy-logs
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-alloy-logs
      containers:
        - name: alloy
          image: docker.io/grafana/alloy:v1.7.4
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/tmp/alloy
            - --server.http.listen-addr=0.0.0.0:12345
            - --server.http.ui-path-prefix=/
            - --stability.level=generally-available
          env:
            - name: ALLOY_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 12345
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 12345
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: dockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
        - name: config-reloader
          image: ghcr.io/jimmidyson/configmap-reload:v0.14.0
          args:
            - --volume-dir=/etc/alloy
            - --webhook-url=http://localhost:12345/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: k8smon-alloy-logs
        - name: varlog
          hostPath:
            path: /var/log
        - name: dockercontainers
          hostPath:
            path: /var/lib/docker/containers
---
# Source: k8s-monitoring/charts/alloy-metrics/templates/controllers/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k8smon-alloy-metrics
  namespace: default
  labels:
    helm.sh/chart: alloy-metrics-0.12.5
    app.kubernetes.io/name: alloy-metrics
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.7.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
spec:
  replicas: 1
  podManagementPolicy: Parallel
  minReadySeconds: 10
  serviceName: k8smon-alloy-metrics
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy-metrics
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: alloy
        k8s.grafana.com/logs.job: integrations/alloy
      labels:
        app.kubernetes.io/name: alloy-metrics
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-alloy-metrics
      containers:
        - name: alloy
          image: docker.io/grafana/alloy:v1.7.4
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/tmp/alloy
            - --server.http.listen-addr=0.0.0.0:12345
            - --server.http.ui-path-prefix=/
            - --cluster.enabled=true
            - --cluster.join-addresses=k8smon-alloy-metrics-cluster
            - --cluster.name=alloy-metrics
            - --stability.level=generally-available
          env:
            - name: ALLOY_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 12345
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 12345
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
        - name: config-reloader
          image: ghcr.io/jimmidyson/configmap-reload:v0.14.0
          args:
            - --volume-dir=/etc/alloy
            - --webhook-url=http://localhost:12345/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: k8smon-alloy-metrics
