---
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  url: https://github.com/grafana/k8s-monitoring-helm
  ref:
    branch: main
  ignore: |
    /*
    !/charts/k8s-monitoring-test
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  chart:
    spec:
      chart: charts/k8s-monitoring-test
      sourceRef:
        kind: GitRepository
        name: k8s-monitoring-test
      interval: 1m
  dependsOn:
    - name: loki
      namespace: loki
    - name: prometheus
      namespace: prometheus
    - name: tempo
      namespace: tempo
  values:
    pod:
      extraAnnotations:
        sidecar.istio.io/inject: "false"
    tests:
      - env:
          CLUSTER: istio-service-mesh-test
          PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
          PROMETHEUS_USER: promuser
          PROMETHEUS_PASS: prometheuspassword
          LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
          LOKI_TENANTID: 1
          LOKI_USER: loki
          LOKI_PASS: lokipassword
          TEMPO_URL: http://tempo.tempo.svc:3100/api/search
        queries:
          # Cluster metrics
          - query: kubernetes_build_info{cluster="$CLUSTER", job="integrations/kubernetes/kubelet"}
            type: promql
          - query: node_cpu_usage_seconds_total{cluster="$CLUSTER", job="integrations/kubernetes/resources"}
            type: promql
          - query: machine_memory_bytes{cluster="$CLUSTER", job="integrations/kubernetes/cadvisor"}
            type: promql
          - query: count(kube_node_info{cluster="$CLUSTER", job="integrations/kubernetes/kube-state-metrics"})
            type: promql
          - query: node_exporter_build_info{cluster="$CLUSTER", job="integrations/node_exporter"}
            type: promql

          # Istio metrics (sourced by annotations)
          - query: istio_requests_total{cluster="$CLUSTER"}
            type: promql

          # Cluster events
          - query: count_over_time({cluster="$CLUSTER", job="integrations/kubernetes/eventhandler"}[1h])
            type: logql

          # Pod logs
          - query: count_over_time({cluster="$CLUSTER", job!="integrations/kubernetes/eventhandler"}[1h])
            type: logql

          # DPM check (ensures that clustering is working)
          - query: avg(count_over_time(scrape_samples_scraped{cluster="$CLUSTER"}[1m]))
            type: promql
            expect:
              value: 1
              operator: ==

          # Alloy Receiver works
          - query: "{resource.cluster=\"$CLUSTER\" && resource.k8s.deployment.name=\"alloy-app\"}"
            type: traceql

          # Host Info connector
          - query: traces_host_info{k8s_cluster_name="$CLUSTER", grafana_host_id="$CLUSTER-control-plane"}
            type: promql
