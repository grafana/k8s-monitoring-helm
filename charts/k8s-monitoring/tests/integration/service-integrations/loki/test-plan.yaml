---
apiVersion: helm-chart-toolbox.grafana.com/v1
kind: TestPlan
name: loki-integration-test

subject:
  releaseName: k8smon
  path: ../../../..
  valuesFile: values.yaml

cluster:
  type: kind

dependencies:
  - preset: prometheus
    overrides:
      serverFiles:
        recording_rules.yml:
          groups:
            - name: loki_rules
              rules:
                - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job))
                  record: cluster_job:loki_request_duration_seconds:99quantile
                - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job))
                  record: cluster_job:loki_request_duration_seconds:50quantile
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job) / sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job)
                  record: cluster_job:loki_request_duration_seconds:avg
                - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job)
                  record: cluster_job:loki_request_duration_seconds_bucket:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job)
                  record: cluster_job:loki_request_duration_seconds_sum:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job)
                  record: cluster_job:loki_request_duration_seconds_count:sum_rate
                - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))
                  record: cluster_job_route:loki_request_duration_seconds:99quantile
                - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job, route))
                  record: cluster_job_route:loki_request_duration_seconds:50quantile
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job, route)
                  record: cluster_job_route:loki_request_duration_seconds:avg
                - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, job, route)
                  record: cluster_job_route:loki_request_duration_seconds_bucket:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, job, route)
                  record: cluster_job_route:loki_request_duration_seconds_sum:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, job, route)
                  record: cluster_job_route:loki_request_duration_seconds_count:sum_rate
                - expr: histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))
                  record: cluster_namespace_job_route:loki_request_duration_seconds:99quantile
                - expr: histogram_quantile(0.50, sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route))
                  record: cluster_namespace_job_route:loki_request_duration_seconds:50quantile
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)
                  record: cluster_namespace_job_route:loki_request_duration_seconds:avg
                - expr: sum(rate(loki_request_duration_seconds_bucket[1m])) by (le, cluster, namespace, job, route)
                  record: cluster_namespace_job_route:loki_request_duration_seconds_bucket:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_sum[1m])) by (cluster, namespace, job, route)
                  record: cluster_namespace_job_route:loki_request_duration_seconds_sum:sum_rate
                - expr: sum(rate(loki_request_duration_seconds_count[1m])) by (cluster, namespace, job, route)
                  record: cluster_namespace_job_route:loki_request_duration_seconds_count:sum_rate
  - preset: loki
  - preset: grafana
    overrides:
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus-server.prometheus.svc:9090
              isDefault: true
            - name: Loki
              type: loki
              url: http://loki-gateway.loki.svc:8080
              basicAuth: true
              basicAuthUser: loki
              jsonData:
                httpHeaderName1: X-Scope-OrgID
              secureJsonData:
                basicAuthPassword: lokipassword
                httpHeaderValue1: "1"
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          loki-bloom-build:
            url: http://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-bloom-build.json
          loki-bloom-gateway:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-bloom-gateway.json
          loki-chunks:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-chunks.json
          loki-deletion:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-deletion.json
          loki-logs:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-logs.json
          loki-mixin-recording-rules:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-mixin-recording-rules.json
          loki-operational:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-operational.json
          loki-reads:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-reads.json
          loki-reads-resources:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-reads-resources.json
          loki-retention:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-retention.json
          loki-thanos-object-storage:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-thanos-object-storage.json
          loki-writes:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-writes.json
          loki-writes-resources:
            url: https://raw.githubusercontent.com/grafana/loki/refs/heads/main/production/loki-mixin-compiled/dashboards/loki-writes-resources.json
tests:
  - type: query-test
    values:
      tests:
        - env:
            CLUSTER: loki-integration-test
            NAMESPACE: loki
            PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
            LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
            LOKI_TENANTID: 1
            LOKI_USER: loki
            LOKI_PASS: lokipassword
          queries:
            # Loki metrics
            - query: loki_build_info{cluster="$CLUSTER", namespace="$NAMESPACE"}

            # Loki Logs
            - query: count_over_time({cluster="$CLUSTER", namespace="$NAMESPACE"}[1h])
              type: logql

            # DPM check
            - query: avg(count_over_time(scrape_samples_scraped{cluster="$CLUSTER"}[1m]))
              type: promql
              expect:
                value: 1
                operator: ==
