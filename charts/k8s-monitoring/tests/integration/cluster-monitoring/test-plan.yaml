---
apiVersion: helm-chart-toolbox.grafana.com/v1
kind: TestPlan
name: cluster-monitoring-feature

subject:
  releaseName: k8smon
  path: ../../..
  valuesFile: values.yaml

cluster:
  type: kind

dependencies:
  - preset: prometheus
  - preset: loki
  - preset: grafana
    overrides:
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus-server.prometheus.svc:9090
              isDefault: true
            - name: Loki
              type: loki
              url: http://loki-gateway.loki.svc:8080
              basicAuth: true
              basicAuthUser: loki
              jsonData:
                httpHeaderName1: X-Scope-OrgID
              secureJsonData:
                basicAuthPassword: lokipassword
                httpHeaderValue1: "1"

tests:
  - type: query-test
    values:
      tests:
        - env:
            CLUSTER: cluster-monitoring-feature-test
            PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
            PROMETHEUS_USER: promuser
            PROMETHEUS_PASS: prometheuspassword
            LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
            LOKI_TENANTID: 1
            LOKI_USER: loki
            LOKI_PASS: lokipassword
          queries:
            # Self reporting metrics
            - query: grafana_kubernetes_monitoring_build_info{cluster="$CLUSTER"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="clusterMetrics"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="clusterEvents"}
              type: promql
            - query: grafana_kubernetes_monitoring_feature_info{cluster="$CLUSTER", feature="podLogs", method="volumes"}
              type: promql

            # Cluster metrics
            - query: kubernetes_build_info{cluster="$CLUSTER", job="integrations/kubernetes/kubelet"}
              type: promql
            - query: node_cpu_usage_seconds_total{cluster="$CLUSTER", job="integrations/kubernetes/resources"}
              type: promql
            - query: machine_memory_bytes{cluster="$CLUSTER", job="integrations/kubernetes/cadvisor"}
              type: promql
            - query: count(kube_node_info{cluster="$CLUSTER", job="integrations/kubernetes/kube-state-metrics"})
              type: promql
              expect:
                value: 1
            - query: kube_node_labels{cluster="$CLUSTER"}
              type: promql
            - query: node_exporter_build_info{cluster="$CLUSTER", job="integrations/node_exporter"}
              type: promql
            - query: kepler_container_joules_total{cluster="$CLUSTER", job="integrations/kepler"}
              type: promql
            - query: opencost_build_info{cluster="$CLUSTER", job="integrations/opencost"}
              type: promql

            # Cluster events
            - query: count_over_time({cluster="$CLUSTER", job="integrations/kubernetes/eventhandler"}[1h])
              type: logql

            # Pod logs
            - query: count_over_time({cluster="$CLUSTER", job!="integrations/kubernetes/eventhandler"}[1h])
              type: logql

            # DPM check
            - query: avg(count_over_time(scrape_samples_scraped{cluster="$CLUSTER"}[1m]))
              type: promql
              expect:
                value: 1
                operator: ==
