---
# This values file will test the following features:
# * Pod & service annotation autodiscovery
# * MySQL integration
# * ServiceMonitor detection, scraping, and processing
#
cluster:
  name: ci-integrations-cluster

externalServices:
  prometheus:
    hostKey: prom-host
    basicAuth:
      usernameKey: prom-username
      passwordKey: prom-password
    queryEndpoint: /api/v1/query
    writeEndpoint: /api/v1/write
    secret:
      create: false
      name: combined
      namespace: monitoring
    tls:
      insecure_skip_verify: true
  loki:
    hostKey: loki-host
    tenantIdKey: loki-tenantId
    basicAuth:
      usernameKey: loki-username
      passwordKey: loki-password
    secret:
      create: false
      name: combined
      namespace: monitoring

metrics:
  serviceMonitors:
    extraMetricRelabelingRules: |-
      rule {
        source_labels = ["__name__"]
        action = "keep"
        regex = "loki.*"
      }
      rule {
        target_label = "source"
        action = "replace"
        replacement = "service-monitor"
      }
  cost:
    enabled: false

extraConfig: |
  remote.kubernetes.configmap "mysql_config" {
    name = "mysql-monitoring"
    namespace = "mysql"
  }

  import.string "mysql" {
    content = remote.kubernetes.configmap.mysql_config.data["metrics.alloy"]
  }

  mysql.metrics "primary" {
    host = "mysql.mysql.svc.cluster.local"
    instance = "primary"
    namespace = "mysql"
    secret_name = "mysql"
    username = "root"
    password_key = "mysql-root-password"
    all_services = discovery.kubernetes.services.targets
    metrics_destination = prometheus.relabel.metrics_service.receiver
  }

logs:
  extraConfig: |
    remote.kubernetes.configmap "mysql_config" {
      name = "mysql-monitoring"
      namespace = "mysql"
    }

    import.string "mysql" {
      content = remote.kubernetes.configmap.mysql_config.data["logs.alloy"]
    }

    mysql.logs "primary" {
      instance = "primary"
      all_pods = discovery.relabel.pod_logs.output
      logs_destination = loki.process.logs_service.receiver
    }

test:
  attempts: 20
  extraQueries:
    # Check for CertManager metrics, discovered by service annotations
    - query: "certmanager_clock_time_seconds{cluster=\"ci-integrations-cluster\", job=\"integrations/cert-manager\"}"
      type: promql

    # Check for Prometheus metrics, discovered by https pod annotations
    - query: "prometheus_build_info{job=\"integrations/prometheus\"}"
      type: promql

    # Check for MySQL metrics, discovered by the module loaded above in .extraConfig
    - query: "mysqld_exporter_build_info{cluster=\"ci-integrations-cluster\"}"
      type: promql

    # Check for Loki metrics, discovered by its ServiceMonitor object
    - query: "loki_build_info{source=\"service-monitor\"}"
      type: promql

    # Check for MySQL logs, discovered by the module loaded above in .logs.extraConfig
    - query: "count_over_time({cluster=\"ci-integrations-cluster\", job=\"integrations/mysql\"}[1h])"
      type: logql

    # Cluster events still work, too
    - query: "count_over_time({cluster=\"ci-integrations-cluster\", job=\"integrations/kubernetes/eventhandler\"}[1h])"
      type: logql

    # Regular pod logs still work, too (checking the Loki pod <namespace>/<pod_name>)
    - query: "count_over_time({cluster=\"ci-integrations-cluster\", job=\"loki/loki\"}[1h])"
      type: logql

    # DPM check
    - query: "avg(count_over_time(scrape_samples_scraped{cluster=\"ci-integrations-cluster\"}[1m]))"
      type: promql
      expect:
        value: 1
        operator: ==

opencost:
  enabled: false

alloy:
  controller:
    replicas: 2

# Prometheus Operator CRDs are pre-installed in the CI environment
prometheus-operator-crds:
  enabled: false
