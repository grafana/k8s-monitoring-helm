#
# This values file will test the following features:
# * Sending metrics, logs, and traces via OTLP HTTP
# * Access kubelet and cadvisor metrics using the proxy
# * Pod logs gathered via K8s API and PodLogs objects
# * Filtering pod logs by namespace
# * Custom test queries, including LogQL and TraceQL queries
#
cluster:
  name: ci-test-cluster-2

externalServices:
  prometheus:
    host: https://prometheus-server.prometheus.svc:9090
    basicAuth:
      username: promuser
      password: prometheuspassword
    queryEndpoint: /api/v1/query
    writeEndpoint: /api/v1/otlp
    protocol: otlphttp
    tls:
      insecure_skip_verify: true
    externalLabels:
      color: blue
  loki:
    host: http://loki-otlp-interface.loki.svc:4318
    tenantId: 1
    protocol: otlphttp
    writeEndpoint: /
    basicAuth:
      username: loki
      password: lokipassword
  tempo:
    host: http://tempo.tempo.svc:4318
    authMode: none
    protocol: otlphttp
    tlsOptions: |-
      insecure             = true
      insecure_skip_verify = true

metrics:
  kubelet:
    nodeAddressFormat: proxy
  cadvisor:
    nodeAddressFormat: proxy

  cost:
    enabled: false

logs:
  pod_logs:
    gatherMethod: api
    namespaces:
      - default
      - loki
      - prometheus
      - tempo
      - monitoring
  podLogsObjects:
    enabled: true
    namespaces: [grafana]
    extraStageBlocks: |
      stage.static_labels {
        values = {
          source = "podlogs_object",
        }
      }

traces:
  enabled: true

receivers:
  prometheus:
    enabled: true

extraConfig: |-
  tracing {
    sampling_fraction = 0.1
    write_to = [otelcol.processor.k8sattributes.default.input]
  }

test:
  attempts: 20
  extraQueries:
  # Check that the external label is properly being set
  - query: "count(kube_pod_info{cluster=\"ci-test-cluster-2\", color=\"blue\"})"
    type: promql
    expect:
      value: 1
      operator: "<="  # There's gotta be at least one pod

  # Check for cluster events
  - query: "count_over_time({cluster=\"ci-test-cluster-2\", job=\"integrations/kubernetes/eventhandler\"}[1h])"
    type: logql

    # Check for pod logs (gathered via API)
  - query: "count_over_time({cluster=\"ci-test-cluster-2\", job!=\"integrations/kubernetes/eventhandler\"}[1h])"
    type: logql

    # Check for pod logs (gathered via PodLogs)
  - query: "count_over_time({cluster=\"ci-test-cluster-2\", job=\"grafana/test-podlogs-object\", source=\"podlogs_object\"}[1h])"
    type: logql

    # Check for traces
  - query: "{.k8s.cluster.name=\"ci-test-cluster-2\"}"
    type: traceql

  # These checks for metrics and traces that are being sent directly to this alloy via the receivers
  - query: "alloy_build_info{cluster=\"from-the-other-alloy\"}"
    type: promql
  - query: "{.k8s.cluster.name=\"from-the-other-alloy\"}"
    type: traceql

  # DPM check
  - query: "avg(count_over_time(scrape_samples_scraped{cluster=~\"ci-test-cluster-2|from-the-other-alloy\"}[1m]))"
    type: promql
    expect:
      value: 1
      operator: ==

  # hostinfo connector check
  - query: "traces_host_info"
    type: promql

  envOverrides:
    LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
    TEMPO_URL: http://tempo.tempo.svc:3100/api/search

opencost:
  opencost:
    exporter:
      extraEnv:
        INSECURE_SKIP_VERIFY: "true"
    prometheus:
      external:
        url: https://prometheus-server.prometheus.svc.cluster.local:9090

alloy:
  controller:
    replicas: 2
    podLabels:
      capabilities: telemetry-receiver

alloy-logs:
  alloy:
    clustering: {enabled: true}
    mounts:
      varlog: false
  controller:
    replicas: 2
    type: deployment

# Prometheus Operator CRDs are pre-installed in the CI environment
prometheus-operator-crds:
  enabled: false
