HAS_HELM_DOCS := $(shell command -v helm-docs;)
HAS_HELM_UNITTEST := $(shell helm plugin list | grep unittest 2> /dev/null)
HAS_SHELLSPEC := $(shell command -v shellspec;)

CHART_TEMPLATE_FILES = $(shell find templates -name "*.tpl")
CHART_YAML_FILES = $(shell find templates -name "*.yaml")

FEATURE_CHARTS = $(shell ls --color=never charts | grep feature-)

SCHEMA_MODS_JSON_FILES = $(shell find schema-mods -name "*.json")
SCHEMA_MODS_JQ_FILES = $(shell find schema-mods -name "*.jq")

ALLOY_OPERATOR_VERSION := $(shell yq '.dependencies[] | select(.name == "alloy-operator") | .version' Chart.yaml)
collectors/upstream/alloy-values.yaml: charts/alloy-operator-$(ALLOY_OPERATOR_VERSION).tgz
	tar xzf $< -C collectors/upstream/ --strip-components=1 alloy-operator/alloy-values.yaml

COLLECTOR_VALUES_FILES = $(shell find collectors -maxdepth 1 -name "*-values.yaml" | sort -u)
COLLECTOR_DOCS_FILES = $(COLLECTOR_VALUES_FILES:collectors/%-values.yaml=./docs/collectors/%.md)
COLLECTOR_SCHEMA_FILES = $(COLLECTOR_VALUES_FILES:collectors/%-values.yaml=./schema-mods/definitions/%-collector.schema.json)

DESTINATION_VALUES_FILES = $(shell find destinations -name "*-values.yaml" | sort -u)
DESTINATION_DOCS_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./docs/destinations/%.md)
DESTINATION_SCHEMA_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./schema-mods/definitions/%-destination.schema.json)

.SECONDEXPANSION:
docs/collectors/%.md: collectors/%-values.yaml $$(wildcard docs/collectors/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/collectors\/\([-a-z]*\)-values.yaml/\1/') collector

docs/destinations/%.md: destinations/%-values.yaml $$(wildcard docs/destinations/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') destination

schema-mods/definitions/%-collector.schema.json: collectors/%-values.yaml
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/collectors\/\([-a-z]*\)-values.yaml/\1/') collector

schema-mods/definitions/%-destination.schema.json: destinations/%-values.yaml
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') destination

NUMBER_OF_DESTINATION_VALUES_FILES := $(words $(DESTINATION_VALUES_FILES))
schema-mods/destination-list.json: $(DESTINATION_VALUES_FILES)
	@echo '{' > $@
	@echo '  "definitions": {' >> $@
	@echo '    "destination-list": {' >> $@
	@echo '      "type": "array",' >> $@
	@echo '      "items": {' >> $@
	@echo '        "anyOf": [' >> $@
	@echo '          { "$$ref": "#/definitions/invalid-destination"},' >> $@
	@count=0; \
	for file in $(DESTINATION_VALUES_FILES); do \
		count=$$((count + 1)); \
		if [ $$count -eq $(NUMBER_OF_DESTINATION_VALUES_FILES) ]; then \
			echo '          { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"}' >> $@; \
		else \
			echo '          { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"},' >> $@; \
		fi; \
	done
	@echo '        ]' >> $@
	@echo '      }' >> $@
	@echo '    }' >> $@
	@echo '  }' >> $@
	@echo '}' >> $@

templates/destinations/_destination_types.tpl: $(DESTINATION_VALUES_FILES)
	echo '{{/* Do not edit this file. It is generated by the Makefile */}}' > $@
	echo '{{- define "destinations.types" -}}' >> $@
	for file in $(DESTINATION_VALUES_FILES); do \
		echo - $$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') >> $@; \
	done
	echo '{{- end -}}' >> $@

values.schema.json: values.yaml $(COLLECTOR_SCHEMA_FILES) $(DESTINATION_SCHEMA_FILES) $(SCHEMA_MODS_JSON_FILES) $(SCHEMA_MODS_JQ_FILES) schema-mods/destination-list.json
	../../scripts/schema-gen.sh .

README.md: README.md.gotmpl values.yaml Chart.yaml
ifdef HAS_HELM_DOCS
	helm-docs --chart-to-generate .
else
	docker run --rm --volume "$(shell pwd):/helm-docs" -u $(shell id -u) jnorwood/helm-docs:latest
endif

# TODO: Extract the Alloy images from Alloy Operator somehow and add them here.
#ALLOY_IMAGE = $(shell yq eval 'select(.kind=="StatefulSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-metrics") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
ALLOY_OPERATOR_IMAGE = $(shell yq eval 'select(.kind=="Deployment" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-operator") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
BEYLA_IMAGE = $(shell yq eval 'select(.kind=="DaemonSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-beyla") | .spec.template.spec.containers[0].image' docs/examples/features/auto-instrumentation/beyla-metrics/output.yaml)
#CONFIG_RELOADER_IMAGE = $(shell yq eval 'select(.kind=="StatefulSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-metrics") | .spec.template.spec.containers[1].image' docs/examples/features/cluster-metrics/default/output.yaml)
KEPLER_IMAGE = $(shell yq eval 'select(.kind=="DaemonSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-kepler") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
KUBE_STATE_METRICS_IMAGE = $(shell yq eval 'select(.kind=="Deployment" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-kube-state-metrics") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
NODE_EXPORTER_IMAGE = $(shell yq eval 'select(.kind=="DaemonSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-node-exporter") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
OPENCOST_EXPORTER_IMAGE = $(shell yq eval 'select(.kind=="Deployment" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-opencost") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
WINDOWS_EXPORTER_IMAGE = $(shell yq eval 'select(.kind=="DaemonSet" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-windows-exporter") | .spec.template.spec.containers[0].image' docs/examples/features/cluster-metrics/default/output.yaml)
docs/Images.md: Chart.yaml docs/examples/features/cluster-metrics/default/output.yaml docs/examples/features/auto-instrumentation/beyla-metrics/output.yaml
	echo "# Images" > $@
	echo "" >> $@
	echo "The following is the list of images potentially used in the $(shell yq eval '.version' Chart.yaml) version of the $(shell yq eval '.name' Chart.yaml) Helm chart:" >> $@
	echo "" >> $@
	echo "| Image Name | Repository | Feature |" >> $@
	echo "| ---------- | ---------- | ------- |" >> $@
	echo "| Alloy Operator | $(ALLOY_OPERATOR_IMAGE) | Always used. Deploys and manages Grafana Alloy collector instances. |" >> $@
#	echo "| Alloy | $(ALLOY_IMAGE) | Always used. The telemetry data collector. |" >> $@
	echo "| Beyla | $(BEYLA_IMAGE) | Automatically instruments apps on the cluster, generating metrics and traces. Enabled with \`autoInstrumentation.beyla.enabled=true\`. |" >> $@
	#echo "| Config Reloader | $(CONFIG_RELOADER_IMAGE) | Alloy sidecar that reloads the Alloy configuration upon changes. Enabled with \`alloy-____.configReloader.enabled=true\`. |" >> $@
	echo "| Kepler | $(KEPLER_IMAGE) | Gathers energy metrics for Kubernetes objects. Enabled with \`clusterMetrics.kepler.enabled=true\`. |" >> $@
	echo "| kube-state-metrics | $(KUBE_STATE_METRICS_IMAGE) | Gathers Kubernetes cluster object metrics. Enabled with \`clusterMetrics.kube-state-metrics.deploy=true\`. |" >> $@
	echo "| Node Exporter | $(NODE_EXPORTER_IMAGE) | Gathers Kubernetes cluster node metrics. Enabled with \`clusterMetrics.node-exporter.deploy=true\`. |" >> $@
	echo "| OpenCost | $(OPENCOST_EXPORTER_IMAGE) | Gathers cost metrics for Kubernetes objects. Enabled with \`clusterMetrics.opencost.enabled=true\`. |" >> $@
	echo "| Windows Exporter | $(WINDOWS_EXPORTER_IMAGE) | Gathers Kubernetes cluster node metrics for Windows nodes. Enabled with \`clusterMetrics.windows-exporter.deploy=true\`. |" >> $@

# Example targets
EXAMPLE_RELEASE_NAME=k8smon
EXAMPLE_VALUES_FILES := $(shell find docs/examples -name values.yaml)
EXAMPLE_OUTPUT_FILES := $(EXAMPLE_VALUES_FILES:values.yaml=output.yaml)
EXAMPLE_ALLOY_FILES = $(foreach file,$(EXAMPLE_VALUES_FILES),$(call alloy_configs, $(file)))
EXAMPLE_README_FILES := $(EXAMPLE_VALUES_FILES:values.yaml=README.md)

NON_RENDERED_INTEGRATION_TEST_VALUES_FILES = $(shell find tests/integration -name .no-render | sed 's/.no-render/values.yaml/')
INTEGRATION_TEST_VALUES_FILES = $(filter-out $(NON_RENDERED_INTEGRATION_TEST_VALUES_FILES),$(shell find tests/integration -name values.yaml))
INTEGRATION_TEST_OUTPUT_FILES = $(INTEGRATION_TEST_VALUES_FILES:values.yaml=.rendered/output.yaml)
INTEGRATION_TEST_ALLOY_INSTANCE_FILES = $(foreach file,$(INTEGRATION_TEST_OUTPUT_FILES),$(call alloy_instances, $(file)))

NON_RENDERED_PLATFORM_TEST_VALUES_FILES := $(shell find tests/platform -name .no-render | sed 's/.no-render/values.yaml/')
PLATFORM_TEST_VALUES_FILES := $(filter-out $(NON_RENDERED_PLATFORM_TEST_VALUES_FILES),$(shell find tests/platform -name values.yaml))
PLATFORM_TEST_OUTPUT_FILES := $(PLATFORM_TEST_VALUES_FILES:values.yaml=.rendered/output.yaml)

alloy_configs = $(shell \
	DIR="$(shell dirname $(1))/" yq e 'with_entries(select(.key == "alloy-*" and .value.enabled == true)) | to_entries | env(DIR) + .[].key + ".alloy"' $(1) \
)
alloy_instances = $(shell \
	DIR="$(shell dirname $(1))/" yq e 'with_entries(select(.key == "alloy-*" and .value.enabled == true)) | to_entries | env(DIR) + .[].key + ".yaml"' $(1) \
)

%/output.yaml: %/values.yaml Chart.yaml Chart.lock values.yaml values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_VALUES_FILES) $(CHART_TEMPLATE_FILES) $(CHART_YAML_FILES)
	helm template $(EXAMPLE_RELEASE_NAME) . -f $< > $@

%/.rendered/output.yaml: %/values.yaml Chart.yaml Chart.lock values.yaml values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_VALUES_FILES) $(CHART_TEMPLATE_FILES) $(CHART_YAML_FILES)
	mkdir -p $(dir $@)
	helm template $(EXAMPLE_RELEASE_NAME) . -f $< > $@

ALLOY_INSTANCES := logs metrics receiver singleton profiles
define alloy_files
%/alloy-$(1).alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-$(1)") | .data["config.alloy"]' $$< > $$@
%/alloy-$(1).yaml: %/output.yaml
	yq 'select(.kind=="Alloy" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-$(1)") | .' $$< > $$@
endef
$(foreach instance,$(ALLOY_INSTANCES),$(eval $(call alloy_files,$(instance))))

%/README.md: %/values.yaml $$(wildcard %/description.txt)
	echo '<!--' > $@
	echo '(NOTE: Do not edit README.md directly. It is a generated file!)' >> $@
	echo '(      To make changes, please modify values.yaml or description.txt and run `make examples`)' >> $@
	echo '-->' >> $@

	if [ -f $$(dirname $@)/description.txt ]; then \
		cat $$(dirname $@)/description.txt >> $@; \
	else \
		echo $< | sed -e "s/docs\/examples\//# Example: /" >> $@; \
	fi
	echo '' >> $@
	echo '## Values' >> $@
	echo '' >> $@
	echo '```yaml' >> $@
	cat $< >> $@
	echo '```' >> $@

.PHONY: examples
examples: $(EXAMPLE_OUTPUT_FILES) $(EXAMPLE_ALLOY_FILES) $(EXAMPLE_README_FILES) $(INTEGRATION_TEST_OUTPUT_FILES) $(PLATFORM_TEST_OUTPUT_FILES)

.PHONY: example-checks
example-checks: $(EXAMPLE_OUTPUT_FILES)
ifdef HAS_SHELLSPEC
	shellspec -c tests/example-checks
else
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/src shellspec/shellspec -c /src/tests/example-checks -s /bin/sh
endif


ALLOY_OPERATOR_VERSION=$(shell yq '.dependencies[] | select(.name == "alloy-operator") | .version' Chart.yaml)
.PHONY: misc-checks
misc-checks: Chart.yaml
ifdef HAS_SHELLSPEC
	ALLOY_OPERATOR_VERSION=$(ALLOY_OPERATOR_VERSION) shellspec -c tests/misc-checks
else
	docker run --platform linux/amd64 --rm --env ALLOY_OPERATOR_VERSION=$(ALLOY_OPERATOR_VERSION) --volume $(shell pwd):/src shellspec/shellspec -c /src/tests/misc-checks -s /bin/sh
endif

.PHONY: integration-test-checks
integration-test-checks: $(INTEGRATION_TEST_OUTPUT_FILES)
.PHONY: platform-test-checks
platform-test-checks: $(PLATFORM_TEST_OUTPUT_FILES)

.PHONY: clean
clean: clean-examples
	rm -f README.md docs/Images.md values.schema.json templates/destinations/_destination_types.tpl schema-mods/destination-list.json
	rm -f $(COLLECTOR_SCHEMA_FILES) $(COLLECTOR_DOCS_FILES)
	rm -f $(DESTINATION_SCHEMA_FILES) $(DESTINATION_DOCS_FILES)
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C charts/$$chart clean; \
	done

.PHONY: clean-examples
clean-examples:
	rm -f $(EXAMPLE_OUTPUT_FILES) $(EXAMPLE_ALLOY_FILES) $(EXAMPLE_README_FILES) $(INTEGRATION_TEST_OUTPUT_FILES) $(PLATFORM_TEST_OUTPUT_FILES)

build-features:
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C charts/$$chart build; \
	done

# Build targets
.PHONY: build
build: build-features README.md docs/Images.md values.schema.json templates/destinations/_destination_types.tpl $(COLLECTOR_DOCS_FILES) $(DESTINATION_DOCS_FILES) examples integration-test-checks platform-test-checks

# Test targets
.PHONY: test unittest lint-helm lint-configs
test: unittest lint-helm lint-configs example-checks misc-checks test-features

test-features:
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C charts/$$chart test; \
	done

lint-configs: $(EXAMPLE_ALLOY_FILES)
	../../scripts/lint-alloy.sh $(EXAMPLE_ALLOY_FILES)
	rm -rf data-alloy  # Clean up the data-alloy directory, which is created by lint-alloy.sh when it runs Alloy.

lint-helm: build
	helm repo add grafana https://grafana.github.io/helm-charts
	helm lint .
	ct lint --config .ct.yaml --lint-conf .lintconf.yaml --check-version-increment=false --charts .

unittest: values.schema.json templates/destinations/_destination_types.tpl
ifdef HAS_HELM_UNITTEST
	helm unittest --failfast --with-subchart=false .
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest:3.17.0-0.7.1 --failfast --with-subchart=false .
endif
