HAS_HELM_DOCS := $(shell command -v helm-docs;)
HAS_HELM_UNITTEST := $(shell helm plugin list | grep unittest 2> /dev/null)
HAS_SHELLSPEC := $(shell command -v shellspec;)
HAS_VENDIR := $(shell command -v vendir;)

CHART_TEMPLATE_FILES = $(shell find templates -name "*.tpl")
CHART_YAML_FILES = $(shell find templates -name "*.yaml")
UPDATECLI_FILES := $(shell yq -e '.dependencies[] | select(.repository == "http*") | ".updatecli-" + .name + ".yaml"' Chart.yaml 2>/dev/null | sort | uniq)

SCHEMA_MODS_JSON_FILES = $(shell find schema-mods -name "*.json")
SCHEMA_MODS_JQ_FILES = $(shell find schema-mods -name "*.jq")

DESTINATION_VALUES_FILES = $(shell find destinations -name "*-values.yaml" | sort -u)
DESTINATION_DOCS_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./docs/destinations/%.md)
DESTINATION_SCHEMA_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./schema-mods/definitions/%-destination.schema.json)

.SECONDEXPANSION:
docs/destinations/%.md: destinations/%-values.yaml $$(wildcard docs/destinations/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') destination

schema-mods/definitions/%-destination.schema.json: destinations/%-values.yaml
	docker run --platform linux/amd64 --rm -v $(shell pwd):/src ghcr.io/grafana/helm-docs-and-schema-gen $(shell echo $< | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') destination

NUMBER_OF_DESTINATION_VALUES_FILES := $(words $(DESTINATION_VALUES_FILES))
schema-mods/destination-list.json: $(DESTINATION_VALUES_FILES)
	@echo '{' > $@
	@echo '  "definitions": {' >> $@
	@echo '    "destination-list": {' >> $@
	@echo '      "type": "array",' >> $@
	@echo '      "items": {' >> $@
	@echo '        "anyOf": [' >> $@
	@echo '          { "$$ref": "#/definitions/invalid-destination"},' >> $@
	@count=0; \
	for file in $(DESTINATION_VALUES_FILES); do \
		count=$$((count + 1)); \
		if [ $$count -eq $(NUMBER_OF_DESTINATION_VALUES_FILES) ]; then \
			echo '          { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"}' >> $@; \
		else \
			echo '          { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"},' >> $@; \
		fi; \
	done
	@echo '        ]' >> $@
	@echo '      }' >> $@
	@echo '    }' >> $@
	@echo '  }' >> $@
	@echo '}' >> $@

templates/destinations/_destination_types.tpl: $(DESTINATION_VALUES_FILES)
	echo '{{/* Do not edit this file. It is generated by the Makefile */}}' > $@
	echo '{{- define "destinations.types" -}}' >> $@
	for file in $(DESTINATION_VALUES_FILES); do \
		echo - $$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') >> $@; \
	done
	echo '{{- end -}}' >> $@

alloyModules/LICENSE: vendir.yml vendir.lock.yml
ifdef HAS_VENDIR
	vendir sync -l
else
	docker run --rm --volume $(shell pwd):/src --workdir /src ghcr.io/carvel-dev/docker-image:latest bash -c "apt-get update && apt-get install -y git && vendir sync -l"
endif
ALLOY_MODULE_FILES = $(shell find alloyModules -name "*.alloy")

values.schema.json: values.yaml $(DESTINATION_SCHEMA_FILES) $(SCHEMA_MODS_JSON_FILES) $(SCHEMA_MODS_JQ_FILES) schema-mods/destination-list.json
	../../scripts/schema-gen.sh .

.updatecli-%.yaml: Chart.yaml
	../../scripts/charts-to-updatecli.sh Chart.yaml

README.md: README.md.gotmpl values.yaml Chart.yaml
ifdef HAS_HELM_DOCS
	helm-docs --chart-to-generate .
else
	docker run --rm --volume "$(shell pwd):/helm-docs" -u $(shell id -u) jnorwood/helm-docs:latest
endif

# Example targets
EXAMPLE_RELEASE_NAME=ko
EXAMPLE_VALUES_FILES = $(shell find docs/examples -name values.yaml)
EXAMPLE_OUTPUT_FILES = $(EXAMPLE_VALUES_FILES:values.yaml=output.yaml)
EXAMPLE_ALLOY_FILES = $(foreach file,$(EXAMPLE_VALUES_FILES),$(call alloy_configs, $(file)))
EXAMPLE_README_FILES = $(EXAMPLE_VALUES_FILES:values.yaml=README.md)

alloy_configs = $(shell \
	DIR="$(shell dirname $(1))/" yq e 'with_entries(select(.key == "alloy-*")) | select(.[].enabled == true) | to_entries | env(DIR) + .[].key + ".alloy"' $(1) \
)

# TODO: Ideally, this shouldn't result in "modified" files if the subchart content is the same.
# 	    The issue is that tar and gz include things like timestamps in their headers, which will
#	    result in different hashes for the same content. Not great for Makefiles or modified file checks.
Chart.lock: Chart.yaml
	helm dependency update .

%/output.yaml: %/values.yaml Chart.yaml Chart.lock values.yaml values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_VALUES_FILES) $(CHART_TEMPLATE_FILES) $(CHART_YAML_FILES) alloyModules/LICENSE $(ALLOY_MODULE_FILES)
	helm template $(EXAMPLE_RELEASE_NAME) . -f $< > $@

%/alloy-logs.alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-logs") | .data["config.alloy"]' $< > $@

%/alloy-metrics.alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-metrics") | .data["config.alloy"]' $< > $@

%/alloy-receiver.alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-receiver") | .data["config.alloy"]' $< > $@

%/alloy-singleton.alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-singleton") | .data["config.alloy"]' $< > $@

%/alloy-profiles.alloy: %/output.yaml
	yq 'select(.kind=="ConfigMap" and .metadata.name=="$(EXAMPLE_RELEASE_NAME)-alloy-profiles") | .data["config.alloy"]' $< > $@

%/README.md: %/values.yaml $$(wildcard %/description.txt)
	echo '<!--' > $@
	echo '(NOTE: Do not edit README.md directly. It is a generated file!)' >> $@
	echo '(      To make changes, please modify values.yaml or description.txt and run `make examples`)' >> $@
	echo '-->' >> $@

	if [ -f $$(dirname $@)/description.txt ]; then \
		cat $$(dirname $@)/description.txt >> $@; \
	else \
		echo $< | sed -e "s/docs\/examples\//# Example: /" >> $@; \
	fi
	echo '' >> $@
	echo '## Values' >> $@
	echo '' >> $@
	echo '```yaml' >> $@
	cat $< >> $@
	echo '```' >> $@

.PHONY: examples
examples: $(EXAMPLE_OUTPUT_FILES) $(EXAMPLE_ALLOY_FILES) $(EXAMPLE_README_FILES)

.PHONY: example-checks
example-checks: $(EXAMPLE_OUTPUT_FILES)
ifdef HAS_SHELLSPEC
	shellspec -c tests/example-checks
else
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/src shellspec/shellspec -c /src/tests/example-checks -s /bin/sh
endif

.PHONY: clean
clean:
	rm -f README.md values.schema.json $(UPDATECLI_FILES) templates/destinations/_destination_types.tpl schema-mods/destination-list.json $(DESTINATION_SCHEMA_FILES) $(DESTINATION_DOCS_FILES)
	rm -f $(EXAMPLE_OUTPUT_FILES) $(EXAMPLE_ALLOY_FILES) $(EXAMPLE_README_FILES)

# Build targets
.PHONY: build
build: README.md alloyModules/LICENSE values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_DOCS_FILES) $(UPDATECLI_FILES) examples

# Test targets
.PHONY: test unittest lint-helm lint-configs
test: unittest lint-helm lint-configs example-checks
lint-configs: $(EXAMPLE_ALLOY_FILES)
	../../scripts/lint-alloy.sh $(EXAMPLE_ALLOY_FILES)

lint-helm: build
	helm repo add grafana https://grafana.github.io/helm-charts
	helm lint .
	ct lint --config .ct.yaml --lint-conf ../../.configs/lintconf.yaml --check-version-increment=false --charts .

unittest: values.schema.json templates/destinations/_destination_types.tpl
ifdef HAS_HELM_UNITTEST
	helm unittest .
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest .
endif
