HAS_HELM_UNITTEST := $(shell helm plugin list | grep unittest 2> /dev/null)
HAS_SHELLSPEC := $(shell command -v shellspec;)

CHART_TEMPLATE_FILES := $(shell find templates -name "*.tpl")
CHART_YAML_FILES := $(shell find templates -name "*.yaml")

FEATURE_CHARTS = $(shell find charts -type d -depth 1 -name "feature-*")

SCHEMA_MODS_JSON_FILES = $(shell find schema-mods -name "*.json")
SCHEMA_MODS_JQ_FILES = $(shell find schema-mods -name "*.jq")

ALLOY_OPERATOR_VERSION := $(shell yq '.dependencies[] | select(.name == "alloy-operator") | .version' Chart.yaml)
collectors/upstream/alloy-values.yaml: charts/alloy-operator-$(ALLOY_OPERATOR_VERSION).tgz
	tar xzf $< -C collectors/upstream/ --strip-components=1 alloy-operator/alloy-values.yaml

COLLECTOR_VALUES_FILES := $(shell find collectors -maxdepth 1 -name "*-values.yaml" | sort -u)
COLLECTOR_DOCS_FILES = $(COLLECTOR_VALUES_FILES:collectors/%-values.yaml=./docs/collectors/%.md)
COLLECTOR_SCHEMA_FILES = $(COLLECTOR_VALUES_FILES:collectors/%-values.yaml=./schema-mods/definitions/%-collector.schema.json)

DESTINATION_VALUES_FILES := $(shell find destinations -name "*-values.yaml" | sort -u)
DESTINATION_DOCS_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./docs/destinations/%.md)
DESTINATION_SCHEMA_FILES = $(DESTINATION_VALUES_FILES:destinations/%-values.yaml=./schema-mods/definitions/%-destination.schema.json)

.SECONDEXPANSION:
docs/collectors/%.md: collectors/%-values.yaml $$(wildcard docs/collectors/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-doc-generator --file /chart/$< --template /chart/docs/collectors/.doc_templates/$(shell basename -s -values.yaml $<).gotmpl > $@

docs/destinations/%.md: destinations/%-values.yaml $$(wildcard docs/destinations/.doc_templates/%.gotmpl)
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-doc-generator --file /chart/$< --template /chart/docs/destinations/.doc_templates/$(shell basename -s -values.yaml $<).gotmpl > $@

schema-mods/definitions/%-collector.schema.json: collectors/%-values.yaml
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-schema-generator --file /chart/$< > $@

schema-mods/definitions/%-destination.schema.json: destinations/%-values.yaml
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-schema-generator --file /chart/$< > $@

NUMBER_OF_DESTINATION_VALUES_FILES := $(words $(DESTINATION_VALUES_FILES))
schema-mods/destination.json: $(DESTINATION_VALUES_FILES)
	@echo '{' > $@
	@echo '  "definitions": {' >> $@
	@echo '    "destination": {' >> $@
	@echo '      "type": "object",' >> $@
	@echo '      "anyOf": [' >> $@
	@echo '        { "$$ref": "#/definitions/invalid-destination"},' >> $@
	@count=0; \
	for file in $(DESTINATION_VALUES_FILES); do \
		count=$$((count + 1)); \
		if [ $$count -eq $(NUMBER_OF_DESTINATION_VALUES_FILES) ]; then \
			echo '        { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"}' >> $@; \
		else \
			echo '        { "$$ref": "#/definitions/'$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/')'-destination"},' >> $@; \
		fi; \
	done
	@echo '      ]' >> $@
	@echo '    },' >> $@
	@echo '    "destination-list": {' >> $@
	@echo '      "type": "array",' >> $@
	@echo '      "items": {' >> $@
	@echo '        "$$ref": "#/definitions/destination"' >> $@
	@echo '      }' >> $@
	@echo '    },' >> $@
	@echo '    "destination-map": {' >> $@
	@echo '      "type": "object",' >> $@
	@echo '      "additionalProperties": {' >> $@
	@echo '        "$$ref": "#/definitions/destination"' >> $@
	@echo '      }' >> $@
	@echo '    },' >> $@
	@count=0; \
	for file in $(DESTINATION_VALUES_FILES); do \
		count=$$((count + 1)); \
		name=$$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/'); \
		if [ $$count -eq $(NUMBER_OF_DESTINATION_VALUES_FILES) ]; then \
			echo '    "'$${name}'-destination": {"properties": {"type": {"type": "string", "const": "'$${name}'"}}}' >> $@; \
		else \
			echo '    "'$${name}'-destination": {"properties": {"type": {"type": "string", "const": "'$${name}'"}}},' >> $@; \
		fi; \
	done
	@echo '  }' >> $@
	@echo '}' >> $@

templates/destinations/_destination_types.tpl: $(DESTINATION_VALUES_FILES)
	echo '{{/* Do not edit this file. It is generated by the Makefile */}}' > $@
	echo '{{- define "destinations.types" -}}' >> $@
	for file in $(DESTINATION_VALUES_FILES); do \
		echo - $$(echo $${file} | sed 's/destinations\/\([-a-z]*\)-values.yaml/\1/') >> $@; \
	done
	echo '{{- end -}}' >> $@

Chart.lock: Chart.yaml
	helm dependency update .
	@touch Chart.lock # Ensure the timestamp is updated

values.schema.json: values.yaml $(COLLECTOR_SCHEMA_FILES) $(DESTINATION_SCHEMA_FILES) $(SCHEMA_MODS_JSON_FILES) $(SCHEMA_MODS_JQ_FILES) schema-mods/destination.json
	docker run --rm --platform linux/amd64 --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-schema-generator --chart /chart > $@

README.md: README.md.gotmpl values.yaml Chart.yaml
	docker run --rm --platform linux/amd64 --volume $(shell pwd):/chart ghcr.io/grafana/helm-chart-toolbox-doc-generator --chart /chart > $@

# Example targets
EXAMPLE_VALUES_FILES = $(shell find docs/examples -name values.yaml)
EXAMPLE_OUTPUT_FILES := $(EXAMPLE_VALUES_FILES:values.yaml=output.yaml)
%/output.yaml: %/values.yaml Chart.yaml Chart.lock values.yaml values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_VALUES_FILES) $(CHART_TEMPLATE_FILES) $(CHART_YAML_FILES)
	../../scripts/generate-example.sh $(shell pwd) $(shell dirname $<)

NON_RENDERED_INTEGRATION_TEST_VALUES_FILES = $(shell find tests/integration -name .no-render | sed 's/.no-render/values.yaml/')
INTEGRATION_TEST_VALUES_FILES = $(filter-out $(NON_RENDERED_INTEGRATION_TEST_VALUES_FILES),$(shell find tests/integration -name values.yaml))
INTEGRATION_TEST_OUTPUT_FILES = $(INTEGRATION_TEST_VALUES_FILES:values.yaml=.rendered/output.yaml)

NON_RENDERED_PLATFORM_TEST_VALUES_FILES := $(shell find tests/platform -name .no-render | sed 's/.no-render/values.yaml/')
PLATFORM_TEST_VALUES_FILES := $(filter-out $(NON_RENDERED_PLATFORM_TEST_VALUES_FILES),$(shell find tests/platform -name values.yaml))
PLATFORM_TEST_OUTPUT_FILES := $(PLATFORM_TEST_VALUES_FILES:values.yaml=.rendered/output.yaml)

%/.rendered/output.yaml: %/values.yaml Chart.yaml Chart.lock values.yaml values.schema.json templates/destinations/_destination_types.tpl $(DESTINATION_VALUES_FILES) $(CHART_TEMPLATE_FILES) $(CHART_YAML_FILES)
	../../scripts/generate-example.sh $(shell pwd) $(shell dirname $<) --output-dir .rendered --no-alloy --no-readme

.PHONY: examples
examples: $(EXAMPLE_OUTPUT_FILES) $(INTEGRATION_TEST_OUTPUT_FILES) $(PLATFORM_TEST_OUTPUT_FILES)

.PHONY: example-checks
example-checks: docs/examples/private-image-registries/individual/output.yaml docs/examples/private-image-registries/globally/output.yaml docs/examples/auth/embedded-secrets/output.yaml
ifdef HAS_SHELLSPEC
	shellspec -c tests/example-checks
else
	docker run --platform linux/amd64 --rm --volume $(shell pwd):/src shellspec/shellspec -c /src/tests/example-checks -s /bin/sh
endif

.PHONY: misc-checks
misc-checks:
ifdef HAS_SHELLSPEC
	ALLOY_OPERATOR_VERSION=$(ALLOY_OPERATOR_VERSION) shellspec -c tests/misc-checks
else
	docker run --platform linux/amd64 --rm --env ALLOY_OPERATOR_VERSION=$(ALLOY_OPERATOR_VERSION) --volume $(shell pwd):/src shellspec/shellspec -c /src/tests/misc-checks -s /bin/sh
endif

.PHONY: clean
clean: clean-examples
	rm -f README.md values.schema.json templates/destinations/_destination_types.tpl schema-mods/destination.json
	rm -f $(COLLECTOR_SCHEMA_FILES) $(COLLECTOR_DOCS_FILES)
	rm -f $(DESTINATION_SCHEMA_FILES) $(DESTINATION_DOCS_FILES)
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C $$chart clean; \
	done

.PHONY: clean-examples
clean-examples:
	rm -f $(EXAMPLE_OUTPUT_FILES) $(INTEGRATION_TEST_OUTPUT_FILES) $(PLATFORM_TEST_OUTPUT_FILES)

build-features:
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C $$chart build; \
	done

# Build targets
.PHONY: build build-features build-chart build-docs build-examples
build: build-features build-chart build-docs build-examples
build-chart: Chart.lock values.schema.json templates/destinations/_destination_types.tpl
build-docs: README.md $(COLLECTOR_DOCS_FILES) $(DESTINATION_DOCS_FILES)
build-examples: examples

# Test targets
.PHONY: test unittest lint-helm lint-configs
test: unittest lint-helm lint-configs example-checks misc-checks test-features

test-features:
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C $$chart test; \
	done

lint-configs:
	../../scripts/lint-alloy.sh $(shell find docs/examples -name "alloy-*.alloy")
	rm -rf data-alloy  # Clean up the data-alloy directory, which is created by lint-alloy.sh when it runs Alloy.

lint-helm: build
	helm repo add grafana https://grafana.github.io/helm-charts
	helm lint .
	ct lint --config .ct.yaml --lint-conf .lintconf.yaml --check-version-increment=false --charts .

unittest: values.schema.json templates/destinations/_destination_types.tpl
ifdef HAS_HELM_UNITTEST
	helm unittest --failfast --with-subchart=false .
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest:3.17.0-0.7.1 --failfast --with-subchart=false .
endif

.PHONY: update-test-snapshots
update-test-snapshots:
ifdef HAS_HELM_UNITTEST
	helm unittest --with-subchart=false . --update-snapshot
else
	docker run --rm --volume $(shell pwd):/apps helmunittest/helm-unittest:3.17.0-0.7.1 --with-subchart=false . --update-snapshot
endif
	set -e && \
	for chart in $(FEATURE_CHARTS); do \
		make -C $$chart update-test-snapshots; \
	done
