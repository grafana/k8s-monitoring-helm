{{ define "alloy.config.logsServiceOTLP" }}
otelcol.receiver.loki "logs_service" {
  output {
    logs = [otelcol.processor.attributes.logs_service.input]
  }
}

otelcol.processor.attributes "logs_service" {
  action {
    key = "k8s.cluster.name"
    value = {{ required ".Values.cluster.name is a required value. Please set it and try again." .Values.cluster.name | quote }}
    action = "upsert"
  }
{{ with .Values.externalServices.loki }}
  {{- range $key, $value := .externalLabels }}
  action {
    key = {{ $key | quote }}
    value = {{ $value | quote }}
    action = "upsert"
  }
  {{- end }}
  output {
    logs = [otelcol.processor.batch.logs_service.input]
  }
}

otelcol.processor.batch "logs_service" {
  send_batch_size = {{ .processors.batch.size | int }}
  send_batch_max_size = {{ .processors.batch.maxSize | int }}
  timeout = {{ .processors.batch.timeout | quote}}
  output {
{{- if .processors.memoryLimiter.enabled }}
    logs = [otelcol.processor.memory_limiter.logs_service.input]
  }
}

otelcol.processor.memory_limiter "logs_service" {
  check_interval = {{ .processors.memoryLimiter.checkInterval | quote }}
  limit = {{ .processors.memoryLimiter.limit | quote }}
  output {
{{- end }}
{{- if eq .protocol "otlp" }}
    logs = [otelcol.exporter.otlp.logs_service.input]
{{- end }}
{{- if eq .protocol "otlphttp" }}
    logs = [otelcol.exporter.otlphttp.logs_service.input]
{{- end }}
  }
}
{{ if eq .authMode "basic" }}
otelcol.auth.basic "logs_service" {
  username = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .basicAuth.usernameKey | quote }}])
  password = remote.kubernetes.secret.logs_service.data[{{ .basicAuth.passwordKey | quote }}]
}
{{- end }}
{{ if eq .protocol "otlp" }}
otelcol.exporter.otlp "logs_service" {
{{- end }}
{{- if eq .protocol "otlphttp" }}
otelcol.exporter.otlphttp "logs_service" {
{{- end }}
  client {
    endpoint = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .hostKey | quote }}]) + "{{ .writeEndpoint }}"
{{ if or (.basicAuth.username) (.basicAuth.password) }}
    auth = otelcol.auth.basic.logs_service.handler
{{- end }}
{{- if .tenantId }}
    headers = { "X-Scope-OrgID" = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .tenantIdKey | quote }}]) }
{{- end }}
{{- if .tls }}
    tls {
    {{- range $k, $v := .tls }}
      {{ $k }} = {{ $v | toJson }}
    {{- end }}
    }
{{- end }}
  }
}
{{- end }}
{{ end }}
