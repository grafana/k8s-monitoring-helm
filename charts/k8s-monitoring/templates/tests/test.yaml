{{- define "test.queryList" -}}
queries:
  {{- if .Values.metrics.enabled }}
  - query: up{cluster={{ .Values.cluster.name | quote}}}
    {{- if .Values.metrics.agent.enabled }}
  - query: agent_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if .Values.metrics.kubelet.enabled }}
  - query: kubernetes_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if .Values.metrics.cadvisor.enabled }}
  - query: machine_memory_bytes{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if (index .Values.metrics "kube-state-metrics").enabled }}
  - query: kube_node_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if (index .Values.metrics "node-exporter").enabled }}
  - query: node_exporter_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if (index .Values.metrics "windows-exporter").enabled }}
  - query: windows_exporter_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if .Values.metrics.apiserver.enabled }}
  - query: apiserver_request_total{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if .Values.metrics.cost.enabled }}
  - query: opencost_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
    {{- if .Values.metrics.kubernetesMonitoring.enabled }}
  - query: grafana_kubernetes_monitoring_build_info{cluster={{ .Values.cluster.name | quote}}}
    {{- end }}
{{- if .Values.test.extraQueries }}
  {{- range .Values.test.extraQueries }}
  - query: {{ .query }}
  {{- end }}
{{- end }}
  {{- end }}
{{- end -}}


{{- define "test.script" -}}
#!/bin/bash
set -eo pipefail
apt-get update && apt-get install -y curl jq

queries=$(jq -r '.queries[].query' "$1")
for query in $queries; do
  echo "Running query: ${PROMETHEUS_HOST}{{ .Values.externalServices.prometheus.queryEndpoint }}?query=$query..."
  result=$(curl -skX POST -u "${PROMETHEUS_USER}:${PROMETHEUS_PASS}" "${PROMETHEUS_HOST}{{ .Values.externalServices.prometheus.queryEndpoint }}?query=$(jq -rn --arg x "${query}" '$x|@uri')")
  status=$(echo $result | jq -r .status)
  if [ "${status}" != "success" ]; then
    echo "Query failed!"
    echo "$result"
    exit 1
  fi

  resultCount=$(echo $result | jq '.data.result | length')
  if [ "${resultCount}" -eq 0 ]; then
    echo "Query returned no results"
    echo "$result"
    exit 1
  fi
done

echo "All queries passed!"
{{- end }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      containers:
        - name: test-runner
          image: {{ .Values.test.image.registry }}/{{ .Values.test.image.image }}:{{ .Values.test.image.tag }}
          command: ["bash", "-c", "bash /etc/test/test.sh /etc/test/queries.json"]
          volumeMounts:
            - name: test-plan
              mountPath: /etc/test
          env:
            - name: PROMETHEUS_HOST
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_host
            - name: PROMETHEUS_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_username
            - name: PROMETHEUS_PASS
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_password
      volumes:
        - name: test-plan
          configMap:
            name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  test.sh: |-
    {{- include "test.script" . | trim | nindent 4 }}
  queries.json: |-
    {{- include "test.queryList" . | fromYaml | toPrettyJson | nindent 4 }}
