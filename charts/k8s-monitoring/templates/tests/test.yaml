{{- define "test.queryList" -}}
queries:
  {{- if .Values.metrics.enabled }}
  - query: up{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- if .Values.metrics.agent.enabled }}
  - query: agent_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.kubelet.enabled }}
  - query: kubernetes_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.cadvisor.enabled }}
  - query: machine_memory_bytes{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if (index .Values.metrics "kube-state-metrics").enabled }}
  - query: kube_node_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if (index .Values.metrics "node-exporter").enabled }}
  - query: node_exporter_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if (index .Values.metrics "windows-exporter").enabled }}
  - query: windows_exporter_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.apiserver.enabled }}
  - query: apiserver_request_total{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.kubeControllerManager.enabled }}
  - query: workqueue_adds_total{cluster={{ .Values.cluster.name | quote}}, job="kube-controller-manager"}
    type: promql
    {{- end }}
    {{- if .Values.metrics.kubeProxy.enabled }}
  - query: kubeproxy_sync_proxy_rules_service_changes_total{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.kubeScheduler.enabled }}
  - query: scheduler_unschedulable_pods{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.cost.enabled }}
  - query: opencost_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.metrics.kubernetesMonitoring.enabled }}
  - query: grafana_kubernetes_monitoring_build_info{cluster={{ .Values.cluster.name | quote}}}
    type: promql
    {{- end }}
    {{- if .Values.test.extraQueries }}
{{ .Values.test.extraQueries | toYaml | indent 2 }}
    {{- end }}
  {{- end }}
{{- end -}}
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "kubernetes-monitoring-config-analysis.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    {{- range $key, $val := .Values.test.extraLabels }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "0"
    {{- range $key, $val := .Values.test.extraAnnotations }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
spec:
  {{- if or .Values.global.image.pullSecrets .Values.test.image.pullSecrets }}
  imagePullSecrets:
    {{- if .Values.global.image.pullSecrets }}
    {{- toYaml .Values.global.image.pullSecrets | nindent 8 }}
    {{- else }}
    {{- toYaml .Values.test.image.pullSecrets | nindent 8 }}
    {{- end }}
  {{- end }}
  restartPolicy: OnFailure
  {{- with .Values.test.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.test.tolerations }}
  tolerations:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  containers:
    - name: config-analysis
      image: {{ .Values.global.image.registry | default .Values.test.image.registry }}/{{ .Values.test.image.image }}:{{ .Values.test.image.tag | default .Chart.Version }}
      command: [/etc/bin/config-analysis.sh]
      env:
        - name: AGENT_HOST
          value: {{ include "grafana-agent.fullname" (index .Subcharts "grafana-agent") }}.{{ .Release.Namespace }}.svc
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    {{- range $key, $val := .Values.test.extraLabels }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "0"
    {{- range $key, $val := .Values.test.extraAnnotations }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
spec:
  {{- if or .Values.global.image.pullSecrets .Values.test.image.pullSecrets }}
  imagePullSecrets:
    {{- if .Values.global.image.pullSecrets }}
    {{- toYaml .Values.global.image.pullSecrets | nindent 8 }}
    {{- else }}
    {{- toYaml .Values.test.image.pullSecrets | nindent 8 }}
    {{- end }}
  {{- end }}
  restartPolicy: OnFailure
  {{- with .Values.test.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.test.tolerations }}
  tolerations:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  containers:
    - name: query-test
      image: {{ .Values.global.image.registry | default .Values.test.image.registry }}/{{ .Values.test.image.image }}:{{ .Values.test.image.tag | default .Chart.Version }}
      command: ["bash", "-c", "/etc/bin/query-test.sh /etc/test/testQueries.json"]
      volumeMounts:
        - name: test-files
          mountPath: /etc/test
      env:
{{- if .Values.test.envOverrides.PROMETHEUS_URL }}
        - name: PROMETHEUS_URL
          value: {{ .Values.test.envOverrides.PROMETHEUS_URL | quote }}
{{- else }}
        - name: PROMETHEUS_HOST
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.metrics_service.secret.name" . }}
              key: {{ .Values.externalServices.prometheus.hostKey }}
              optional: true
        - name: PROMETHEUS_URL
          value: $(PROMETHEUS_HOST){{ .Values.externalServices.prometheus.queryEndpoint }}
{{- end }}
        - name: PROMETHEUS_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.metrics_service.secret.name" . }}
              key: {{ .Values.externalServices.prometheus.basicAuth.usernameKey }}
              optional: true
        - name: PROMETHEUS_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.metrics_service.secret.name" . }}
              key: {{ .Values.externalServices.prometheus.basicAuth.passwordKey }}
              optional: true

{{- if .Values.test.envOverrides.LOKI_URL }}
        - name: LOKI_URL
          value: {{ .Values.test.envOverrides.LOKI_URL | quote }}
{{- else }}
        - name: LOKI_HOST
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.logs_service.secret.name" . }}
              key: {{ .Values.externalServices.loki.hostKey }}
        - name: LOKI_URL
          value: $(LOKI_HOST){{ .Values.externalServices.loki.queryEndpoint }}
{{- end }}
        - name: LOKI_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.logs_service.secret.name" . }}
              key: {{ .Values.externalServices.loki.basicAuth.usernameKey }}
              optional: true
        - name: LOKI_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.logs_service.secret.name" . }}
              key: {{ .Values.externalServices.loki.basicAuth.passwordKey }}
              optional: true
        - name: LOKI_TENANTID
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.logs_service.secret.name" . }}
              key: {{ .Values.externalServices.loki.tenantIdKey }}
              optional: true

{{- if .Values.test.envOverrides.TEMPO_URL }}
        - name: TEMPO_URL
          value: {{ .Values.test.envOverrides.TEMPO_URL | quote }}
{{- else }}
        - name: TEMPO_HOST
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.traces_service.secret.name" . }}
              key: {{ .Values.externalServices.tempo.hostKey }}
              optional: true
        - name: TEMPO_URL
          value: $(TEMPO_HOST){{ .Values.externalServices.tempo.searchEndpoint }}
{{- end }}
        - name: TEMPO_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.traces_service.secret.name" . }}
              key: {{ .Values.externalServices.tempo.basicAuth.usernameKey }}
              optional: true
        - name: TEMPO_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "kubernetes_monitoring.traces_service.secret.name" . }}
              key: {{ .Values.externalServices.tempo.basicAuth.passwordKey }}
              optional: true

  volumes:
    - name: test-files
      configMap:
        name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "kubernetes-monitoring-test.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-1"
data:
  testQueries.json: |-
{{- include "test.queryList" . | fromYaml | toPrettyJson | nindent 4 }}
