{{- range $destination := .Values.destinations }}
{{- if eq $destination.type "otlp" }}
  {{- $isSamplingEnabled := include "destinations.otlp.isTailSamplingEnabled" $destination }}
  {{- if eq $isSamplingEnabled "true" }}
    {{- $defaultValues := "destinations/otlp-values.yaml" | $.Files.Get | fromYaml }}
    {{- $destination = mergeOverwrite $defaultValues $destination }}

    {{- $maxLength := 51 }}{{/* This limit is from the `controller-revision-hash` pod label value*/}}
    {{- $collectorName := printf "%s-%s" $.Release.Name (include "helper.k8s_name" (printf "%s-sampler" $destination.name)) | trunc $maxLength | trimSuffix "-" | lower }}
    {{- $collectorValues := merge (dict "fullnameOverride" $collectorName) ($destination.processors.tailSampling.collector | default dict) }}
    {{- $values := (deepCopy $ | merge (dict "collectorName" $collectorName "collectorValues" $collectorValues)) }}
    {{- $alloyValues := include "collector.alloy.values" $values | fromYaml }}

    {{- /* Sampler config components */}}
    {{- $destinationTarget := include "destinations.otlp.alloy.exporter.target" $destination }}
    {{- $samplerConfig := merge (dict "traces" $destinationTarget "name" "tail_sampler") $destination.processors.tailSampling}}
    {{- $samplerTarget := include "sampler.processor.tailSampling.alloy.target" $samplerConfig }}
    {{- $samplerConfigComponents := include "sampler.processor.tailSampling.alloy" $samplerConfig}}

    {{- /* Receiver config components */}}
    {{- $receiverConfig := merge (dict "traces" $samplerTarget "name" "sampler_receiver") $destination.processors.tailSampling }}
    {{- $receiverConfigComponents := include "receiver.otlp.alloy" $receiverConfig }}

    {{- /* Destination components*/}}
    {{- $destinationConfigComponents := printf "// Destination: %s (%s)" $destination.name $destination.type }}
    {{- $destinationConfigComponents = cat $destinationConfigComponents (include "destinations.otlp.alloy.exporter" $destination) | trim }}
    {{- if eq (include "secrets.usesKubernetesSecret" $destination) "true" }}
      {{- $destinationConfigComponents = cat $destinationConfigComponents (include "secret.alloy" (deepCopy $ | merge (dict "object" $destination)) | nindent 0) }}
    {{- end }}

    {{- /* Build full Alloy configuration */}}
    {{- $alloyConfig := "" }}
    {{- $alloyConfig = cat $alloyConfig ($receiverConfigComponents | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig ($samplerConfigComponents | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig (include "collectors.logging.alloy" $alloyValues | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig (include "collectors.liveDebugging.alloy" $alloyValues | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig (include "collectors.remoteConfig.alloy" $values | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig (include "collectors.extraConfig.alloy" $values | trim | nindent 0) }}
    {{- $alloyConfig = cat $alloyConfig ($destinationConfigComponents | trim | nindent 0) }}
    {{- $alloyConfig = regexReplaceAll `[ \t]+(\r?\n)` $alloyConfig "\n" | trim }}

    {{- /* Build Alloy spec */}}
    {{- $alloySpec := include "collector.alloy.valuesToSpec" (mergeOverwrite $alloyValues (dict "alloy" (dict "configMap" (dict "create" true "content" $alloyConfig)))) }}
---
apiVersion: collectors.grafana.com/v1alpha1
kind: Alloy
metadata:
  name: {{ $collectorName }}
  namespace: {{ $.Release.Namespace }}
  {{- if and (index $.Values "alloy-operator").deploy (index $.Values "alloy-operator").waitForReadiness.enabled }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sdk.operatorframework.io/uninstall-wait: "true"
  {{- end }}
spec:{{ $alloySpec | trim | nindent 2 }}
{{- end }}
{{- end }}
{{- end }}
