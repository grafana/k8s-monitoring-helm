{{- define "secrets.list.unittest.secrets" }}
- auth.username
- auth.password
{{- end }}
{{- $noAuth := dict "type" "unittest.secrets"}}
{{- $usernameAndPassword := dict "type" "unittest.secrets" "auth" (dict "username" "my-username" "password" "my-password") }}
{{- $embeddedSecret := deepCopy $usernameAndPassword | merge (dict "secret" (dict "embed" true)) }}
{{- $allSecretsHaveRefs := dict "type" "unittest.secrets" "auth" (dict "usernameFrom" "env('USER')" "passwordFrom" "env('PASS')") }}
{{- $oneSecretHasRef := dict "type" "unittest.secrets" "auth" (dict "username" "my-username" "passwordFrom" "env('PASS')") }}
{{- $externalNoKeys := dict "type" "unittest.secrets" "secret" (dict "create" false) "auth" dict }}
{{- $externalOneKey := deepCopy $externalNoKeys | merge (dict "auth" (dict "usernameKey" "user")) }}
{{- $externalBothKeys := deepCopy $externalNoKeys | merge (dict "auth" (dict "usernameKey" "user" "passwordKey" "pass")) }}
{{- if eq .Values.testing "true" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-authType
data:
  testEmpty: {{ include "secrets.authType" $noAuth | quote }}
  testEmptyAuth: {{ include "secrets.authType" (dict "auth" (dict)) | quote }}
  testEmptyType: {{ include "secrets.authType" (dict "auth" (dict "type" "")) | quote }}
  testAuthTypeBasic: {{ include "secrets.authType" (dict "auth" (dict "type" "basic")) | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-secretType
data:
  testEmpty: {{ include "secrets.secretType" $noAuth | quote }}
  testEmptySecret: {{ include "secrets.secretType" (dict "secret" (dict)) | quote }}
  testEmbeddedTrue: {{ include "secrets.secretType" (dict "secret" (dict "embed" true)) | quote }}
  testEmbeddedFalse: {{ include "secrets.secretType" (dict "secret" (dict "embed" false)) | quote }}
  testCreateTrue: {{ include "secrets.secretType" (dict "secret" (dict "create" true)) | quote }}
  testCreateFalse: {{ include "secrets.secretType" (dict "secret" (dict "create" false)) | quote }}
  testBothTrue: {{ include "secrets.secretType" (dict "secret" (dict "create" true "embed" true)) | quote }}
  testBothFalse: {{ include "secrets.secretType" (dict "secret" (dict "create" false "embed" false)) | quote }}
  testCreateTrueEmbedFalse: {{ include "secrets.secretType" (dict "secret" (dict "create" true "embed" false)) | quote }}
  testCreateFalseEmbedTrue: {{ include "secrets.secretType" (dict "secret" (dict "create" false "embed" true)) | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-getSecretFromRef
data:
  testNoPath: {{ include "secrets.getSecretFromRef" (dict "object" dict "key" "auth.password") | quote }}
  testNoReference: {{ include "secrets.getSecretFromRef" (dict "object" (dict "auth" dict) "key" "auth.password") | quote }}
  testHasElementNoReference: {{ include "secrets.getSecretFromRef" (dict "object" (dict "auth" (dict "password" "test")) "key" "auth.password") | quote }}
  testHasReference: {{ include "secrets.getSecretFromRef" (dict "object" (dict "auth" (dict "passwordFrom" "test")) "key" "auth.password") | quote }}
  testHasReferenceAndElement: {{ include "secrets.getSecretFromRef" (dict "object" (dict "auth" (dict "password" "a-secret" "passwordFrom" "test")) "key" "auth.password") | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-getSecretKey
data:
  testNoPath: {{ include "secrets.getSecretKey" (dict "object" dict "key" "auth.password") | quote }}
  testNoKey: {{ include "secrets.getSecretKey" (dict "object" (dict "auth" dict) "key" "auth.password") | quote }}
  testHasElementNoKey: {{ include "secrets.getSecretKey" (dict "object" (dict "auth" (dict "password" "test")) "key" "auth.password") | quote }}
  testHasKey: {{ include "secrets.getSecretKey" (dict "object" (dict "auth" (dict "passwordKey" "test")) "key" "auth.password") | quote }}
  testHasKeyAndElement: {{ include "secrets.getSecretKey" (dict "object" (dict "auth" (dict "password" "a-secret" "passwordKey" "test")) "key" "auth.password") | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-isSecretKeyDefined
data:
  testNoPath: {{ include "secrets.isSecretKeyDefined" (dict "object" dict "key" "auth.password") | quote }}
  testNoKey: {{ include "secrets.isSecretKeyDefined" (dict "object" $externalNoKeys "key" "auth.password") | quote }}
  testHasElementNoKey: {{ include "secrets.isSecretKeyDefined" (dict "object" (dict "auth" (dict "password" "test")) "key" "auth.password") | quote }}
  testHasKey: {{ include "secrets.isSecretKeyDefined" (dict "object" $externalOneKey "key" "auth.username") | quote }}
  testHasKeyAndElement: {{ include "secrets.isSecretKeyDefined" (dict "object" (dict "auth" (dict "password" "a-secret" "passwordKey" "test")) "key" "auth.password") | quote }}
  externalNoKeys: {{ include "secrets.isSecretKeyDefined" (dict "object" $externalNoKeys "key" "auth.username") | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-getSecretValue
data:
  testNoPath: {{ include "secrets.getSecretValue" (dict "object" dict "key" "auth.password") | quote }}
  testNoPassword: {{ include "secrets.getSecretValue" (dict "object" (dict "auth" dict) "key" "auth.password") | quote }}
  testHasPassword: {{ include "secrets.getSecretValue" (dict "object" (dict "auth" (dict "password" "password")) "key" "auth.password") | quote }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: test-secrets-usesKubernetesSecret
data:
  noAuth: {{ include "secrets.usesKubernetesSecret" $noAuth | quote }}
  usernameAndPassword: {{ include "secrets.usesKubernetesSecret" $usernameAndPassword | quote }}
  embeddedSecret: {{ include "secrets.usesKubernetesSecret" $embeddedSecret | quote }}
  allSecretsHaveRefs: {{ include "secrets.usesKubernetesSecret" $allSecretsHaveRefs | quote }}
  oneSecretHasRef: {{ include "secrets.usesKubernetesSecret" $oneSecretHasRef | quote }}
  externalNoKeys: {{ include "secrets.usesKubernetesSecret" $externalNoKeys | quote }}
  externalOneKey: {{ include "secrets.usesKubernetesSecret" $externalOneKey | quote }}
  externalBothKeys: {{ include "secrets.usesKubernetesSecret" $externalBothKeys | quote }}

{{- end }}