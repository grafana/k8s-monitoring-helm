{{ define "agent.config.apiserver" }}
// API Server
discovery.relabel "apiserver" {
  targets = discovery.kubernetes.services.targets
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    regex = "default"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_name"]
    regex = "kubernetes"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = "https"
    action = "keep"
  }
{{- if .Values.metrics.extraRelabelingRules }}
{{ .Values.metrics.extraRelabelingRules | indent 2 }}
{{- end }}
{{- if .Values.metrics.apiserver.extraRelabelingRules }}
{{ .Values.metrics.apiserver.extraRelabelingRules | indent 2 }}
{{- end }}
}

prometheus.scrape "apiserver" {
  job_name   = "integrations/kubernetes/apiserver"
  targets    = discovery.relabel.apiserver.output
  scheme     = "https"
  scrape_interval = {{ .Values.metrics.apiserver.scrapeInterval | default .Values.metrics.scrapeInterval | quote }}
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
{{- if (index .Values "grafana-agent").agent.clustering.enabled }}
  clustering {
    enabled = true
  }
{{- end }}
  forward_to = [prometheus.relabel.apiserver.receiver]
}

prometheus.relabel "apiserver" {
{{- if .Values.metrics.apiserver.metricsTuning.includeMetrics }}
  rule {
    source_labels = ["__name__"]
    regex = "up|{{ join "|" .Values.metrics.apiserver.metricsTuning.includeMetrics }}"
    action = "keep"
  }
{{- end }}
{{- if .Values.metrics.apiserver.metricsTuning.excludeMetrics }}
  rule {
    source_labels = ["__name__"]
    regex = {{ join "|" .Values.metrics.apiserver.metricsTuning.excludeMetrics | quote }}
    action = "drop"
  }
{{- end }}
{{- if .Values.metrics.apiserver.extraMetricRelabelingRules }}
{{ .Values.metrics.apiserver.extraMetricRelabelingRules | indent 2 }}
{{- end }}
  forward_to = [prometheus.relabel.metrics_service.receiver]
}
{{ end }}
