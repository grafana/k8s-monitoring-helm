{{ define "agent.config.traces" }}
// Traces
otelcol.receiver.otlp "trace_receiver" {
{{- if not (or .Values.traces.receiver.grpc.enabled .Values.traces.receiver.http.enabled) }}
  {{- fail "You must enable either gRPC or HTTP ports for the trace receiver" -}}
{{- end }}

{{- if or .Values.traces.receiver.port .Values.traces.receiver.grpc.enabled }}
{{$data := dict "port" (.Values.traces.receiver.port | default .Values.traces.receiver.grpc.port) "type" "gRPC" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforTracePort" $data -}}
  grpc {
    endpoint = "0.0.0.0:{{ $data.port | int }}"
  }
{{- end }}
{{- if .Values.traces.receiver.http.enabled }}
{{$data := dict "port" .Values.traces.receiver.http.port "type" "HTTP" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforTracePort" $data -}}
  http {
    endpoint = "0.0.0.0:{{ $data.port | int }}"
  }
{{- end }}
  output {
    traces = [otelcol.processor.batch.trace_batch_processor.input]
  }
}

{{- with .Values.traces }}
otelcol.processor.batch "trace_batch_processor" {
  send_batch_size = {{ .processors.batch.size | int }}
  timeout = {{ .processors.batch.timeout | quote}}
  output {
    traces = [otelcol.processor.attributes.trace_attributes_processor.input]
  }
}
{{- end }}

otelcol.processor.attributes "trace_attributes_processor" {
  action {
    key = "cluster"
    value = {{ required ".Values.cluster.name is a required value. Please set it and try again." .Values.cluster.name | quote }}
    action = "insert"
  }
  output {
    traces = [otelcol.exporter.otlp.tempo.input]
  }
}
{{ end }}
