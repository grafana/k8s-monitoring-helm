{{ define "agent.config.node_exporter" }}
// Node Exporter
discovery.relabel "node_exporter" {
  targets = discovery.kubernetes.pods.targets
{{- if (index .Values "prometheus-node-exporter").enabled }}
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
    regex = "{{ .Release.Name }}"
    action = "keep"
  }
{{- end }}
  {{- range $k, $v := (index .Values.metrics "node-exporter").labelMatchers }}
  rule {
    source_labels = ["__meta_kubernetes_pod_label_{{ $k | replace "." "_" | replace "/" "_" }}"]
    regex = "{{ $v }}"
    action = "keep"
  }
  {{- end }}
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "instance"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = local.file.cluster_name.content
    target_label  = "cluster"
  }
}

prometheus.scrape "node_exporter" {
  job_name   = "integrations/node_exporter"
  targets  = discovery.relabel.node_exporter.output
{{- if (index .Values.metrics "node-exporter").allowList }}
  forward_to = [prometheus.relabel.node_exporter.receiver]
{{- else }}
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
{{- end }}
{{- if (index .Values.metrics "node-exporter").service.isTLS }}
  scheme     = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    insecure_skip_verify = true
  }
{{- end }}
}
{{- if (index .Values.metrics "node-exporter").allowList }}

prometheus.relabel "node_exporter" {
  rule {
    source_labels = ["__name__"]
    regex = "up|{{ join "|" (index .Values.metrics "node-exporter").allowList }}"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
{{- end }}
{{ end }}
