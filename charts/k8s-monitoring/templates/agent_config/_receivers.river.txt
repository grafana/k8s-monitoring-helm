{{ define "agent.config.receivers" }}
// Receivers
{{- if (or .Values.receivers.grpc.enabled .Values.receivers.http.enabled) }}
otelcol.receiver.otlp "receiver" {
  debug_metrics {
    {{- if or .Values.receivers.grpc.disable_debug_metrics .Values.receivers.http.disable_debug_metrics }}
    disable_high_cardinality_metrics = true
    {{- else }}
    disable_high_cardinality_metrics = false
    {{- end }}
  }

{{- if or .Values.receivers.port .Values.receivers.grpc.enabled }}
{{$data := dict "port" (.Values.receivers.port | default .Values.receivers.grpc.port) "type" "OTLP gRPC" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforAgentPort" $data }}
  grpc {
    endpoint = "0.0.0.0:{{ $data.port | int }}"
  }
{{- end }}
{{- if .Values.receivers.http.enabled }}
{{$data := dict "port" .Values.receivers.http.port "type" "OTLP HTTP" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforAgentPort" $data }}
  http {
    endpoint = "0.0.0.0:{{ $data.port | int }}"
  }
{{- end }}
  output {
{{- if .Values.metrics.enabled }}
    metrics = [otelcol.exporter.prometheus.otel_to_prom_converter.input]
{{- end }}
{{- if .Values.logs.enabled }}
    logs = [otelcol.exporter.loki.otel_to_loki_converter.input]
{{- end }}
{{- if .Values.traces.enabled }}
    traces = [otelcol.processor.batch.trace_batch_processor.input]
{{- end }}
  }
}
{{- end }}


{{- if and .Values.receivers.prometheus.enabled .Values.metrics.enabled }}
prometheus.receive_http "receiver" {
{{$data := dict "port" .Values.receivers.prometheus.port "type" "Prometheus" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforAgentPort" $data -}}

  http {
    listen_address = "0.0.0.0"
    listen_port = {{ .Values.receivers.prometheus.port }}
  }
  forward_to = [prometheus.relabel.metrics_service.receiver]
}
{{- end }}


{{- if and .Values.receivers.zipkin.enabled .Values.traces.enabled }}
otelcol.receiver.zipkin "receiver" {
  debug_metrics {
    disable_high_cardinality_metrics = {{ .Values.receivers.zipkin.disable_debug_metrics }}
  }

{{$data := dict "port" .Values.receivers.zipkin.port "type" "Zipkin" "agent" (index .Values "grafana-agent").agent }}
{{- include "checkforAgentPort" $data -}}
  endpoint = "0.0.0.0:{{ $data.port | int }}"
  output {
    traces = [otelcol.processor.batch.trace_batch_processor.input]
  }
}
{{- end }}
{{ end }}
