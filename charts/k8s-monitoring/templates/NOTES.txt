Grafana {{.Chart.Name}} Helm chart deployed!

This chart will install the following components:
{{- if (index .Values "alloy-operator").deploy }}
* Grafana Alloy Operator
{{- end }}
{{- range $feature := (include "features.list.enabled" .) | fromYamlArray }}
  {{- include (printf "feature.%s.notes.deployments" $feature) (dict "Values" (index $.Values $feature)) | indent 0 }}
{{- end }}
{{- include "collectors.notes.deployments" . }}

It will:
{{- $isTranslating := false }}
{{- range $feature := (include "features.list.enabled" .) | fromYamlArray }}
  {{- if ne $feature "selfReporting" }}
    {{- $task := include (printf "feature.%s.notes.task" $feature) (dict "Values" (index $.Values $feature)) | trim }}
    {{- $destinations := include (printf "features.%s.destinations" $feature) $ | fromYamlArray }}
    {{- $featureIsTranslating := eq (include (printf "features.%s.destinations.isTranslating" $feature) $) "true" }}
* {{ $task }} and send data to {{ include "english_list" $destinations }}{{ if $featureIsTranslating }}{{ $isTranslating = true }}*{{ end }}.
  {{- end }}
{{- end }}

{{- range $feature := (include "features.list.enabled" .) | fromYamlArray }}
  {{- $collectorName := (index $.Values $feature).collector }}
  {{- $Collector := dict "Namespace" $.Release.Namespace }}
  {{- if $collectorName }}
    {{- $Collector = merge $Collector (dict "ServiceName" (include "collector.alloy.fullname" (merge $ (dict "collectorName" $collectorName)))) }}
  {{- end }}
  {{- include (printf "feature.%s.notes.actions" $feature) (dict "Values" (index $.Values $feature) "Collector" $Collector) | indent 0 }}
{{- end }}
{{- if $isTranslating }}

* One or more features will have their data translated to a different storage ecosystem. This may result in an imperfect
  translation of labels and attributes. For more information, consult:
    https://github.com/grafana/k8s-monitoring-helm/tree/main/charts/k8s-monitoring/docs/destinations#ecosystem-translation
{{- end }}
{{- if and .Values.autoInstrumentation.enabled (not .Values.applicationObservability.enabled) }}

⚠️  Auto-Instrumentation (Beyla) is collecting span metrics, but traces are not being forwarded.
To collect full distributed traces from auto-instrumented applications, enable Application Observability:

applicationObservability:
  enabled: true
  receivers:
    otlp:
      grpc:
        enabled: true

Traces will automatically be sent to your OTLP receivers and forwarded to trace-capable destinations.
For more info: https://github.com/grafana/k8s-monitoring-helm/tree/main/charts/k8s-monitoring/charts/feature-application-observability
{{- end }}
