---
apiVersion: v1
kind: Namespace
metadata:
  name: alloy
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: grafana
  namespace: alloy
spec:
  interval: 1m
  url: https://grafana.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: alloy
  namespace: alloy
spec:
  interval: 1m
  chart:
    spec:
      chart: alloy
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: alloy
      interval:
  values:
    # This config is for a stand-alone Grafana Alloy that will generate metrics, logs, and traces and send them to the
    # k8s monitoring-deployed Alloy via its receivers.
    alloy:
      configMap:
        content: |-
          prometheus.scrape "myself" {
            job_name = "integrations/alloy"
            targets = [{"__address__" = "localhost:12345"}]
            forward_to = [prometheus.relabel.alloy.receiver]
          }
    
          prometheus.relabel "alloy" {
            rule {
              source_labels = ["__name__"]
              regex = "up|scrape_samples_scraped|alloy_build_info"
              action = "keep"
            }
            rule {
              replacement = "from-the-other-alloy"
              target_label = "cluster"
            }
    
            forward_to = [prometheus.remote_write.k8s_monitoring_alloy.receiver]
          }
    
          prometheus.remote_write "k8s_monitoring_alloy" {
            endpoint {
              url = "http://k8smon-alloy.default.svc:9999/api/v1/metrics/write"
            }
          }
    
          tracing {
            sampling_fraction = 0.1
            write_to = [otelcol.processor.transform.trace_transform_processor.input]
          }
    
          otelcol.processor.transform "trace_transform_processor" {
            error_mode = "ignore"
    
            trace_statements {
              context = "resource"
              statements = [
                "set(attributes[\"k8s.cluster.name\"], \"from-the-other-alloy\") where attributes[\"k8s.cluster.name\"] == nil",
              ]
            }
    
            trace_statements {
              context = "span"
              statements = [
                "set(attributes[\"cluster\"], \"from-the-other-alloy\")",
              ]
            }
    
            output {
              traces = [otelcol.exporter.otlp.k8s_monitoring_alloy.input]
            }
          }
    
          otelcol.exporter.otlp "k8s_monitoring_alloy" {
            client {
              endpoint = "k8smon-alloy.default.svc:4317"
              tls {
                insecure = true
              }
            }
          }

    crds:
      create: false
