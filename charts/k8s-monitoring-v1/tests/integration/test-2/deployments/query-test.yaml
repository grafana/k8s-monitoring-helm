---
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  url: https://github.com/grafana/k8s-monitoring-helm
  ref:
    branch: main
  ignore: |
    /*
    !/charts/k8s-monitoring-test
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  chart:
    spec:
      chart: charts/k8s-monitoring-test
      sourceRef:
        kind: GitRepository
        name: k8s-monitoring-test
      interval: 1m
  dependsOn:
    - name: loki
      namespace: loki
    - name: prometheus
      namespace: prometheus
    - name: tempo
      namespace: tempo
  values:
    tests:
      - env:
          CLUSTER: ci-test-cluster-2
          PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
          PROMETHEUS_USER: promuser
          PROMETHEUS_PASS: prometheuspassword
          LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
          LOKI_TENANTID: 1
          LOKI_USER: loki
          LOKI_PASS: lokipassword
          TEMPO_URL: http://tempo.tempo.svc:3100/api/search
        queries:
          # Check that the external label is properly being set
          - query: count(kube_pod_info{cluster="$CLUSTER", color="blue"})
            type: promql
            expect:
              value: 1
              operator: "<="  # There's gotta be at least one pod
          # check that externalLabelsFrom is working
          - query: count(alloy_build_info{magic_word="abracadabra"})
            type: promql
            expect:
              value: 1
              operator: "<="

          # Check for cluster events
          - query: count_over_time({cluster="$CLUSTER", job="integrations/kubernetes/eventhandler", color="red"}[1h])
            type: logql

            # Check for pod logs (gathered via API)
          - query: count_over_time({cluster="$CLUSTER", job!="integrations/kubernetes/eventhandler"}[1h])
            type: logql

            # Check for pod logs (gathered via PodLogs)
          - query: count_over_time({cluster="$CLUSTER", job="grafana/test-podlogs-object", source="podlogs_object"}[1h])
            type: logql

            # Check for traces
          - query: '{.k8s.cluster.name="$CLUSTER"}'
            type: traceql

          # These checks for metrics and traces that are being sent directly to this alloy via the receivers
          - query: alloy_build_info{cluster="from-the-other-alloy"}
            type: promql
          - query: '{.k8s.cluster.name="from-the-other-alloy"}'
            type: traceql

          # DPM check
          - query: avg(count_over_time(scrape_samples_scraped{cluster=~"$CLUSTER|from-the-other-alloy"}[1m]))
            type: promql
            expect:
              value: 1
              operator: ==

          # hostinfo connector check
          - query: traces_host_info
            type: promql
