---
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  url: https://github.com/grafana/k8s-monitoring-helm
  ref:
    branch: main
  ignore: |
    /*
    !/charts/k8s-monitoring-test
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring-test
spec:
  interval: 1m
  chart:
    spec:
      chart: charts/k8s-monitoring-test
      sourceRef:
        kind: GitRepository
        name: k8s-monitoring-test
      interval: 1m
  dependsOn:
    - name: loki
      namespace: loki
    - name: prometheus
      namespace: prometheus
  values:
    tests:
      - env:
          CLUSTER: ci-integrations-cluster
          PROMETHEUS_URL: http://prometheus-server.prometheus.svc:9090/api/v1/query
          PROMETHEUS_USER: promuser
          PROMETHEUS_PASS: prometheuspassword
          LOKI_URL: http://loki.loki.svc:3100/loki/api/v1/query
          LOKI_TENANTID: 1
          LOKI_USER: loki
          LOKI_PASS: lokipassword
        queries:
          # Check for Node label metrics
          - query: kube_node_labels{cluster="$CLUSTER"}
            type: promql

          # Check for Kepler metrics
          - query: kepler_container_joules_total{cluster="$CLUSTER"}
            type: promql

          # Check for Beyla metrics
          - query: beyla_internal_build_info{cluster="$CLUSTER"}
            type: promql

          # Check for CertManager metrics, discovered by service annotations
          - query: certmanager_clock_time_seconds{cluster="$CLUSTER", job="integrations/cert-manager"}
            type: promql

          # Check for Prometheus metrics, discovered by https pod annotations
          - query: prometheus_build_info{job="integrations/prometheus"}
            type: promql

          # Check for MySQL metrics, discovered by the module loaded above in .extraConfig
          - query: mysqld_exporter_build_info{cluster="$CLUSTER"}
            type: promql

          # Check for MySQL logs, discovered by the module loaded above in .logs.extraConfig
          - query: count_over_time({cluster="$CLUSTER", job="integrations/mysql"}[1h])
            type: logql

          # Cluster events still work, too
          - query: count_over_time({cluster="$CLUSTER", job="integrations/kubernetes/eventhandler"}[1h])
            type: logql

          # Regular pod logs still work, too (checking the Loki pod <namespace>/<pod_name>)
          - query: count_over_time({cluster="$CLUSTER", job="loki/loki"}[1h])
            type: logql

          # DPM check
          - query: avg(count_over_time(scrape_samples_scraped{cluster="$CLUSTER"}[1m]))
            type: promql
            expect:
              value: 1
              operator: ==
