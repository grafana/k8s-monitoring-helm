{{ define "alloy.config.logsServiceOTLP" }}
otelcol.receiver.loki "logs_service" {
  output {
    logs = [otelcol.processor.attributes.logs_service.input]
  }
}

otelcol.processor.attributes "logs_service" {
  action {
    key = "k8s.cluster.name"
    value = {{ required ".Values.cluster.name is a required value. Please set it and try again." .Values.cluster.name | quote }}
    action = "upsert"
  }
{{ with .Values.externalServices.loki }}
  {{- range $key, $value := .externalLabels }}
  action {
    key = {{ $key | quote }}
    value = {{ $value | quote }}
    action = "upsert"
  }
  {{- end }}
  {{- range $key, $value := .externalLabelsFrom }}
  action {
    key = {{ $key | quote }}
    value = {{ $value }}
    action = "upsert"
  }
  {{- end }}
  output {
    logs = [otelcol.processor.batch.logs_service.input]
  }
}

otelcol.processor.batch "logs_service" {
  send_batch_size = {{ .processors.batch.size | int }}
  send_batch_max_size = {{ .processors.batch.maxSize | int }}
  timeout = {{ .processors.batch.timeout | quote}}
  output {
{{- if .processors.memoryLimiter.enabled }}
    logs = [otelcol.processor.memory_limiter.logs_service.input]
  }
}

otelcol.processor.memory_limiter "logs_service" {
  check_interval = {{ .processors.memoryLimiter.checkInterval | quote }}
  limit = {{ .processors.memoryLimiter.limit | quote }}
  output {
{{- end }}
{{- if eq .protocol "otlp" }}
    logs = [otelcol.exporter.otlp.logs_service.input]
{{- end }}
{{- if eq .protocol "otlphttp" }}
    logs = [otelcol.exporter.otlphttp.logs_service.input]
{{- end }}
  }
}
{{- if eq .authMode "basic" }}

otelcol.auth.basic "logs_service" {
  username = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .basicAuth.usernameKey | quote }}])
  password = remote.kubernetes.secret.logs_service.data[{{ .basicAuth.passwordKey | quote }}]
}
{{- else if eq .authMode "bearerToken" }}
  {{- if .bearerToken.tokenFile }}

local.file "logs_service_bearer_token" {
  filename = .bearerToken.tokenFile
  is_secret = true
}
otelcol.auth.bearer "logs_service" {
  token = local.file.logs_service_bearer_token.content
}
  {{- else }}

otelcol.auth.bearer "logs_service" {
  token = remote.kubernetes.secret.logs_service.data[{{ .bearerToken.tokenKey | quote }}]
}
  {{- end }}
{{- else if eq .authMode "oauth2" }}
otelcol.auth.oauth2 "logs_service" {
  {{- if eq .oauth2.clientId "" }}
  client_id = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .oauth2.clientIdKey | quote }}])
  {{- else }}
  client_id = {{ .oauth2.clientId | quote }}
  {{- end }}

  {{- if eq .oauth2.clientSecretFile "" }}
  client_secret = remote.kubernetes.secret.logs_service.data[{{ .oauth2.clientSecretKey | quote }}]
  {{- else }}
  client_secret_file = {{ .oauth2.clientSecretFile | quote }}
  {{- end }}
  {{- if .oauth2.endpointParams }}
  endpoint_params = {
  {{- range $k, $v := .oauth2.endpointParams }}
    {{ $k }} = {{ $v | quote }},
  {{- end }}
  }
  {{- end }}
  {{- if .oauth2.scopes }}
  scopes = {{ .oauth2.scopes | toJson }}
  {{- end }}
  {{- if .oauth2.tokenURL }}
  token_url = {{ required ".Values.oauth2.tokenURL is a required value when .Values.authMode is oauth2" .oauth2.tokenURL | quote }}
  {{- end }}
}
{{- end }}
{{ if eq .protocol "otlp" }}
otelcol.exporter.otlp "logs_service" {
{{- end }}
{{- if eq .protocol "otlphttp" }}
otelcol.exporter.otlphttp "logs_service" {
{{- end }}
  client {
    endpoint = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .hostKey | quote }}]) + "{{ .writeEndpoint }}"
{{- if eq .authMode "basic" }}
    auth = otelcol.auth.basic.logs_service.handler
{{- else if eq .authMode "bearerToken" }}
    auth = otelcol.auth.bearer.logs_service.handler
{{- else if eq .authMode "oauth2" }}
    auth = otelcol.auth.oauth2.logs_service.handler
{{- end }}
    headers = {
      "X-Scope-OrgID" = nonsensitive(remote.kubernetes.secret.logs_service.data[{{ .tenantIdKey | quote }}]),
{{- range $key, $value := .extraHeaders }}
      {{ $key | quote }} = {{ $value | quote }},
{{- end }}
{{- range $key, $value := .extraHeadersFrom }}
      {{ $key | quote }} = {{ $value }},
{{- end }}
    }
{{- if .tls }}
    tls {
    {{- range $k, $v := .tls }}
      {{ $k }} = {{ $v | toJson }}
    {{- end }}
    }
{{- end }}
  }
}
{{- end }}
{{ end }}
