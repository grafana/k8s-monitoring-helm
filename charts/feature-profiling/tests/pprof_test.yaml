# yamllint disable rule:document-start rule:line-length rule:trailing-spaces
suite: Test default values
templates:
  - configmap.yaml
tests:
  - it: should build the pprof profiling configuration
    set:
      deployAsConfigMap: true
      ebpf:
        enabled: false
      java:
        enabled: false
      pprof:
        enabled: true
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data["module.alloy"]
          value: |-
            declare "profiling" {
              argument "profiles_destinations" {
                comment = "Must be a list of profile destinations where collected profiles should be forwarded to"
              }
              // Profiles: pprof
              discovery.kubernetes "pprof_pods" {
                selectors {
                  role = "pod"
                  field = "spec.nodeName=" + env("HOSTNAME")
                }
                role = "pod"
              }
            
              discovery.relabel "pprof_pods" {
                targets = discovery.kubernetes.pprof_pods.targets
                rule {
                  action        = "drop"
                  source_labels = ["__meta_kubernetes_pod_phase"]
                  regex         = "Pending|Succeeded|Failed|Completed"
                }
            
                rule {
                  regex  = "__meta_kubernetes_pod_label_(.+)"
                  action = "labelmap"
                }
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  target_label  = "namespace"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  target_label  = "pod"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  target_label  = "container"
                }
              }
            
              discovery.relabel "pprof_pods_block_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_block_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_block" {
                targets = concat(discovery.relabel.pprof_pods_block_default_name.output, discovery.relabel.pprof_pods_block_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = true
                  }
                  profile.process_cpu {
                    enabled = false
                  }
                  profile.fgprof {
                    enabled = false
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = false
                  }
                  profile.memory {
                    enabled = false
                  }
                  profile.mutex {
                    enabled = false
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
              discovery.relabel "pprof_pods_cpu_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_cpu_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_cpu" {
                targets = concat(discovery.relabel.pprof_pods_cpu_default_name.output, discovery.relabel.pprof_pods_cpu_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = false
                  }
                  profile.process_cpu {
                    enabled = true
                  }
                  profile.fgprof {
                    enabled = false
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = false
                  }
                  profile.memory {
                    enabled = false
                  }
                  profile.mutex {
                    enabled = false
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
              discovery.relabel "pprof_pods_fgprof_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_fgprof_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_fgprof" {
                targets = concat(discovery.relabel.pprof_pods_fgprof_default_name.output, discovery.relabel.pprof_pods_fgprof_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = false
                  }
                  profile.process_cpu {
                    enabled = false
                  }
                  profile.fgprof {
                    enabled = true
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = false
                  }
                  profile.memory {
                    enabled = false
                  }
                  profile.mutex {
                    enabled = false
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
              discovery.relabel "pprof_pods_goroutine_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_goroutine_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_goroutine" {
                targets = concat(discovery.relabel.pprof_pods_goroutine_default_name.output, discovery.relabel.pprof_pods_goroutine_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = false
                  }
                  profile.process_cpu {
                    enabled = false
                  }
                  profile.fgprof {
                    enabled = false
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = true
                  }
                  profile.memory {
                    enabled = false
                  }
                  profile.mutex {
                    enabled = false
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
              discovery.relabel "pprof_pods_memory_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_memory_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_memory" {
                targets = concat(discovery.relabel.pprof_pods_memory_default_name.output, discovery.relabel.pprof_pods_memory_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = false
                  }
                  profile.process_cpu {
                    enabled = false
                  }
                  profile.fgprof {
                    enabled = false
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = false
                  }
                  profile.memory {
                    enabled = true
                  }
                  profile.mutex {
                    enabled = false
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
              discovery.relabel "pprof_pods_mutex_default_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
                  regex         = ""
                  action        = "keep"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              discovery.relabel "pprof_pods_mutex_custom_name" {
                targets = discovery.relabel.pprof_pods.output
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
                  regex         = "true"
                  action        = "keep"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
                  regex         = ""
                  action        = "drop"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  target_label  = "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"
                  action        = "keepequal"
                }
            
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
                  action        = "replace"
                  regex         = "(https?)"
                  target_label  = "__scheme__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
                  action        = "replace"
                  regex         = "(.+)"
                  target_label  = "__profile_path__"
                  replacement   = "$1"
                }
                rule {
                  source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
                  action        = "replace"
                  regex         = "(.+?)(?::\\d+)?;(\\d+)"
                  target_label  = "__address__"
                  replacement   = "$1:$2"
                }
              }
            
              pyroscope.scrape "pyroscope_scrape_mutex" {
                targets = concat(discovery.relabel.pprof_pods_mutex_default_name.output, discovery.relabel.pprof_pods_mutex_custom_name.output)
            
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                profiling_config {
                  profile.block {
                    enabled = false
                  }
                  profile.process_cpu {
                    enabled = false
                  }
                  profile.fgprof {
                    enabled = false
                  }
                  profile.godeltaprof_block {
                    enabled = false
                  }
                  profile.godeltaprof_memory {
                    enabled = false
                  }
                  profile.godeltaprof_mutex {
                    enabled = false
                  }
                  profile.goroutine {
                    enabled = false
                  }
                  profile.memory {
                    enabled = false
                  }
                  profile.mutex {
                    enabled = true
                  }
                }
            
                forward_to = [pyroscope.write.profiles_service.receiver]
              }
            }
