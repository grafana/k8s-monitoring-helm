---
# yamllint disable rule:document-start rule:line-length rule:trailing-spaces rule:empty-lines
suite: Test Loki integration
templates:
  - configmap.yaml
tests:
  - it: should create the loki metrics config
    set:
      deployAsConfigMap: true
      loki:
        instances:
          - name: loki
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data["metrics.alloy"]
          value: |-
            declare "loki_integration" {
              argument "metrics_destinations" {
                comment = "Must be a list of metric destinations where collected metrics should be forwarded to"
              }

              declare "loki_integration_discovery" {
                argument "namespaces" {
                  comment = "The namespaces to look for targets in (default: [] is all namespaces)"
                  optional = true
                }

                argument "field_selectors" {
                  comment = "The field selectors to use to find matching targets (default: [])"
                  optional = true
                }

                argument "label_selectors" {
                  comment = "The label selectors to use to find matching targets (default: [\"app.kubernetes.io/name=loki\"])"
                  optional = true
                }

                argument "port_name" {
                  comment = "The of the port to scrape metrics from (default: http-metrics)"
                  optional = true
                }

                // loki service discovery for all of the pods
                discovery.kubernetes "loki_pods" {
                  role = "pod"

                  selectors {
                    role = "pod"
                    field = join(coalesce(argument.field_selectors.value, []), ",")
                    label = join(coalesce(argument.label_selectors.value, ["app.kubernetes.io/name=loki"]), ",")
                  }

                  namespaces {
                    names = coalesce(argument.namespaces.value, [])
                  }
                }

                // loki relabelings (pre-scrape)
                discovery.relabel "loki_pods" {
                  targets = discovery.kubernetes.loki_pods.targets

                  // keep only the specified metrics port name, and pods that are Running and ready
                  rule {
                    source_labels = [
                      "__meta_kubernetes_pod_container_port_name",
                      "__meta_kubernetes_pod_phase",
                      "__meta_kubernetes_pod_ready",
                      "__meta_kubernetes_pod_container_init",
                    ]
                    separator = "@"
                    regex = coalesce(argument.port_name.value, "http-metrics") + "@Running@true@false"
                    action = "keep"
                  }



                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  target_label  = "namespace"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  target_label  = "pod"
                }

                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  target_label  = "container"
                }

                rule {
                  source_labels = [
                    "__meta_kubernetes_pod_controller_kind",
                    "__meta_kubernetes_pod_controller_name",
                  ]
                  separator = "/"
                  target_label  = "workload"
                }

                // remove the hash from the ReplicaSet
                rule {
                  source_labels = ["workload"]
                  regex = "(ReplicaSet/.+)-.+"
                  target_label  = "workload"
                }

                // set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
                rule {
                  action = "replace"
                  source_labels = [
                    "__meta_kubernetes_pod_label_app_kubernetes_io_name",
                    "__meta_kubernetes_pod_label_k8s_app",
                    "__meta_kubernetes_pod_label_app",
                  ]
                  separator = ";"
                  regex = "^(?:;*)?([^;]+).*$"
                  replacement = "$1"
                  target_label = "app"
                }

                // set the component if specified as metadata labels "component:" or "app.kubernetes.io/component:" or "k8s-component:"
                rule {
                  action = "replace"
                  source_labels = [
                    "__meta_kubernetes_pod_label_app_kubernetes_io_component",
                    "__meta_kubernetes_pod_label_k8s_component",
                    "__meta_kubernetes_pod_label_component",
                  ]
                  regex = "^(?:;*)?([^;]+).*$"
                  replacement = "$1"
                  target_label = "component"
                }

                // set a source label
                rule {
                  action = "replace"
                  replacement = "kubernetes"
                  target_label = "source"
                }
                }

                export "output" {
                  value = discovery.relabel.loki_pods.output
                }
              }

              declare "loki_integration_scrape" {
                argument "targets" {
                  comment = "Must be a list() of targets"
                }

                argument "forward_to" {
                  comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
                }

                argument "keep_metrics" {
                  comment = "A regular expression of metrics to keep (default: see below)"
                  optional = true
                }

                argument "drop_metrics" {
                  comment = "A regular expression of metrics to drop (default: see below)"
                  optional = true
                }

                argument "scrape_interval" {
                  comment = "How often to scrape metrics from the targets (default: 60s)"
                  optional = true
                }

                argument "max_cache_size" {
                  comment = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
                  optional = true
                }

                argument "clustering" {
                  comment = "Whether or not clustering should be enabled (default: false)"
                  optional = true
                }

                prometheus.scrape "loki" {
                  job_name = "integrations/loki"
                  forward_to = [prometheus.relabel.loki.receiver]
                  targets = argument.targets.value
                  scrape_interval = coalesce(argument.scrape_interval.value, "60s")

                  clustering {
                    enabled = coalesce(argument.clustering.value, false)
                  }
                }

                // loki metric relabelings (post-scrape)
                prometheus.relabel "loki" {
                  forward_to = argument.forward_to.value
                  max_cache_size = coalesce(argument.max_cache_size.value, 100000)

                  // drop metrics that match the drop_metrics regex
                  rule {
                    source_labels = ["__name__"]
                    regex = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
                    action = "drop"
                  }
                }
              }

              loki_integration_discovery "loki" {
                namespaces = []
                label_selectors = ["app.kubernetes.io/name=loki"]
                port_name = "http-metrics"
              }

              loki_integration_scrape  "loki" {
                targets = loki_integration_discovery.loki.output
                clustering = true
                keep_metrics = "up|go_gc_cycles_total_gc_cycles_total|go_gc_duration_seconds|go_gc_duration_seconds_count|go_gc_duration_seconds_sum|go_gc_pauses_seconds_bucket|go_goroutines|go_memstats_heap_inuse_bytes|loki_azure_blob_request_duration_seconds_bucket|loki_azure_blob_request_duration_seconds_count|loki_bigtable_request_duration_seconds_bucket|loki_bigtable_request_duration_seconds_count|loki_bloom_blocks_cache_added_total|loki_bloom_blocks_cache_entries|loki_bloom_blocks_cache_evicted_total|loki_bloom_blocks_cache_fetched_total|loki_bloom_blocks_cache_usage_bytes|loki_bloom_chunks_indexed_total|loki_bloom_gateway_block_query_latency_seconds_bucket|loki_bloom_gateway_dequeue_duration_seconds_bucket|loki_bloom_gateway_filtered_chunks_sum|loki_bloom_gateway_filtered_series_sum|loki_bloom_gateway_inflight_tasks|loki_bloom_gateway_process_duration_seconds_bucket|loki_bloom_gateway_process_duration_seconds_count|loki_bloom_gateway_querier_chunks_filtered_total|loki_bloom_gateway_querier_chunks_skipped_total|loki_bloom_gateway_querier_chunks_total|loki_bloom_gateway_querier_series_filtered_total|loki_bloom_gateway_querier_series_skipped_total|loki_bloom_gateway_querier_series_total|loki_bloom_gateway_queue_duration_seconds_bucket|loki_bloom_gateway_queue_duration_seconds_count|loki_bloom_gateway_queue_duration_seconds_sum|loki_bloom_gateway_queue_length|loki_bloom_gateway_requested_chunks_sum|loki_bloom_gateway_requested_series_sum|loki_bloom_gateway_tasks_dequeued_bucket|loki_bloom_gateway_tasks_dequeued_total|loki_bloom_gateway_tasks_processed_total|loki_bloom_inserts_total|loki_bloom_recorder_chunks_total|loki_bloom_recorder_series_total|loki_bloom_size_bucket|loki_bloom_store_blocks_fetched_size_bytes_bucket|loki_bloom_store_blocks_fetched_sum|loki_bloom_store_download_queue_size_sum|loki_bloom_store_metas_fetched_bucket|loki_bloom_store_metas_fetched_size_bytes_bucket|loki_bloom_store_metas_fetched_sum|loki_bloom_tokens_total|loki_bloombuilder_blocks_created_total|loki_bloombuilder_blocks_reused_total|loki_bloombuilder_bytes_per_task_bucket|loki_bloombuilder_chunk_series_size_sum|loki_bloombuilder_metas_created_total|loki_bloombuilder_processing_task|loki_bloombuilder_series_per_task_bucket|loki_bloomplanner_blocks_deleted_total|loki_bloomplanner_connected_builders|loki_bloomplanner_inflight_tasks|loki_bloomplanner_metas_deleted_total|loki_bloomplanner_queue_length|loki_bloomplanner_retention_running|loki_bloomplanner_retention_time_seconds_bucket|loki_bloomplanner_tenant_tasks_completed|loki_bloomplanner_tenant_tasks_planned|loki_boltdb_shipper_compact_tables_operation_duration_seconds|loki_boltdb_shipper_compact_tables_operation_last_successful_run_timestamp_seconds|loki_boltdb_shipper_compact_tables_operation_total|loki_boltdb_shipper_request_duration_seconds_bucket|loki_boltdb_shipper_request_duration_seconds_count|loki_boltdb_shipper_request_duration_seconds_sum|loki_boltdb_shipper_retention_marker_count_total|loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_bucket|loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_count|loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_sum|loki_boltdb_shipper_retention_marker_table_processed_total|loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_bucket|loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_count|loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_sum|loki_boltdb_shipper_retention_sweeper_marker_file_processing_current_time|loki_boltdb_shipper_retention_sweeper_marker_files_current|loki_build_info|loki_chunk_store_deduped_chunks_total|loki_chunk_store_index_entries_per_chunk_count|loki_chunk_store_index_entries_per_chunk_sum|loki_compactor_apply_retention_last_successful_run_timestamp_seconds|loki_compactor_apply_retention_operation_duration_seconds|loki_compactor_apply_retention_operation_total|loki_compactor_delete_requests_processed_total|loki_compactor_delete_requests_received_total|loki_compactor_deleted_lines|loki_compactor_load_pending_requests_attempts_total|loki_compactor_locked_table_successive_compaction_skips|loki_compactor_oldest_pending_delete_request_age_seconds|loki_compactor_pending_delete_requests_count|loki_consul_request_duration_seconds_bucket|loki_discarded_samples_total|loki_distributor_bytes_received_total|loki_distributor_ingester_append_failures_total|loki_distributor_lines_received_total|loki_distributor_structured_metadata_bytes_received_total|loki_dynamo_consumed_capacity_total|loki_dynamo_dropped_requests_total|loki_dynamo_failures_total|loki_dynamo_query_pages_count|loki_dynamo_request_duration_seconds_bucket|loki_dynamo_request_duration_seconds_count|loki_dynamo_throttled_total|loki_embeddedcache_entries|loki_embeddedcache_memory_bytes|loki_gcs_request_duration_seconds_bucket|loki_gcs_request_duration_seconds_count|loki_index_gateway_postfilter_chunks_sum|loki_index_gateway_prefilter_chunks_sum|loki_index_request_duration_seconds_bucket|loki_index_request_duration_seconds_count|loki_index_request_duration_seconds_sum|loki_ingester_chunk_age_seconds_bucket|loki_ingester_chunk_age_seconds_count|loki_ingester_chunk_age_seconds_sum|loki_ingester_chunk_bounds_hours_bucket|loki_ingester_chunk_bounds_hours_count|loki_ingester_chunk_bounds_hours_sum|loki_ingester_chunk_entries_bucket|loki_ingester_chunk_entries_count|loki_ingester_chunk_entries_sum|loki_ingester_chunk_size_bytes_bucket|loki_ingester_chunk_utilization_bucket|loki_ingester_chunk_utilization_count|loki_ingester_chunk_utilization_sum|loki_ingester_chunks_flushed_total|loki_ingester_flush_queue_length|loki_ingester_memory_chunks|loki_ingester_memory_streams|loki_ingester_streams_created_total|loki_memcache_request_duration_seconds_bucket|loki_memcache_request_duration_seconds_count|loki_panic_total|loki_prometheus_rule_group_rules|loki_request_duration_seconds_bucket|loki_request_duration_seconds_count|loki_request_duration_seconds_sum|loki_ruler_wal_appender_ready|loki_ruler_wal_disk_size|loki_ruler_wal_prometheus_remote_storage_highest_timestamp_in_seconds|loki_ruler_wal_prometheus_remote_storage_queue_highest_sent_timestamp_seconds|loki_ruler_wal_prometheus_remote_storage_samples_pending|loki_ruler_wal_prometheus_remote_storage_samples_total|loki_ruler_wal_samples_appended_total|loki_ruler_wal_storage_created_series_total|loki_s3_request_duration_seconds_bucket|loki_s3_request_duration_seconds_count"
                scrape_interval = "60s"
                max_cache_size = 100000
                forward_to = argument.metrics_destinations.value
              }
            }

  - it: should add the loki processing stage to the logs config
    set:
      deployAsConfigMap: true
      loki:
        instances:
          - name: loki
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data["logs.alloy"]
          value: |-
            // Integration rules
            discovery.relabel "test" {
              rule {
                source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                separator = ";"
                regex = "loki"
                target_label = "integration"
                replacement = "loki"
              }
              rule {
                source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                separator = ";"
                regex = "loki"
                target_label = "instance"
                replacement = "loki"
              }
            }

            // Processing stages
            loki.process "test" {
              // Integration: Loki
              stage.match {
                selector = "{integration=\"loki\",instance=\"loki\"}"

                // extract some of the fields from the log line
                stage.logfmt {
                  mapping = {
                    "ts" = "",
                    "level" = "",
                    "caller" = "caller",
                    "component" = "component",
                  }
                }
                // reset the timestamp to the extracted value
                stage.timestamp {
                  source = "ts"
                  format = "RFC3339Nano"
                }
                // remove the timestamp from the log line
                stage.replace {
                  expression = "(ts=[^ ]+\\s+)"
                  replace = ""
                }
                // clean up the caller to remove the line
                stage.replace {
                  source = "caller"
                  expression = "(:[0-9]+$)"
                  replace = ""
                }
                // set the structured metadata values
                stage.structured_metadata {
                  values = {
                    "caller" = "caller",
                    "component" = "component",
                  }
                }
                // set the level as a label
                stage.labels {
                  values = {
                    level = "level",
                  }
                }

                // set the static labels
                stage.static_labels {
                  values = {
                    job = "integrations/loki",
                  }
                }

                // drop the integration label and any other labels that are not needed
                stage.label_drop {
                  values = [
                    "integration",
                  ]
                }
              }
            }

  - it: should create the Alloy config with the integration allow list
    set:
      deployAsConfigMap: true
      loki:
        instances:
          - name: loki
            metrics:
              tuning:
                useIntegrationAllowList: true
    asserts:
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data["metrics.alloy"]
          pattern: loki_build_info

  - it: should allow you to overwrite the name label
    set:
      deployAsConfigMap: true
      alloy:
        instances:
          - name: loki
            labelSelectors:
              app.kubernetes.io/name: my-loki-instance
    asserts:
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data["metrics.alloy"]
          pattern: label_selectors = \["app.kubernetes.io/name=my-loki-instance"\]

  - it: should allow you to dismiss the name label
    set:
      deployAsConfigMap: true
      alloy:
        instances:
          - name: loki
            labelSelectors:
              app.kubernetes.io/name: null
              app.kubernetes.io/instance: k8smon
    asserts:
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data["metrics.alloy"]
          pattern: label_selectors = \["app.kubernetes.io/instance=k8smon"\]
