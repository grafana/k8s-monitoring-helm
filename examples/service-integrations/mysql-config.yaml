---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-monitoring
  namespace: mysql
data:
  metrics.alloy: |-
    declare "metrics" {
      argument "host" {
          default = "mysql"
          optional = true
          comment = "Host of the of the Database"
      }
      argument "instance" {
          default = "primary"
          optional = true
          comment = "Instance of the Database"
      }
      argument "namespace" {
          default = "default"
          optional = true
          comment = "Namespace of the MySQL deployment"
      }
      argument "secret_name" {
          default = "mysql"
          optional = true
          comment = "Name of the secret for MySQL"
      }
      argument "username" {
          default = "root"
          optional = true
          comment = "Username for connecting to the database"
      }
      argument "password_key" {
          default = "mysql-root-password"
          optional = true
          comment = "Key in the secret to find the password"
      }
      argument "all_services" {}
      argument "metrics_destination" {}

      remote.kubernetes.secret "mysql" {
        name = argument.secret_name.value
        namespace = argument.namespace.value
      }

      // Metrics
      discovery.relabel "mysql_service" {
        targets = argument.all_services.value
        rule {
          source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
          regex = "mysql"
          action = "keep"
        }
      }

      prometheus.exporter.mysql "mysql" {
        data_source_name = argument.username.value + ":" + nonsensitive(remote.kubernetes.secret.mysql.data[argument.password_key.value]) + "@(" + argument.host.value + ")/"
      }

      prometheus.scrape "mysql" {
        targets      = prometheus.exporter.mysql.mysql.targets
        job_name     = "integrations/mysql"
        clustering {
          enabled = true
        }
        forward_to   = [prometheus.relabel.mysql.receiver]
      }

      prometheus.relabel "mysql" {
        rule {
          replacement = argument.instance.value
          target_label = "instance"
        }
        forward_to   = [argument.metrics_destination.value]
      }
    }
  logs.alloy: |-
    declare "logs" {
      argument "instance" {
          default = "primary"
          optional = true
          comment = "Instance of the Database"
      }
      argument "all_pods" {}
      argument "logs_destination" {}

      // Logs
      discovery.relabel "mysql_pods" {
        targets = argument.all_pods.value
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
          regex = "mysql"
          action = "keep"
        }
      }

      local.file_match "mysql_logs" {
        path_targets = discovery.relabel.mysql_pods.output
      }

      loki.source.file "mysql_logs" {
        targets    = local.file_match.mysql_logs.targets
        forward_to = [loki.process.mysql_logs.receiver]
      }

      loki.process "mysql_logs" {
        // If you're using docker, replace `cri` with `docker` below.
        stage.cri {}
        stage.labels {
          values = {
            instance = "pod",
          }
        }
        stage.regex {
          expression = "(?P<timestamp>.+) (?P<thread>[\\d]+) \\[(?P<label>.+?)\\]( \\[(?P<err_code>.+?)\\] \\[(?P<subsystem>.+?)\\])? (?P<msg>.+)"
        }
        stage.labels {
          values = {
            level = "label",
            err_code = "err_code",
            subsystem = "subsystem",
          }
        }
        stage.drop {
          expression = "^ *$"
          drop_counter_reason = "drop empty lines"
        }
        stage.static_labels {
          values = {
            job = "integrations/mysql",
            instance = argument.instance.value,
          }
        }
        forward_to = [argument.logs_destination.value]
      }
    }
