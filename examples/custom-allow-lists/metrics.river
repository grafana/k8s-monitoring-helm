discovery.kubernetes "nodes" {
  role = "node"
}
    
discovery.kubernetes "pods" {
  role = "pod"
}
    
discovery.kubernetes "services" {
  role = "service"
}
    
// Grafana Agent
discovery.relabel "agent" {
  targets = discovery.kubernetes.services.targets
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
    regex = "k8smon"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
    regex = "grafana-agent"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = "http-metrics"
    action = "keep"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "agent" {
  job_name   = "integrations/agent"
  targets  = discovery.relabel.agent.output
  forward_to = [prometheus.relabel.agent.receiver]
}

prometheus.relabel "agent" {
  rule {
    source_labels = ["__name__"]
    regex = "up|agent_build_info"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// Kubelet
discovery.relabel "kubelet" {
  targets = discovery.kubernetes.nodes.targets
  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc.cluster.local:443"
  }
  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    regex         = "(.+)"
    replacement   = "/api/v1/nodes/${1}/proxy/metrics"
    target_label  = "__metrics_path__"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "kubelet" {
  job_name   = "integrations/kubernetes/kubelet"
  targets  = discovery.relabel.kubelet.output
  scheme   = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.relabel.kubelet.receiver]
}

prometheus.relabel "kubelet" {
  rule {
    source_labels = ["__name__"]
    regex = "up|kubelet_node_name|kubernetes_build_info"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// cAdvisor
discovery.relabel "cadvisor" {
  targets = discovery.kubernetes.nodes.targets
  rule {
    target_label = "__address__"
    replacement  = "kubernetes.default.svc.cluster.local:443"
  }
  rule {
    source_labels = ["__meta_kubernetes_node_name"]
    regex         = "(.+)"
    replacement   = "/api/v1/nodes/${1}/proxy/metrics/cadvisor"
    target_label  = "__metrics_path__"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "cadvisor" {
  job_name   = "integrations/kubernetes/cadvisor"
  targets    = discovery.relabel.cadvisor.output
  scheme     = "https"
  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
  tls_config {
    insecure_skip_verify = true
  }
  forward_to = [prometheus.relabel.cadvisor.receiver]
}

prometheus.relabel "cadvisor" {
  rule {
    source_labels = ["__name__"]
    regex = "up|container_memory_cache|container_memory_rss|container_memory_swap"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// Kube State Metrics
discovery.relabel "kube_state_metrics" {
  targets = discovery.kubernetes.services.targets
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
    regex = "k8smon"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
    regex = "kube-state-metrics"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = "http"
    action = "keep"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "kube_state_metrics" {
  job_name   = "integrations/kubernetes/kube-state-metrics"
  targets    = discovery.relabel.kube_state_metrics.output
  forward_to = [prometheus.relabel.kube_state_metrics.receiver]
}

prometheus.relabel "kube_state_metrics" {
  rule {
    source_labels = ["__name__"]
    regex = "up|*"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// Node Exporter
discovery.relabel "node_exporter" {
  targets = discovery.kubernetes.pods.targets
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
    regex = "k8smon"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    regex = "prometheus-node-exporter.*"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "replace"
    target_label = "instance"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "node_exporter" {
  job_name   = "integrations/node_exporter"
  targets  = discovery.relabel.node_exporter.output
  forward_to = [prometheus.relabel.node_exporter.receiver]
}

prometheus.relabel "node_exporter" {
  rule {
    source_labels = ["__name__"]
    regex = "up|node_*"
    action = "keep"
  }
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// OpenCost
discovery.relabel "opencost" {
  targets = discovery.kubernetes.services.targets
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
    regex = "k8smon"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
    regex = "opencost"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_service_port_name"]
    regex = "http"
    action = "keep"
  }
  rule {
    source_labels = ["__name__"]
    replacement   = "custom-allow-lists-test"
    target_label  = "cluster"
  }
}

prometheus.scrape "opencost" {
  job_name   = "integrations/kubernetes/opencost"
  targets    = discovery.relabel.opencost.output
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// PodMonitor
prometheus.operator.podmonitors "pod_monitors" {
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// ServiceMonitor
prometheus.operator.servicemonitors "service_monitors" {
  forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
}
    
// Grafana Cloud Prometheus
local.file "prometheus_host" {
  filename  = "/etc/grafana-agent-credentials/prometheus_host"
}

local.file "prometheus_username" {
  filename  = "/etc/grafana-agent-credentials/prometheus_username"
}

local.file "prometheus_password" {
  filename  = "/etc/grafana-agent-credentials/prometheus_password"
  is_secret = true
}

prometheus.remote_write "grafana_cloud_prometheus" {
  endpoint {
    url = nonsensitive(local.file.prometheus_host.content) + "/api/prom/push"

    basic_auth {
      username = local.file.prometheus_username.content
      password = local.file.prometheus_password.content
    }
  }
}
