discovery.kubernetes "pods" {
  role = "pod"
}

// Pod Logs
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
    separator = "/"
    action = "replace"
    replacement = "$1"
    target_label = "job"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "keep"
    regex = env("HOSTNAME")
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    separator = "/"
    action = "replace"
    replacement = "/var/log/pods/*$1/*.log"
    target_label = "__path__"
  }

  // set the container runtime as a label
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_container_id"]
    regex = "^(\\w+):\\/\\/.+$"
    replacement = "$1"
    target_label = "tmp_container_runtime"
  }
}

local.file_match "pod_logs" {
  path_targets = discovery.relabel.pod_logs.output
}

loki.source.file "pod_logs" {
  targets    = local.file_match.pod_logs.targets
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  stage.match {
    selector = "{tmp_container_runtime=\"containerd\"}"
    // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
    stage.cri {}

    // Set the extract flags and stream values as labels
    stage.labels {
      values = {
        flags  = "",
        stream  = "",
      }
    }
  }

  // if the label tmp_container_runtime from above is docker parse using docker
  stage.match {
    selector = "{tmp_container_runtime=\"docker\"}"
    // the docker processing stage extracts the following k/v pairs: log, stream, time
    stage.docker {}

    // Set the extract stream value as a label
    stage.labels {
      values = {
        stream  = "",
      }
    }
  }

  // drop the temporary container runtime label as it is no longer needed
  stage.label_drop {
    values = ["tmp_container_runtime"]
  }
  forward_to = [loki.write.grafana_cloud_loki.receiver]
}

// Grafana Cloud Loki
local.file "loki_host" {
  filename  = "/etc/grafana-agent-credentials/loki_host"
}

local.file "loki_username" {
  filename  = "/etc/grafana-agent-credentials/loki_username"
}

local.file "loki_password" {
  filename  = "/etc/grafana-agent-credentials/loki_password"
  is_secret = true
}

loki.write "grafana_cloud_loki" {
  endpoint {
    url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"

    basic_auth {
      username = local.file.loki_username.content
      password = local.file.loki_password.content
    }
  }
  external_labels = {
    region = "southwest",
    tenant = "widgetco",
    cluster = "custom-config-test",
  }
}

discovery.relabel "postgres_logs" {
  targets = discovery.relabel.pod_logs.output
  
  rule {
    source_labels = ["namespace"]
    regex = "postgres"
    action = "keep"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app"]
    regex = "database"
    action = "keep"
  }
}

local.file_match "postgres_logs" {
  path_targets = discovery.relabel.postgres_logs.output
}

loki.source.file "postgres_logs" {
  targets    = local.file_match.postgres_logs.targets
  forward_to = [loki.process.postgres_logs.receiver]
}

loki.process "postgres_logs" {
  stage.cri {}
  stage.static_labels {
    values = {
      job = "integrations/postgres_exporter",
      instance = "animaldb",
    }
  }
  forward_to = [loki.write.grafana_cloud_loki.receiver]
}
