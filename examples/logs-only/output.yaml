---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.26.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/charts/grafana-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/templates/credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-agent-credentials
  namespace: default
type: Opaque
data:
  loki_host: "aHR0cHM6Ly9sb2tpLmV4YW1wbGUuY29t"
  loki_username: "MTIzNDU="
  loki_password: "SXQncyBhIHNlY3JldCB0byBldmVyeW9uZQ=="
  loki_tenantId: "MjAwMA=="
---
# Source: k8s-monitoring/templates/grafana-agent-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent
  namespace: default
data:
  config.river: |-
    discovery.kubernetes "nodes" {
      role = "node"
    }
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.kubernetes "services" {
      role = "service"
    }
    
    // Cluster Events
    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Grafana Cloud Loki
    local.file "loki_host" {
      filename  = "/etc/grafana-agent-credentials/loki_host"
    }
    
    local.file "loki_username" {
      filename  = "/etc/grafana-agent-credentials/loki_username"
    }
    
    local.file "loki_password" {
      filename  = "/etc/grafana-agent-credentials/loki_password"
      is_secret = true
    }
    
    local.file "loki_tenantid" {
      filename  = "/etc/grafana-agent-credentials/loki_tenantId"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"
        tenant_id = local.file.loki_tenantid.content
    
        basic_auth {
          username = local.file.loki_username.content
          password = local.file.loki_password.content
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/grafana-agent-logs-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent-logs
  namespace: default
data:
  config.river: |-
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    // Pod Logs
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
    
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator = "/"
        action = "replace"
        replacement = "$1"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "keep"
        regex = env("HOSTNAME")
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator = "/"
        action = "replace"
        replacement = "/var/log/pods/*$1/*.log"
        target_label = "__path__"
      }
    
      // set the container runtime as a label
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex = "^(\\w+):\\/\\/.+$"
        replacement = "$1"
        target_label = "tmp_container_runtime"
      }
    }
    
    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }
    
    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    loki.process "pod_logs" {
      stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
        stage.cri {}
    
        // Set the extract flags and stream values as labels
        stage.labels {
          values = {
            flags  = "",
            stream  = "",
          }
        }
      }
    
      // if the label tmp_container_runtime from above is docker parse using docker
      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        // the docker processing stage extracts the following k/v pairs: log, stream, time
        stage.docker {}
    
        // Set the extract stream value as a label
        stage.labels {
          values = {
            stream  = "",
          }
        }
      }
    
      // drop the temporary container runtime label as it is no longer needed
      stage.label_drop {
        values = ["tmp_container_runtime"]
      }
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Grafana Cloud Loki
    local.file "loki_host" {
      filename  = "/etc/grafana-agent-credentials/loki_host"
    }
    
    local.file "loki_username" {
      filename  = "/etc/grafana-agent-credentials/loki_username"
    }
    
    local.file "loki_password" {
      filename  = "/etc/grafana-agent-credentials/loki_password"
      is_secret = true
    }
    
    local.file "loki_tenantid" {
      filename  = "/etc/grafana-agent-credentials/loki_tenantId"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"
        tenant_id = local.file.loki_tenantid.content
    
        basic_auth {
          username = local.file.loki_username.content
          password = local.file.loki_password.content
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/kubernetes-monitoring-telemetry.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-monitoring-telemetry
  namespace: default
data:
  metrics.prom: |
    # HELP grafana_kubernetes_monitoring_build_info A metric to report the version of the Kubernetes Monitoring Helm chart as well as a summary of enabled features
    # TYPE grafana_kubernetes_monitoring_build_info gauge
    grafana_kubernetes_monitoring_build_info{version="0.2.8", namespace="default", metrics="disabled", logs="enabled,events,pod_logs", traces="disabled", deployments=""} 1
---
# Source: k8s-monitoring/charts/grafana-agent/charts/crds/templates/monitoring.grafana.com_podlogs.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: podlogs.monitoring.grafana.com
spec:
  group: monitoring.grafana.com
  names:
    categories:
    - grafana-agent
    kind: PodLogs
    listKind: PodLogsList
    plural: podlogs
    singular: podlogs
  scope: Namespaced
  versions:
  - name: v1alpha2
    schema:
      openAPIV3Schema:
        description: PodLogs defines how to collect logs for a Pod.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PodLogsSpec defines how to collect logs for a Pod.
            properties:
              namespaceSelector:
                description: Selector to select which namespaces the Pod objects are
                  discovered from.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              relabelings:
                description: RelabelConfigs to apply to logs before delivering.
                items:
                  description: 'RelabelConfig allows dynamic rewriting of the label
                    set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section
                    of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs'
                  properties:
                    action:
                      default: replace
                      description: Action to perform based on regex matching. Default
                        is 'replace'. uppercase and lowercase actions require Prometheus
                        >= 2.36.
                      enum:
                      - replace
                      - Replace
                      - keep
                      - Keep
                      - drop
                      - Drop
                      - hashmod
                      - HashMod
                      - labelmap
                      - LabelMap
                      - labeldrop
                      - LabelDrop
                      - labelkeep
                      - LabelKeep
                      - lowercase
                      - Lowercase
                      - uppercase
                      - Uppercase
                      type: string
                    modulus:
                      description: Modulus to take of the hash of the source label
                        values.
                      format: int64
                      type: integer
                    regex:
                      description: Regular expression against which the extracted
                        value is matched. Default is '(.*)'
                      type: string
                    replacement:
                      description: Replacement value against which a regex replace
                        is performed if the regular expression matches. Regex capture
                        groups are available. Default is '$1'
                      type: string
                    separator:
                      description: Separator placed between concatenated source label
                        values. default is ';'.
                      type: string
                    sourceLabels:
                      description: The source labels select values from existing labels.
                        Their content is concatenated using the configured separator
                        and matched against the configured regular expression for
                        the replace, keep, and drop actions.
                      items:
                        description: LabelName is a valid Prometheus label name which
                          may only contain ASCII letters, numbers, as well as underscores.
                        pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
                        type: string
                      type: array
                    targetLabel:
                      description: Label to which the resulting value is written in
                        a replace action. It is mandatory for replace actions. Regex
                        capture groups are available.
                      type: string
                  type: object
                type: array
              selector:
                description: Selector to select Pod objects. Required.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
            required:
            - selector
            type: object
        type: object
    served: true
    storage: true
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.26.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.26.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent-logs
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent-logs
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.26.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/cluster_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-cluster
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: 'None'
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    # Do not include the -metrics suffix in the port name, otherwise metrics
    # can be double-collected with the non-headless Service if it's also
    # enabled.
    #
    # This service should only be used for clustering, and not metric
    # collection.
    - name: http
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.26.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent-logs
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent-logs
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent-logs
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.37.1
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: dockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            -
              mountPath: /etc/grafana-agent-credentials
              name: grafana-agent-credentials
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent-logs
        - name: varlog
          hostPath:
            path: /var/log
        - name: dockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: grafana-agent-credentials
          secret:
            secretName: grafana-agent-credentials
---
# Source: k8s-monitoring/charts/grafana-agent/templates/controllers/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.26.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.37.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  podManagementPolicy: Parallel
  minReadySeconds: 10
  serviceName: k8smon-grafana-agent
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.37.1
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
            - --cluster.enabled=true
            - --cluster.join-addresses=k8smon-grafana-agent-cluster
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            -
              mountPath: /etc/grafana-agent-credentials
              name: grafana-agent-credentials
            -
              mountPath: /etc/kubernetes-monitoring-telemetry
              name: kubernetes-monitoring-telemetry
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent
        - name: grafana-agent-credentials
          secret:
            secretName: grafana-agent-credentials
        - configMap:
            name: kubernetes-monitoring-telemetry
          name: kubernetes-monitoring-telemetry
---
# Source: k8s-monitoring/templates/hooks/grafana-agent-config-test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent-test
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  config.river: |-
    discovery.kubernetes "nodes" {
      role = "node"
    }
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.kubernetes "services" {
      role = "service"
    }
    
    // Cluster Events
    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Grafana Cloud Loki
    local.file "loki_host" {
      filename  = "/etc/grafana-agent-credentials/loki_host"
    }
    
    local.file "loki_username" {
      filename  = "/etc/grafana-agent-credentials/loki_username"
    }
    
    local.file "loki_password" {
      filename  = "/etc/grafana-agent-credentials/loki_password"
      is_secret = true
    }
    
    local.file "loki_tenantid" {
      filename  = "/etc/grafana-agent-credentials/loki_tenantId"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"
        tenant_id = local.file.loki_tenantid.content
    
        basic_auth {
          username = local.file.loki_username.content
          password = local.file.loki_password.content
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/hooks/grafana-agent-config-test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent-logs-test
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  config.river: |-
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    // Pod Logs
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
    
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator = "/"
        action = "replace"
        replacement = "$1"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "keep"
        regex = env("HOSTNAME")
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator = "/"
        action = "replace"
        replacement = "/var/log/pods/*$1/*.log"
        target_label = "__path__"
      }
    
      // set the container runtime as a label
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex = "^(\\w+):\\/\\/.+$"
        replacement = "$1"
        target_label = "tmp_container_runtime"
      }
    }
    
    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }
    
    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    loki.process "pod_logs" {
      stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
        stage.cri {}
    
        // Set the extract flags and stream values as labels
        stage.labels {
          values = {
            flags  = "",
            stream  = "",
          }
        }
      }
    
      // if the label tmp_container_runtime from above is docker parse using docker
      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        // the docker processing stage extracts the following k/v pairs: log, stream, time
        stage.docker {}
    
        // Set the extract stream value as a label
        stage.labels {
          values = {
            stream  = "",
          }
        }
      }
    
      // drop the temporary container runtime label as it is no longer needed
      stage.label_drop {
        values = ["tmp_container_runtime"]
      }
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Grafana Cloud Loki
    local.file "loki_host" {
      filename  = "/etc/grafana-agent-credentials/loki_host"
    }
    
    local.file "loki_username" {
      filename  = "/etc/grafana-agent-credentials/loki_username"
    }
    
    local.file "loki_password" {
      filename  = "/etc/grafana-agent-credentials/loki_password"
      is_secret = true
    }
    
    local.file "loki_tenantid" {
      filename  = "/etc/grafana-agent-credentials/loki_tenantId"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"
        tenant_id = local.file.loki_tenantid.content
    
        basic_auth {
          username = local.file.loki_username.content
          password = local.file.loki_password.content
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/tests/test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "k8smon-test"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  test.sh: |-
    #!/bin/bash
    set -eo pipefail
    apt-get update && apt-get install -y curl jq
    
    queries=$(jq -r '.queries[].query' "$1")
    for query in $queries; do
      echo "Running query: ${PROMETHEUS_HOST}/api/prom/api/v1/query?query=$query..."
      result=$(curl -sX POST -u "${PROMETHEUS_USER}:${PROMETHEUS_PASS}" "${PROMETHEUS_HOST}/api/prom/api/v1/query?query=$(jq -rn --arg x "${query}" '$x|@uri')")
      status=$(echo $result | jq -r .status)
      if [ "${status}" != "success" ]; then
        echo "Query failed!"
        echo "$result"
        exit 1
      fi
    
      resultCount=$(echo $result | jq '.data.result | length')
      if [ "${resultCount}" -eq 0 ]; then
        echo "Query returned no results"
        echo "$result"
        exit 1
      fi
    done
    
    echo "All queries passed!"
  queries.json: |-
    {
      "queries": null
    }
---
# Source: k8s-monitoring/templates/hooks/grafana-agent-config-test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "k8smon-test-config"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      name: "k8smon-test-config"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "k8smon"
        helm.sh/chart: "k8s-monitoring-0.2.8"
    spec:
      restartPolicy: Never
      containers:
        - name: grafana-agent
          image: "docker.io/grafana/agent:v0.37.1"
          args:
            - fmt
            - /etc/agent/config.river
          env:
            - name: AGENT_MODE
              value: flow
          volumeMounts:
            - name: config
              mountPath: /etc/agent
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent-test
---
# Source: k8s-monitoring/templates/hooks/grafana-agent-config-test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "k8smon-test-logs-config"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      name: "k8smon-test-logs-config"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "k8smon"
        helm.sh/chart: "k8s-monitoring-0.2.8"
    spec:
      restartPolicy: Never
      containers:
        - name: grafana-agent
          image: "docker.io/grafana/agent:v0.37.1"
          args:
            - fmt
            - /etc/agent/config.river
          env:
            - name: AGENT_MODE
              value: flow
          volumeMounts:
            - name: config
              mountPath: /etc/agent
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent-logs-test
---
# Source: k8s-monitoring/templates/tests/test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "k8smon-test"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.3.2
    helm.sh/chart: "k8s-monitoring-0.2.8"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: "k8smon-test-config"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "k8smon"
        helm.sh/chart: "k8s-monitoring-0.2.8"
    spec:
      restartPolicy: Never
      containers:
        - name: test-runner
          image: ubuntu
          command: ["bash", "-c", "bash /etc/test/test.sh /etc/test/queries.json"]
          volumeMounts:
            - name: test-plan
              mountPath: /etc/test
          env:
            - name: PROMETHEUS_HOST
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_host
            - name: PROMETHEUS_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_username
            - name: PROMETHEUS_PASS
              valueFrom:
                secretKeyRef:
                  name: grafana-agent-credentials
                  key: prometheus_password
      volumes:
        - name: test-plan
          configMap:
            name: k8smon-test
