---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.28.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/charts/grafana-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/templates/log-service-credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: loki-k8s-monitoring
  namespace: default
type: Opaque
data:

  host: "aHR0cHM6Ly9sb2tpLmV4YW1wbGUuY29t"
  username: "MTIzNDU="
  password: "SXQncyBhIHNlY3JldCB0byBldmVyeW9uZQ=="
  tenantId: "MjAwMA=="
---
# Source: k8s-monitoring/templates/grafana-agent-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent
  namespace: default
data:
  config.river: |-
    discovery.kubernetes "nodes" {
      role = "node"
    }
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.kubernetes "services" {
      role = "service"
    }
    
    // Cluster Events
    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Loki
    remote.kubernetes.secret "logs_service" {
      name = "loki-k8s-monitoring"
      namespace = "default"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(remote.kubernetes.secret.logs_service.data["host"]) + "/loki/api/v1/push"
        tenant_id = nonsensitive(remote.kubernetes.secret.logs_service.data["tenantId"])
    
        basic_auth {
          username = nonsensitive(remote.kubernetes.secret.logs_service.data["username"])
          password = remote.kubernetes.secret.logs_service.data["password"]
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/grafana-agent-logs-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent-logs
  namespace: default
data:
  config.river: |-
    // Pod Logs
    discovery.kubernetes "pods" {
        role = "pod"
      selectors {
        role = "pod"
        field = "spec.nodeName=" + env("HOSTNAME")
      }
    }
    
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
    
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator = "/"
        action = "replace"
        replacement = "$1"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator = "/"
        action = "replace"
        replacement = "/var/log/pods/*$1/*.log"
        target_label = "__path__"
      }
    
      // set the container runtime as a label
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex = "^(\\w+):\\/\\/.+$"
        replacement = "$1"
        target_label = "tmp_container_runtime"
      }
    }
    
    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }
    
    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    loki.process "pod_logs" {
      stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
        stage.cri {}
    
        // Set the extract flags and stream values as labels
        stage.labels {
          values = {
            flags  = "",
            stream  = "",
          }
        }
      }
    
      // if the label tmp_container_runtime from above is docker parse using docker
      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        // the docker processing stage extracts the following k/v pairs: log, stream, time
        stage.docker {}
    
        // Set the extract stream value as a label
        stage.labels {
          values = {
            stream  = "",
          }
        }
      }
    
      // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have
      // cluster, namespace, pod, and container labels.
      // Also drop the temporary container runtime label as it is no longer needed.
      stage.label_drop {
        values = ["filename", "tmp_container_runtime"]
      }
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Loki
    remote.kubernetes.secret "logs_service" {
      name = "loki-k8s-monitoring"
      namespace = "default"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(remote.kubernetes.secret.logs_service.data["host"]) + "/loki/api/v1/push"
        tenant_id = nonsensitive(remote.kubernetes.secret.logs_service.data["tenantId"])
    
        basic_auth {
          username = nonsensitive(remote.kubernetes.secret.logs_service.data["username"])
          password = remote.kubernetes.secret.logs_service.data["password"]
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/kubernetes-monitoring-telemetry.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-monitoring-telemetry
  namespace: default
data:
  metrics.prom: |
    # HELP grafana_kubernetes_monitoring_build_info A metric to report the version of the Kubernetes Monitoring Helm chart as well as a summary of enabled features
    # TYPE grafana_kubernetes_monitoring_build_info gauge
    grafana_kubernetes_monitoring_build_info{version="0.5.2", namespace="default", metrics="disabled", logs="enabled,events,pod_logs", traces="disabled", deployments=""} 1
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.28.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.28.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent-logs
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent-logs
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.28.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/cluster_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-cluster
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: 'None'
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    # Do not include the -metrics suffix in the port name, otherwise metrics
    # can be double-collected with the non-headless Service if it's also
    # enabled.
    #
    # This service should only be used for clustering, and not metric
    # collection.
    - name: http
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.28.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent-logs
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent-logs
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent-logs
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.38.0
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
            - --server.http.ui-path-prefix=/
          env:
            - name: AGENT_MODE
              value: flow
            - name: AGENT_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: varlog
              mountPath: /var/log
              readOnly: true
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent-logs
        - name: varlog
          hostPath:
            path: /var/log
---
# Source: k8s-monitoring/charts/grafana-agent/templates/controllers/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.28.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: v0.38.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  podManagementPolicy: Parallel
  minReadySeconds: 10
  serviceName: k8smon-grafana-agent
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.38.0
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
            - --server.http.ui-path-prefix=/
            - --cluster.enabled=true
            - --cluster.join-addresses=k8smon-grafana-agent-cluster
          env:
            - name: AGENT_MODE
              value: flow
            - name: AGENT_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            -
              mountPath: /etc/kubernetes-monitoring-telemetry
              name: kubernetes-monitoring-telemetry
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent
        - configMap:
            name: kubernetes-monitoring-telemetry
          name: kubernetes-monitoring-telemetry
---
# Source: k8s-monitoring/templates/hooks/validate-configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "validate-k8smon-k8s-monitoring"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.4.1
    helm.sh/chart: "k8s-monitoring-0.5.2"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  config.river: |-
    discovery.kubernetes "nodes" {
      role = "node"
    }
    
    discovery.kubernetes "pods" {
      role = "pod"
    }
    
    discovery.kubernetes "services" {
      role = "service"
    }
    
    // Cluster Events
    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Loki
    remote.kubernetes.secret "logs_service" {
      name = "loki-k8s-monitoring"
      namespace = "default"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(remote.kubernetes.secret.logs_service.data["host"]) + "/loki/api/v1/push"
        tenant_id = nonsensitive(remote.kubernetes.secret.logs_service.data["tenantId"])
    
        basic_auth {
          username = nonsensitive(remote.kubernetes.secret.logs_service.data["username"])
          password = remote.kubernetes.secret.logs_service.data["password"]
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
  logs.river: |-
    // Pod Logs
    discovery.kubernetes "pods" {
        role = "pod"
      selectors {
        role = "pod"
        field = "spec.nodeName=" + env("HOSTNAME")
      }
    }
    
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
    
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator = "/"
        action = "replace"
        replacement = "$1"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator = "/"
        action = "replace"
        replacement = "/var/log/pods/*$1/*.log"
        target_label = "__path__"
      }
    
      // set the container runtime as a label
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex = "^(\\w+):\\/\\/.+$"
        replacement = "$1"
        target_label = "tmp_container_runtime"
      }
    }
    
    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }
    
    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    loki.process "pod_logs" {
      stage.match {
        selector = "{tmp_container_runtime=\"containerd\"}"
        // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
        stage.cri {}
    
        // Set the extract flags and stream values as labels
        stage.labels {
          values = {
            flags  = "",
            stream  = "",
          }
        }
      }
    
      // if the label tmp_container_runtime from above is docker parse using docker
      stage.match {
        selector = "{tmp_container_runtime=\"docker\"}"
        // the docker processing stage extracts the following k/v pairs: log, stream, time
        stage.docker {}
    
        // Set the extract stream value as a label
        stage.labels {
          values = {
            stream  = "",
          }
        }
      }
    
      // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have
      // cluster, namespace, pod, and container labels.
      // Also drop the temporary container runtime label as it is no longer needed.
      stage.label_drop {
        values = ["filename", "tmp_container_runtime"]
      }
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
    
    // Loki
    remote.kubernetes.secret "logs_service" {
      name = "loki-k8s-monitoring"
      namespace = "default"
    }
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(remote.kubernetes.secret.logs_service.data["host"]) + "/loki/api/v1/push"
        tenant_id = nonsensitive(remote.kubernetes.secret.logs_service.data["tenantId"])
    
        basic_auth {
          username = nonsensitive(remote.kubernetes.secret.logs_service.data["username"])
          password = remote.kubernetes.secret.logs_service.data["password"]
        }
      }
      external_labels = {
        cluster = "logs-only-test",
      }
    }
---
# Source: k8s-monitoring/templates/tests/test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "test-k8smon-k8s-monitoring"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.4.1
    helm.sh/chart: "k8s-monitoring-0.5.2"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  test.sh: |-
    #!/bin/bash
    set -eo pipefail
    
    function metrics_query {
      echo "Running PromQL query: ${PROMETHEUS_URL}?query=${1}..."
      result=$(curl -skX POST -u "${PROMETHEUS_USER}:${PROMETHEUS_PASS}" "${PROMETHEUS_URL}" --data-urlencode "query=${1}")
      status=$(echo $result | jq -r .status)
      if [ "${status}" != "success" ]; then
        echo "Query failed!"
        echo "$result"
        exit 1
      fi
    
      resultCount=$(echo $result | jq '.data.result | length')
      if [ "${resultCount}" -eq 0 ]; then
        echo "Query returned no results"
        echo "$result"
        exit 1
      fi
    }
    
    function logs_query {
      echo "Running LogQL query: ${LOKI_URL}?query=${1}..."
      result=$(curl -s --get -H "X-Scope-OrgID:${LOKI_TENANTID}" -u "${LOKI_USER}:${LOKI_PASS}" "${LOKI_URL}" --data-urlencode "query=${1}")
      status=$(echo $result | jq -r .status)
      if [ "${status}" != "success" ]; then
        echo "Query failed!"
        echo "$result"
        exit 1
      fi
    
      resultCount=$(echo $result | jq '.data.result | length')
      if [ "${resultCount}" -eq 0 ]; then
        echo "Query returned no results"
        echo "$result"
        exit 1
      fi
    }
    
    count=$(jq -r ".queries | length-1" "${1}")
    for i in $(seq 0 "${count}"); do
      query=$(jq -r --argjson i "${i}" '.queries[$i].query' "${1}")
      type=$(jq -r --argjson i "${i}" '.queries[$i] | .type // "promql"' "${1}")
    
      case "${type}" in
        promql)
          metrics_query "${query}"
          ;;
        logql)
          logs_query "${query}"
          ;;
        *)
          echo "Query type ${type} is not yet supported in this test"
          ;;
      esac
    done
    
    echo "All queries passed!"
  queries.json: |-
    {
      "queries": null
    }
---
# Source: k8s-monitoring/templates/hooks/validate-configuration.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "validate-k8smon-k8s-monitoring"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.4.1
    helm.sh/chart: "k8s-monitoring-0.5.2"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    metadata:
      name: "validate-k8smon-k8s-monitoring"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "k8smon"
        helm.sh/chart: "k8s-monitoring-0.5.2"
    spec:
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: grafana-agent
          image: "docker.io/grafana/agent:v0.38.0"
          command:
          - bash
          - -ec
          - |
            echo Validating config file
            grafana-agent fmt /etc/agent/config.river
            echo Validating logs config file
            grafana-agent fmt /etc/agent/logs.river
          env:
            - name: AGENT_MODE
              value: flow
          volumeMounts:
            - name: config
              mountPath: /etc/agent
      volumes:
        - name: config
          configMap:
            name: "validate-k8smon-k8s-monitoring"
---
# Source: k8s-monitoring/templates/tests/test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "test-k8smon-k8s-monitoring"
  namespace: default
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "k8smon"
    app.kubernetes.io/version: 1.4.1
    helm.sh/chart: "k8s-monitoring-0.5.2"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  completions: 1
  parallelism: 1
  backoffLimit: 9
  template:
    metadata:
      name: "test-k8smon-k8s-monitoring"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "k8smon"
        helm.sh/chart: "k8s-monitoring-0.5.2"
    spec:
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: test-runner
          image: docker.io/ubuntu:jammy
          command: ["bash", "-c", "apt-get update && apt-get install -y curl jq && bash /etc/test/test.sh /etc/test/queries.json"]
          volumeMounts:
            - name: test-plan
              mountPath: /etc/test
          env:
            - name: PROMETHEUS_HOST
              valueFrom:
                secretKeyRef:
                  name: prometheus-k8s-monitoring
                  key: host
                  optional: true
            - name: PROMETHEUS_URL
              value: $(PROMETHEUS_HOST)/api/prom/api/v1/query
            - name: PROMETHEUS_USER
              valueFrom:
                secretKeyRef:
                  name: prometheus-k8s-monitoring
                  key: username
                  optional: true
            - name: PROMETHEUS_PASS
              valueFrom:
                secretKeyRef:
                  name: prometheus-k8s-monitoring
                  key: password
                  optional: true

            - name: LOKI_HOST
              valueFrom:
                secretKeyRef:
                  name: loki-k8s-monitoring
                  key: host
            - name: LOKI_URL
              value: $(LOKI_HOST)/loki/api/v1/query
            - name: LOKI_USER
              valueFrom:
                secretKeyRef:
                  name: loki-k8s-monitoring
                  key: username
                  optional: true
            - name: LOKI_PASS
              valueFrom:
                secretKeyRef:
                  name: loki-k8s-monitoring
                  key: password
                  optional: true
            - name: LOKI_TENANTID
              valueFrom:
                secretKeyRef:
                  name: loki-k8s-monitoring
                  key: tenantId
                  optional: true

      volumes:
        - name: test-plan
          configMap:
            name: "test-k8smon-k8s-monitoring"
