---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.19.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/charts/grafana-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/templates/credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-agent-credentials
  namespace: default
type: Opaque
data:
  loki_host: "aHR0cHM6Ly9sb2tpLmV4YW1wbGUuY29t"
  loki_username: "MTIzNDU="
  loki_password: "SXQncyBhIHNlY3JldCB0byBldmVyeW9uZQ=="
---
# Source: k8s-monitoring/templates/grafana-agent-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent
  namespace: default
data:
  config.river: |-    
    discovery.kubernetes "nodes" {
      role = "node"
    }
        
    discovery.kubernetes "pods" {
      role = "pod"
    }
        
    discovery.kubernetes "services" {
      role = "service"
    }
---
# Source: k8s-monitoring/templates/grafana-agent-logs-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent-logs
  namespace: default
data:
  config.river: |-    
    discovery.kubernetes "pods" {
      role = "pod"
    }
        
    // Pod Logs
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets
    
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator = "/"
        action = "replace"
        replacement = "$1"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "keep"
        regex = env("HOSTNAME")
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator = "/"
        action = "replace"
        replacement = "/var/log/pods/*$1/*.log"
        target_label = "__path__"
      }
    }
    
    local.file_match "pod_logs" {
      path_targets = discovery.relabel.pod_logs.output
    }
    
    loki.source.file "pod_logs" {
      targets    = local.file_match.pod_logs.targets
      forward_to = [loki.process.pod_logs.receiver]
    }
    
    loki.process "pod_logs" {
      stage.docker {}
      forward_to = [loki.write.grafana_cloud_loki.receiver]
    }
        
    // Grafana Cloud Loki
    local.file "loki_host" {
      filename  = "/etc/grafana-agent-credentials/loki_host"
    }
    
    local.file "loki_username" {
      filename  = "/etc/grafana-agent-credentials/loki_username"
    }
    
    local.file "loki_password" {
      filename  = "/etc/grafana-agent-credentials/loki_password"
      is_secret = true
    }
    
    loki.write "grafana_cloud_loki" {
      endpoint {
        url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"
    
        basic_auth {
          username = local.file.loki_username.content
          password = local.file.loki_password.content
        }
      }
      external_labels {
        cluster = "logs-only-test"
      }
    }
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.19.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.19.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent-logs
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent-logs
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.19.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/cluster_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent-cluster
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: 'None'
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    # Do not include the -metrics suffix in the port name, otherwise metrics
    # can be double-collected with the non-headless Service if it's also
    # enabled.
    #
    # This service should only be used for clustering, and not metric
    # collection.
    - name: http
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent-logs/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-grafana-agent-logs
  labels:
    helm.sh/chart: grafana-agent-logs-0.19.0
    app.kubernetes.io/name: grafana-agent-logs
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent-logs
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent-logs
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent-logs
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.35.2
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: dockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            -
              mountPath: /etc/grafana-agent-credentials
              name: grafana-agent-credentials
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent-logs
        - name: varlog
          hostPath:
            path: /var/log
        - name: dockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: grafana-agent-credentials
          secret:
            secretName: grafana-agent-credentials
---
# Source: k8s-monitoring/charts/grafana-agent/templates/controllers/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.35.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  minReadySeconds: 10
  serviceName: k8smon-grafana-agent
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent
      containers:
        - name: grafana-agent
          image: docker.io/grafana/agent:v0.35.2
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
            - --cluster.enabled=true
            - --cluster.join-addresses=k8smon-grafana-agent-cluster
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            -
              mountPath: /etc/grafana-agent-credentials
              name: grafana-agent-credentials
        - name: config-reloader
          image: docker.io/jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent
        - name: grafana-agent-credentials
          secret:
            secretName: grafana-agent-credentials
