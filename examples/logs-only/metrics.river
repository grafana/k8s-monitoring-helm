discovery.kubernetes "nodes" {
  role = "node"
}

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.kubernetes "services" {
  role = "service"
}

// Receivers
otelcol.receiver.otlp "receiver" {
  debug_metrics {
    disable_high_cardinality_metrics = true
  }

  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }
  output {
    logs = [otelcol.processor.k8sattributes.default.input]
  }
}
otelcol.processor.k8sattributes "default" {
  extract {
    metadata = [
      "k8s.namespace.name",
      "k8s.pod.name",
      "k8s.deployment.name",
      "k8s.statefulset.name",
      "k8s.daemonset.name",
      "k8s.cronjob.name",
      "k8s.job.name",
      "k8s.node.name",
      "k8s.pod.uid",
      "k8s.pod.start_time",
    ]
  }
  pod_association {
    source {
      from = "connection"
    }
  }

  output {
    logs    = [otelcol.processor.transform.add_attributes.input]
  }
}
otelcol.processor.transform "add_attributes" {
  // Grafana Cloud Kubernetes monitoring expects Loki labels `cluster`, `pod`, and `namespace`
  error_mode = "ignore"
  log_statements {
    context = "resource"
    statements = [
      "set(attributes[\"pod\"], attributes[\"k8s.pod.name\"])",
      "set(attributes[\"namespace\"], attributes[\"k8s.namespace.name\"])",
      "set(attributes[\"loki.resource.labels\"], \"pod, namespace, cluster, job\")",
    ]
  }
  output {
    logs = [otelcol.exporter.loki.otel_to_loki_converter.input]
  }
}

// Cluster Events
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  forward_to = [loki.write.grafana_cloud_loki.receiver]
}

// Loki
remote.kubernetes.secret "logs_service" {
  name = "loki-k8s-monitoring"
  namespace = "default"
}

otelcol.exporter.loki "otel_to_loki_converter" {
  forward_to = [loki.write.grafana_cloud_loki.receiver]
}
loki.write "grafana_cloud_loki" {
  endpoint {
    url = nonsensitive(remote.kubernetes.secret.logs_service.data["host"]) + "/loki/api/v1/push"
    tenant_id = nonsensitive(remote.kubernetes.secret.logs_service.data["tenantId"])

    basic_auth {
      username = nonsensitive(remote.kubernetes.secret.logs_service.data["username"])
      password = remote.kubernetes.secret.logs_service.data["password"]
    }
  }
  external_labels = {
    cluster = "logs-only-test",
  }
}
