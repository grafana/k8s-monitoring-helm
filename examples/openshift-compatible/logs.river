discovery.kubernetes "pods" {
  role = "pod"
}
    
// Pod Logs
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pods.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
    separator = "/"
    action = "replace"
    replacement = "$1"
    target_label = "job"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_node_name"]
    action = "keep"
    regex = env("HOSTNAME")
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    separator = "/"
    action = "replace"
    replacement = "/var/log/pods/*$1/*.log"
    target_label = "__path__"
  }
}

local.file_match "pod_logs" {
  path_targets = discovery.relabel.pod_logs.output
}

loki.source.file "pod_logs" {
  targets    = local.file_match.pod_logs.targets
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  stage.static_labels {
    values = {
      cluster = "openshift-compatible-test",
    }
  }

  stage.docker {}
  forward_to = [loki.write.grafana_cloud_loki.receiver]
}
    
// Grafana Cloud Loki
local.file "loki_host" {
  filename  = "/etc/grafana-agent-credentials/loki_host"
}

local.file "loki_username" {
  filename  = "/etc/grafana-agent-credentials/loki_username"
}

local.file "loki_password" {
  filename  = "/etc/grafana-agent-credentials/loki_password"
  is_secret = true
}

loki.write "grafana_cloud_loki" {
  endpoint {
    url = nonsensitive(local.file.loki_host.content) + "/loki/api/v1/push"

    basic_auth {
      username = local.file.loki_username.content
      password = local.file.loki_password.content
    }
  }
}
