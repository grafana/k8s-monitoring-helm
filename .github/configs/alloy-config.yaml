---
# This config is for a stand-alone Grafana Alloy that will generate metrics, logs, and traces and send them to the
# k8s monitoring-deployed Alloy via its receivers.
alloy:
  configMap:
    content: |-
      prometheus.scrape "myself" {
        job_name = "integrations/alloy"
        targets = [{"__address__" = "localhost:12345"}]
        forward_to = [prometheus.relabel.alloy.receiver]
      }

      prometheus.relabel "alloy" {
        rule {
          source_labels = ["__name__"]
          regex = "up|alloy_build_info"
          action = "keep"
        }
        rule {
          replacement = "from-the-other-alloy"
          target_label = "cluster"
        }

        forward_to = [prometheus.remote_write.k8s_monitoring_alloy.receiver]
      }

      prometheus.remote_write "k8s_monitoring_alloy" {
        endpoint {
          url = "http://alloy-receiver.monitoring.svc:9999/api/v1/metrics/write"
        }
      }

      tracing {
        sampling_fraction = 0.1
        write_to = [otelcol.processor.transform.trace_transform_processor.input]
      }

      otelcol.processor.transform "trace_transform_processor" {
        error_mode = "ignore"

        trace_statements {
          context = "resource"
          statements = [
            "set(attributes[\"k8s.cluster.name\"], \"from-the-other-alloy\") where attributes[\"k8s.cluster.name\"] == nil",
          ]
        }

        trace_statements {
          context = "span"
          statements = [
            "set(attributes[\"cluster\"], \"from-the-other-alloy\")",
          ]
        }

        output {
          traces = [otelcol.exporter.otlp.k8s_monitoring_alloy.input]
        }
      }

      otelcol.exporter.otlp "k8s_monitoring_alloy" {
        client {
          endpoint = "alloy-receiver.monitoring.svc:4317"
          tls {
            insecure = true
          }
        }
      }

crds:
  create: true
