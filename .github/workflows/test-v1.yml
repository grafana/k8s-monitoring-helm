---
name: Test V1
# yamllint disable-line rule:truthy
on:
  push:
    branches: ["main"]
    paths:
      - 'charts/k8s-monitoring-v1/**'
  pull_request:
    paths:
      - 'charts/k8s-monitoring-v1/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions: {}

jobs:
  check-for-doc-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: 'false'

      - name: Regenerate docs
        run: |
          docker run --rm \
            -v "$(pwd)/charts/k8s-monitoring-v1:/helm-docs" \
            -u "$(id -u)" \
            jnorwood/helm-docs
          if ! git diff --exit-code; then
            echo "Helm chart documentation is not up to date. Please run 'helm-docs' and commit changes!" >&2
            exit 1
          fi

  check-for-generated-file-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: 'false'

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112  # v4.3.0
        with:
          version: 3.17.3

      - name: Check for generated file changes
        working-directory: charts/k8s-monitoring-v1
        run: |
          make clean build
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "k8s-monitoring Helm chart v1 generated files are not up to date. Please run 'make clean build', examine changes, and commit changes." >&2
            exit 1
          fi

  static-test-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0  # Required for `ct lint` to work
          persist-credentials: 'false'

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112  # v4.3.0
        with:
          version: 3.17.3

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b  # v2.7.0

      - name: Install yq
        uses: dcarbone/install-yq-action@4075b4dca348d74bd83f2bf82d30f25d7c54539b  # v1.3.1

      - name: Install ShellSpec
        run: |
          curl -fsSL https://git.io/shellspec | sh -s -- --yes

      # Installing Grafana Alloy because we need it to lint the generated alloy config files.
      # https://grafana.com/docs/alloy/latest/get-started/install/linux/
      - name: Install Grafana Alloy
        run: |
          sudo mkdir -p /etc/apt/keyrings/
          wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
          sudo apt-get update
          sudo apt-get install -y alloy

      - name: Run tests
        run: make test
        working-directory: charts/k8s-monitoring-v1

  list-tests:
    name: List tests
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.list_tests.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: 'false'

      - name: List tests
        id: list_tests
        working-directory: charts/k8s-monitoring-v1/tests/integration
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          # if "integration-test-skip" is set, return an empty list
          # All labels on this PR
          if echo "${LABELS}" | jq --exit-status '. | any(. == "integration-test-skip")' > /dev/null; then
              echo "\"integration-test-skip\" label is set, skipping integration tests."
              echo "tests=[]" >> "${GITHUB_OUTPUT}"
              exit 0
          fi

          tests=$(find . -name test-plan.yaml -exec dirname {} \; | sed -e "s/^\.\///g")
          echo "Tests: ${tests}"
          echo "tests=$(echo "${tests}" | jq --raw-input --slurp --compact-output 'split("\n") | map(select(. != ""))')" >> "${GITHUB_OUTPUT}"

  run-tests:
    name: Integration Test
    needs: list-tests
    runs-on: ubuntu-latest
    if: needs.list-tests.outputs.tests != '[]'
    strategy:
      matrix:
        test: ${{ fromJson(needs.list-tests.outputs.tests) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          path: source
          persist-credentials: 'false'

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          path: helm-chart-toolbox
          repository: grafana/helm-chart-toolbox
          persist-credentials: 'false'

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112  # v4.3.0

      - name: Install Flux CLI
        uses: fluxcd/flux2/action@6bf37f6a560fd84982d67f853162e4b3c2235edb  # v2.6.4

      - name: Install Kind CLI
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3  # v1.12.0
        with:
          install_only: true

      - name: Install Minikube CLI
        uses: medyagh/setup-minikube@e3c7f79eb1e997eabccc536a6cf318a2b0fe19d9  # v0.0.20
        with:
          start: false

      - name: Run test
        run: helm-chart-toolbox/tools/helm-test/helm-test "${TEST_DIRECTORY}"
        env:
          TEST_DIRECTORY: "source/charts/k8s-monitoring-v1/tests/integration/${{ matrix.test }}"
          DELETE_CLUSTER: true
