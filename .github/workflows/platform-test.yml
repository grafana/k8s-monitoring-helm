---
name: Platform Test
# yamllint disable-line rule:truthy
on:
  pull_request:
    paths:
      - 'charts/**'
      - '!charts/k8s-monitoring-v1/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  list-tests:
    name: List tests
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.list_tests.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List tests
        id: list_tests
        working-directory: charts/k8s-monitoring/tests/platform
        run: |
          allTests=$(find . -name values.yaml -type f -exec dirname {} \; | sed "s|^\./||" | jq --raw-input --slurp --compact-output 'split("\n") | map(select(. != ""))')
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # All labels on this PR
            labels='${{ toJson(github.event.pull_request.labels.*.name) }}'

            # Filter out labels that don't start with "platform-test-" and remove the prefix
            chosenTests=$(echo "${labels}" | jq --raw-output --compact-output '[.[] | select(startswith("platform-test-")) | sub("^platform-test-"; "")]')

            # Choose the tests that match the labels
            tests=$(jq --null-input --compact-output --argjson allTests "${allTests}" --argjson chosenTests "${chosenTests}" '$allTests | map(select(. as $test | $chosenTests | index($test)))')
          else
            tests="${allTests}"
          fi
          echo "Running tests: ${tests}"
          echo "tests=${tests}" >> "${GITHUB_OUTPUT}"

  run-tests:
    name: Platform Test
    needs: list-tests
    runs-on: ubuntu-latest
    if: ${{ needs.list-tests.outputs.tests != '[]' }}
    strategy:
      matrix:
        test: ${{ fromJson(needs.list-tests.outputs.tests) }}
      fail-fast: false
    concurrency:
      group: ${{ matrix.test || 'no-platform-test' }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: Random number
        id: random-number
        uses: yakubique/random-number@v1.1
        with:
          min: 100000
          max: 999999

      - name: Check for cluster config
        id: check-cluster-config
        run: |
          if [ -f "charts/k8s-monitoring/tests/platform/${{ matrix.test }}/eks-cluster-config.yaml" ]; then
            echo "cluster-type=eks" >> "${GITHUB_OUTPUT}"
          elif [ -f "charts/k8s-monitoring/tests/platform/${{ matrix.test }}/gke-cluster-config.yaml" ]; then
            echo "cluster-type=gke" >> "${GITHUB_OUTPUT}"
          elif [ -f "charts/k8s-monitoring/tests/platform/${{ matrix.test }}/gke-autopilot-cluster-config.yaml" ]; then
            echo "cluster-type=gke" >> "${GITHUB_OUTPUT}"
          elif [ -f "charts/k8s-monitoring/tests/platform/${{ matrix.test }}/openshift-cluster-config.yaml" ]; then
            echo "cluster-type=openshift" >> "${GITHUB_OUTPUT}"
          else
            echo "cluster-type=kind" >> "${GITHUB_OUTPUT}"
          fi

      - name: Setup Kind CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'kind' }}
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Setup eksctl CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'eks' }}
        run: |
          PLATFORM="$(uname -s)_$ARCH"
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf "eksctl_$PLATFORM.tar.gz" -C /tmp && rm "eksctl_$PLATFORM.tar.gz"
          sudo mv /tmp/eksctl /usr/local/bin
        env:
          ARCH: amd64

      - name: Setup OpenShift Installer CLI
        if : ${{ steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          openshift-install: latest

      - name: Configure AWS Credentials
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'eks' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Configure GCP Credentials
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'gke' || steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_TOKEN }}'

      - name: Set up GCP Cloud SDK
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'gke' || steps.check-cluster-config.outputs.cluster-type == 'okd' }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Run test
        run: ./scripts/run-cluster-test.sh "charts/k8s-monitoring/tests/platform/${{ matrix.test }}"
        env:
          CREATE_CLUSTER: "true"
          DELETE_CLUSTER: "true"
          GRAFANA_CLOUD_FLEET_MGMT_USER: ${{ secrets.GRAFANA_CLOUD_FLEET_MGMT_USER }}
          GRAFANA_CLOUD_FLEET_MGMT_TOKEN: ${{ secrets.GRAFANA_CLOUD_FLEET_MGMT_TOKEN }}
          GRAFANA_CLOUD_METRICS_USERNAME: ${{ secrets.GRAFANA_CLOUD_METRICS_USERNAME }}
          GRAFANA_CLOUD_LOGS_USERNAME: ${{ secrets.GRAFANA_CLOUD_LOGS_USERNAME }}
          GRAFANA_CLOUD_TRACES_USERNAME: ${{ secrets.GRAFANA_CLOUD_TRACES_USERNAME }}
          GRAFANA_CLOUD_OTLP_USERNAME: ${{ secrets.GRAFANA_CLOUD_OTLP_USERNAME }}
          GRAFANA_CLOUD_RW_POLICY_TOKEN: ${{ secrets.GRAFANA_CLOUD_RW_POLICY_TOKEN }}
          RANDOM_NUMBER: ${{ steps.random-number.outputs.number }}
