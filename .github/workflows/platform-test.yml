---
# yamllint disable rule:line-length
name: Platform Test
# yamllint disable-line rule:truthy
on:
  pull_request:
    paths:
      - 'charts/**'
      - '!charts/k8s-monitoring-v1/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions: {}

jobs:
  list-tests:
    name: List tests
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.list_tests.outputs.tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          persist-credentials: 'false'

      - name: List tests
        id: list_tests
        working-directory: charts/k8s-monitoring/tests/platform
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          allTests=$(find . -name test-plan.yaml -exec dirname {} \; | sed -e "s/^\.\///g" | jq --raw-input --slurp --compact-output 'split("\n") | map(select(. != ""))')
          manualOnlyTests=$(find . -name .manual-only -type f -exec dirname {} \; | sed "s|^\./||" | jq --raw-input --slurp --compact-output 'split("\n") | map(select(. != ""))')
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Filter out labels that don't start with "platform-test-" and remove the prefix
            chosenTests=$(echo "${LABELS}" | jq --raw-output --compact-output '[.[] | select(startswith("platform-test-")) | sub("^platform-test-"; "")]')

            # Choose the tests that match the labels
            tests=$(jq --null-input --compact-output --argjson allTests "${allTests}" --argjson chosenTests "${chosenTests}" '$allTests | map(select(. as $test | $chosenTests | index($test)))')
          else
            tests=${allTests}
          fi

          # remove manual only tests
          tests=$(jq --null-input --compact-output --argjson tests "${tests}" --argjson manualOnlyTests "${manualOnlyTests}" '$tests | map(select(. as $test | $manualOnlyTests | index($test) | not))')

          echo "Tests: ${tests}"
          echo "tests=${tests}" >> "${GITHUB_OUTPUT}"

  run-tests:
    name: Platform Test
    needs: list-tests
    runs-on: ubuntu-latest
    if: ${{ needs.list-tests.outputs.tests != '[]' }}
    strategy:
      matrix:
        test: ${{ fromJson(needs.list-tests.outputs.tests) }}
      fail-fast: false
    concurrency:
      group: ${{ matrix.test || 'no-platform-test' }}
      cancel-in-progress: false

    # These permissions are needed to assume roles from GitHub's OIDC.
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          path: source
          persist-credentials: 'false'

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          path: helm-chart-toolbox
          repository: grafana/helm-chart-toolbox
          persist-credentials: 'false'

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4  # v4.3.1
        with:
          version: 3.17.3

      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@6bf37f6a560fd84982d67f853162e4b3c2235edb  # v2.6.4

      - name: Check for cluster config
        id: check-cluster-config
        working-directory: source/charts/k8s-monitoring/tests/platform
        env:
          TEST: ${{ matrix.test }}
        run: yq eval '"cluster-type=" + .cluster.type' "${TEST}/test-plan.yaml" > "${GITHUB_OUTPUT}"

      - name: Setup Kind CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'kind' }}
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3  # v1.12.0
        with:
          install_only: true

      - name: Configure Azure Credentials
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'aks' }}
        run: |
          echo "Not ready for automated testing yet"
          exit 1
#        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5  # v2.3.0
#        with:
#          auth-type: IDENTITY
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Setup Azure CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'aks' }}
        uses: azure/cli@089eac9d8cc39f5d003e94f8b65efc51076c9cbd  # v2.1.0
        with:
          azcliversion: latest
          inlineScript: |
            az version

      - name: Setup eksctl CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'eks' }}
        run: |
          PLATFORM="$(uname -s)_$ARCH"
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf "eksctl_$PLATFORM.tar.gz" -C /tmp && rm "eksctl_$PLATFORM.tar.gz"
          sudo mv /tmp/eksctl /usr/local/bin
        env:
          ARCH: amd64

      - name: Setup OpenShift Installer CLI
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        uses: robinraju/release-downloader@daf26c55d821e836577a15f77d86ddc078948b05  # v1.12
        with:
          repository: okd-project/okd
          latest: true
          fileName: openshift-install-linux-[.0-9]*.tar.gz
          extract: true
          out-file-path: /usr/local/bin

      - name: Fetch AWS Credentials from Vault
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'eks' }}
        id: get-aws-credentials
        uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936  # v1.2.1
        env:
          VAULT_REPO_SECRET_NAME: aws
        with:
          export_env: false
          repo_secrets: |
            AWS_ACCESS_KEY_ID=${{ env.VAULT_REPO_SECRET_NAME }}:access-key-id
            AWS_SECRET_ACCESS_KEY=${{ env.VAULT_REPO_SECRET_NAME }}:secret-access-key

      - name: Configure AWS Credentials
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'eks' }}
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-access-key-id: '${{ fromJSON(steps.get-aws-credentials.outputs.secrets).AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ fromJSON(steps.get-aws-credentials.outputs.secrets).AWS_SECRET_ACCESS_KEY }}'
          aws-region: ap-northeast-2

      - name: Fetch GCP Credentials from Vault
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'gke' || steps.check-cluster-config.outputs.cluster-type == 'gke-autopilot' ||steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        id: get-gcp-service-account-token
        uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936  # v1.2.1
        env:
          VAULT_REPO_SECRET_NAME: gcp
        with:
          export_env: false
          repo_secrets: GCP_SERVICE_ACCOUNT_TOKEN=${{ env.VAULT_REPO_SECRET_NAME }}:service-account-token

      - name: Configure GCP Credentials
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'gke' || steps.check-cluster-config.outputs.cluster-type == 'gke-autopilot' || steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        uses: google-github-actions/auth@b7593ed2efd1c1617e1b0254da33b86225adb2a5  # v2.1.12
        with:
          credentials_json: '${{ fromJSON(steps.get-gcp-service-account-token.outputs.secrets).GCP_SERVICE_ACCOUNT_TOKEN }}'

      - name: Set up GCP Cloud SDK
        if: ${{ steps.check-cluster-config.outputs.cluster-type == 'gke' || steps.check-cluster-config.outputs.cluster-type == 'gke-autopilot' || steps.check-cluster-config.outputs.cluster-type == 'openshift' }}
        uses: google-github-actions/setup-gcloud@cb1e50a9932213ecece00a606661ae9ca44f3397  # v2.2.0
        with:
          install_components: gke-gcloud-auth-plugin

      - name: Fetch Grafana Cloud Credentials from Vault
        uses: grafana/shared-workflows/actions/get-vault-secrets@9f37f656e063f0ad0b0bfc38d49894b57d363936  # v1.2.1
        env:
          VAULT_REPO_SECRET_NAME: grafana-cloud
        with:
          repo_secrets: |
            GRAFANA_CLOUD_FLEET_MGMT_USER=${{ env.VAULT_REPO_SECRET_NAME }}:fleet-management-username
            GRAFANA_CLOUD_FLEET_MGMT_TOKEN=${{ env.VAULT_REPO_SECRET_NAME }}:fleet-management-token
            GRAFANA_CLOUD_METRICS_USERNAME=${{ env.VAULT_REPO_SECRET_NAME }}:metrics-username
            GRAFANA_CLOUD_LOGS_USERNAME=${{ env.VAULT_REPO_SECRET_NAME }}:logs-username
            GRAFANA_CLOUD_TRACES_USERNAME=${{ env.VAULT_REPO_SECRET_NAME }}:traces-username
            GRAFANA_CLOUD_OTLP_USERNAME=${{ env.VAULT_REPO_SECRET_NAME }}:otlp-username
            GRAFANA_CLOUD_RW_POLICY_TOKEN=${{ env.VAULT_REPO_SECRET_NAME }}:access-policy-token

      - name: Run test
        env:
          TEST_DIRECTORY: "source/charts/k8s-monitoring/tests/platform/${{ matrix.test }}"
          DELETE_CLUSTER: true
        run: |
          make -C "${TEST_DIRECTORY}" clean all
          helm-chart-toolbox/tools/helm-test/helm-test "${TEST_DIRECTORY}"
