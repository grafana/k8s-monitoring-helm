name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CT_CONFIGFILE: "${{ github.workspace }}/.github/configs/ct.yaml"
  LINT_CONFIGFILE: "${{ github.workspace }}/.github/configs/lintconf.yaml"

jobs:
  check-for-doc-changes:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Regenerate docs
      run: |
        docker run --rm \
          -v "$(pwd)/charts/k8s-monitoring:/helm-docs" \
          -u "$(id -u)" \
          jnorwood/helm-docs
        if ! git diff --exit-code; then
          echo "Helm chart documentation is not up to date. Please run 'helm-docs' and commit changes!" >&2
          exit 1
        fi

  check-for-example-output-changes:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Check for example output changes
      run: |
        make regenerate-example-outputs
        if [ ! -z "$(git status --porcelain)" ]; then
          echo "Helm chart examples are not up to date. Please run 'make regenerate-example-outputs', examine changes, and commit changes." >&2
          exit 1
        fi

  static-test-chart:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for `ct lint` to work

    - name: Install Helm
      uses: azure/setup-helm@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        check-latest: true

    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.4.0

    - name: Install yq
      run: pip install yq

    # Installing the Grafana Agent because we need it to lint the generated agent config files.
    # https://grafana.com/docs/agent/latest/static/set-up/install-agent-linux/#install-on-debian-or-ubuntu
    - name: Install Grafana Agent
      run: |
        sudo mkdir -p /etc/apt/keyrings/
        wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
        echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
        sudo apt-get update
        sudo apt-get install -y grafana-agent

    - name: Run tests
      run: make test

  # TODO: Install prometheus and loki locally, then install our chart so it's connected to those services
#  test-chart:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - name: Set up Helm
#      uses: azure/setup-helm@v3
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.9'
#        check-latest: true
#
#    - name: Set up chart-testing
#      uses: helm/chart-testing-action@v2.4.0
#
#    - name: List changed charts
#      id: list-changed
#      run: |
#        changed=$(ct list-changed --config "${CT_CONFIGFILE}")
#        if [[ -n "$changed" ]]; then
#          echo "changed=true" >> "${GITHUB_OUTPUT}"
#        fi
#
#    - name: Create kind cluster
#      uses: helm/kind-action@v1.5.0
#      if: steps.list-changed.outputs.changed == 'true'
#
#    - name: Install prometheus and loki
#      run: TODO
#
#    - name: Test charts
#      run: ct install --config ./operations/helm/ct.yaml
