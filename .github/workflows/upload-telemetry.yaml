---
name: Upload Telemetry
# yamllint disable-line rule:truthy
on:
  workflow_run:
    workflows: ["Unit Test"]
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  install-grafana-alloy:
    name: Install Grafana Alloy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Grafana Alloy
        id: install_alloy
        run: |
          sudo mkdir -p /etc/apt/keyrings/
          wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
          sudo apt-get update
          sudo apt-get install -y alloy

  get-workflow-data:
    name: Get Workflow Data
    outputs:
      workflow_log_directory: ${{ steps.workflow_logs.outputs.workflow_log_directory }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get workflow info
        id: workflow_info
        run: |
          {
            echo "workflow_id=${{ github.event.workflow.id }}"
            echo "workflow_name=${{ github.event.workflow.name }}"
            echo "workflow_run_id=${{ github.event.workflow_run.id }}"
            echo "workflow_run_attempt=${{ github.event.workflow_run.run_attempt }}"
          } >> "${GITHUB_OUTPUT}"

          echo "Triggered by workflow ${{ github.event.workflow.name }} (ID: ${{ github.event.workflow.id }})"
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow run attempt: ${{ github.event.workflow_run.run_attempt }}"

      - name: Get workflow logs
        id: workflow_logs
        env:
          WORKFLOW_RUN_ID: ${{ steps.workflow_info.outputs.workflow_run_id }}
          WORKFLOW_NAME: ${{ steps.workflow_info.outputs.workflow_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use format_logs.sh to fetch and process logs from the workflow run
          chmod +x hackathon-action-stat/format_logs.sh
          ./hackathon-action-stat/format_logs.sh
          
          mkdir -p "logs/workflow-${WORKFLOW_RUN_ID}-${WORKFLOW_NAME}"
          export WORKFLOW_LOG_DIRECTORY="$(pwd)/logs/workflow-${WORKFLOW_RUN_ID}-${WORKFLOW_NAME}"
          echo "workflow_log_directory=${WORKFLOW_LOG_DIRECTORY}" >> "${GITHUB_OUTPUT}"

  upload-telemetry:
    name: Upload Telemetry
    runs-on: ubuntu-latest
    needs: [install-grafana-alloy, get-workflow-data]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload logs
        env:
          GC_TELEMETRY_DATA_UPLOAD_OTLP_URL: https://otlp-gateway-prod-us-west-0.grafana.net/otlp
          GC_TELEMETRY_DATA_UPLOAD_OTLP_USERNAME: ${{ secrets.GC_TELEMETRY_DATA_UPLOAD_OTLP_USERNAME }}
          GC_TELEMETRY_DATA_UPLOAD_TOKEN: ${{ secrets.GC_TELEMETRY_DATA_UPLOAD_TOKEN }}
          WORKFLOW_LOG_DIRECTORY: ${{ needs.get-workflow-data.outputs.workflow_log_directory }}
        run: |
          # Run alloy in the background and save its PID
          alloy run hackathon-action-stat/log-upload.alloy --stability.level public-preview --disable-reporting &
          ALLOY_PID=$!

          # Set timeout duration (5 minutes = 300 seconds)
          TIMEOUT=300
          START_TIME=$SECONDS

          # Watch for workflow_logs.json to be deleted or timeout
          while true; do
            # Check if timeout reached
            if [ $((SECONDS - START_TIME)) -ge $TIMEOUT ]; then
              echo "Timeout reached after ${TIMEOUT} seconds. Killing alloy process."
              kill $ALLOY_PID || true
              return 1
            fi

            # Check if log directory is empty
            if [ -z "$(ls -A "${WORKFLOW_LOG_DIRECTORY}")" ]; then
              kill $ALLOY_PID || true
              break
            fi
          done
