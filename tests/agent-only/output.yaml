---
# Source: k8s-monitoring/charts/grafana-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.15.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.34.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-monitoring/templates/credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grafana-agent-credentials
  namespace: default
type: Opaque
data:
  prometheus_host: "aHR0cHM6Ly9wcm9tZXRoZXVzLmV4YW1wbGUuY29t"
  prometheus_username: "MTIzNDU="
  prometheus_password: "SXQncyBhIHNlY3JldCB0byBldmVyeW9uZQ=="
---
# Source: k8s-monitoring/templates/grafana-agent-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-grafana-agent
  namespace: default
data:
  cluster_name: agent-only-test
  config.river: |-    
    local.file "cluster_name" {
      filename  = "/etc/agent/cluster_name"
    }
        
    discovery.kubernetes "nodes" {
      role = "node"
    }
        
    discovery.kubernetes "pods" {
      role = "pod"
    }
        
    discovery.kubernetes "services" {
      role = "service"
    }
        
    // Grafana Agent
    discovery.relabel "agent" {
      targets = discovery.kubernetes.services.targets
      rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
        regex = "k8smon"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
        regex = "grafana-agent"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_port_name"]
        regex = "http-metrics"
        action = "keep"
      }
      rule {
        source_labels = ["__name__"]
        replacement   = local.file.cluster_name.content
        target_label  = "cluster"
      }
    }
    
    prometheus.scrape "agent" {
      job_name   = "integrations/agent"
      targets  = discovery.relabel.agent.output
      forward_to = [prometheus.relabel.agent.receiver]
    }
    
    prometheus.relabel "agent" {
      rule {
        source_labels = ["__name__"]
        regex = "up|agent_build_info"
        action = "keep"
      }
      forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
    }
        
    // PodMonitor
    prometheus.operator.podmonitors "pod_monitors" {
      forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
    }
        
    // ServiceMonitor
    prometheus.operator.servicemonitors "service_monitors" {
      forward_to = [prometheus.remote_write.grafana_cloud_prometheus.receiver]
    }
        
    // Grafana Cloud Prometheus
    local.file "prometheus_host" {
      filename  = "/etc/grafana-agent-credentials/prometheus_host"
    }
    
    local.file "prometheus_username" {
      filename  = "/etc/grafana-agent-credentials/prometheus_username"
    }
    
    local.file "prometheus_password" {
      filename  = "/etc/grafana-agent-credentials/prometheus_password"
      is_secret = true
    }
    
    prometheus.remote_write "grafana_cloud_prometheus" {
      endpoint {
        url = nonsensitive(local.file.prometheus_host.content) + "/api/prom/push"
        
        basic_auth {
          username = local.file.prometheus_username.content
          password = local.file.prometheus_password.content
        }
      }
    }
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.15.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.34.0"
    app.kubernetes.io/managed-by: Helm
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
---
# Source: k8s-monitoring/charts/grafana-agent/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.15.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.34.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-grafana-agent
subjects:
  - kind: ServiceAccount
    name: k8smon-grafana-agent
    namespace: default
---
# Source: k8s-monitoring/charts/grafana-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.15.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.34.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
  ports:
    - name: http-metrics
      port: 80
      targetPort: 80
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/grafana-agent/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.15.0
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: k8smon
    app.kubernetes.io/version: "v0.34.0"
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-agent
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-grafana-agent
      containers:
        - name: grafana-agent
          image: grafana/agent:v0.34.0
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/agent/config.river
            - --storage.path=/tmp/agent
            - --server.http.listen-addr=0.0.0.0:80
          env:
            - name: AGENT_MODE
              value: flow
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 80
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            -
              mountPath: /etc/grafana-agent-credentials
              name: grafana-agent-credentials
        - name: config-reloader
          image: jimmidyson/configmap-reload:v0.8.0
          args:
            - --volume-dir=/etc/agent
            - --webhook-url=http://localhost:80/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/agent
      dnsPolicy: ClusterFirst
      volumes:
        - name: config
          configMap:
            name: k8smon-grafana-agent
        - name: grafana-agent-credentials
          secret:
            secretName: grafana-agent-credentials
